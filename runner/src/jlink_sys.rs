/* automatically generated by rust-bindgen 0.59.2 */

pub const JLINK_EFM8_VIRTUAL_AREA_SIZE: u32 = 16777216;
pub const JLINK_EFM8_START_ADDR_CODE: u32 = 0;
pub const JLINK_EFM8_START_ADDR_IDATA: u32 = 16777216;
pub const JLINK_EFM8_START_ADDR_DDATA: u32 = 33554432;
pub const JLINK_EFM8_START_ADDR_XDATA: u32 = 50331648;
pub const JLINK_EFM8_START_ADDR_DSR: u32 = 67108864;
pub const JLINK_EFM8_START_ADDR_C2: u32 = 83886080;
pub const JLINK_EFM8_START_ADDR_DDATA_PAGE0: u32 = 33554688;
pub const JLINK_EFM8_START_ADDR_DDATA_PAGE1: u32 = 33554944;
pub const JLINK_EFM8_START_ADDR_DDATA_PAGE2: u32 = 33555200;
pub const JLINK_EFM8_START_ADDR_CODE_BANK0: u32 = 65536;
pub const JLINK_EFM8_START_ADDR_CODE_BANK1: u32 = 98304;
pub const JLINK_EFM8_START_ADDR_CODE_BANK2: u32 = 131072;
pub const JLINK_EFM8_OFF_REG_DSR_VERSION: u32 = 0;
pub const JLINK_EFM8_OFF_REG_DSR_DERIVATIVE: u32 = 1;
pub const JLINK_EFM8_FLACL_FORMAT_LOCKBYTE_COMPLEMENT: u32 = 0;
pub const JLINK_EFM8_FLACL_FORMAT_LOCKBYTE: u32 = 1;
pub const JLINK_EFM8_MEM_ACC_TYPE_D: u32 = 0;
pub const JLINK_EFM8_MEM_ACC_TYPE_I: u32 = 1;
pub const JLINK_EFM8_MEM_ACC_TYPE_C2: u32 = 2;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_DSRCMD: u32 = 0;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_BPENA: u32 = 1;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_BP0L: u32 = 2;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_BP0H: u32 = 3;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_BP1L: u32 = 4;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_BP1H: u32 = 5;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_BP2L: u32 = 6;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_BP2H: u32 = 7;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_BP3L: u32 = 8;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_BP3H: u32 = 9;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_BP4L: u32 = 10;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_BP4H: u32 = 11;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_BP5L: u32 = 12;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_BP5H: u32 = 13;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_BP6L: u32 = 14;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_BP6H: u32 = 15;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_BP7L: u32 = 16;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_BP7H: u32 = 17;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_DEBUG_ADDR_R0B0: u32 = 18;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_DEBUG_ADDR_R1B0: u32 = 19;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_DEBUG_ADDR_R2B0: u32 = 20;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_DEBUG_ADDR_DPTR_L: u32 = 21;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_DEBUG_ADDR_DPTR_H: u32 = 22;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_DEBUG_ADDR_PSW: u32 = 23;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_DEBUG_ADDR_A: u32 = 24;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_SECTOR_SIZE_SHIFT: u32 = 25;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_PSBANK: u32 = 26;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_SFRPAGE: u32 = 27;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_XRAM_ACC_MODE: u32 = 28;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_XADRH: u32 = 29;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_XADRL: u32 = 30;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_XDATA: u32 = 31;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_FLSCL: u32 = 32;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_RSTSRC: u32 = 33;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_VDM0CN: u32 = 34;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_NUM_SECTORS: u32 = 35;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_FLACL: u32 = 36;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_FLACL_SFRPAGE: u32 = 37;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_FLACL_FORMAT: u32 = 38;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDRL_DFLASH_START: u32 = 39;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDRH_DFLASH_START: u32 = 40;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_DFLASH_SECTOR_SIZE_SHIFT: u32 = 41;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_DEBUG_ADDR_SFRPAGE: u32 = 42;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_PSCTL: u32 = 43;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_DEBUG_ADDR_PSCTL: u32 = 44;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_CLKSEL: u32 = 45;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_DEBUG_ADDR_CLKSEL: u32 = 46;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_ADDR_FLKEY: u32 = 47;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_DEBUG_ADDR_FLKEY: u32 = 48;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_REMAP_SFR0_ADDR: u32 = 49;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_REMAP_SFR0_DEBUG_ADDR: u32 = 50;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_REMAP_SFR0_ACC_TYPE: u32 = 51;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_REMAP_SFR1_ADDR: u32 = 52;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_REMAP_SFR1_DEBUG_ADDR: u32 = 53;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_REMAP_SFR1_ACC_TYPE: u32 = 54;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_REMAP_SFR2_ADDR: u32 = 55;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_REMAP_SFR2_DEBUG_ADDR: u32 = 56;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_REMAP_SFR2_ACC_TYPE: u32 = 57;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_REMAP_SFR3_ADDR: u32 = 58;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_REMAP_SFR3_DEBUG_ADDR: u32 = 59;
pub const JLINK_EFM8_CUST_CPU_MODULE_DATA_OFF_REMAP_SFR3_ACC_TYPE: u32 = 60;
pub const JLINK_BT5511_VIRTUAL_AREA_SIZE: u32 = 16777216;
pub const JLINK_BT5511_START_ADDR_CODE: u32 = 0;
pub const JLINK_BT5511_START_ADDR_IDATA: u32 = 16777216;
pub const JLINK_BT5511_START_ADDR_DDATA: u32 = 33554432;
pub const JLINK_BT5511_START_ADDR_XDATA: u32 = 50331648;
pub const JLINK_MEM_ACC_SEC_DEFAULT: u32 = 0;
pub const JLINK_MEM_ACC_SEC_FORCE_SECURE: u32 = 1;
pub const JLINK_MEM_ACC_SEC_FORCE_NON_SECURE: u32 = 2;
pub const JLINK_MEM_ACC_CACHE_DEFAULT: u32 = 0;
pub const JLINK_MEM_ACC_CACHE_FORCE_WC: u32 = 1;
pub const JLINK_MEM_ACC_CACHE_FORCE_RC: u32 = 2;
pub const JLINK_MEM_ACC_CACHE_FORCE_RWC: u32 = 3;
pub const JLINK_MEM_ACC_CACHE_FORCE_NC: u32 = 4;
pub const JLINK_MEM_ACC_PRIV_DEFAULT: u32 = 0;
pub const JLINK_MEM_ACC_PRIV_PRIVILEDGED: u32 = 1;
pub const JLINK_MEM_ACC_PRIV_UNPRIVILEDGE: u32 = 2;
pub const JLINK_MEM_ACC_INC_DEFAULT: u32 = 0;
pub const JLINK_MEM_ACC_INC_NOADDRINC: u32 = 1;
pub const JLINK_MEM_ACC_TYPE_DEFAULT: u32 = 0;
pub const JLINK_MEM_ACC_TYPE_0: u32 = 0;
pub const JLINK_MEM_ACC_TYPE_CPU: u32 = 1;
pub const JLINK_MEM_ACC_TYPE_1: u32 = 1;
pub const JLINK_MEM_ACC_TYPE_2: u32 = 2;
pub const JLINK_MEM_ACC_TYPE_3: u32 = 3;
pub const JLINK_MEM_ACC_TYPE_4: u32 = 4;
pub const JLINK_MEM_ACC_TYPE_5: u32 = 5;
pub const JLINK_MEM_ACC_TYPE_6: u32 = 6;
pub const JLINK_MEM_ACC_TYPE_7: u32 = 7;
pub const JLINK_MEM_ACC_TYPE_CORTEX_PRECONFIG_AHBAP: u32 = 2;
pub const JLINK_MEM_ACC_TYPE_CORTEX_PRECONFIG_APBAP: u32 = 3;
pub const JLINK_MEM_ACC_TYPE_CORTEX_MEMAP: u32 = 4;
pub const JLINK_MEM_ACC_WIDTH_DEFAULT: u32 = 0;
pub const JLINK_MEM_ACC_WIDTH_8BIT: u32 = 1;
pub const JLINK_MEM_ACC_WIDTH_16BIT: u32 = 2;
pub const JLINK_MEM_ACC_WIDTH_32BIT: u32 = 4;
pub const JLINK_MEM_ACC_WIDTH_64BIT: u32 = 8;
pub const JLINK_MEM_ACC_SEC_POS: u32 = 30;
pub const JLINK_MEM_ACC_CACHE_POS: u32 = 27;
pub const JLINK_MEM_ACC_PRIV_POS: u32 = 25;
pub const JLINK_MEM_ACC_INC_POS: u32 = 24;
pub const JLINK_MEM_ACC_TYPE_POS: u32 = 21;
pub const JLINK_MEM_ACC_MODEPARAM_POS: u32 = 13;
pub const JLINK_MEM_ACC_WIDTH_POS: u32 = 0;
pub const JLINK_MEM_ACC_SEC_MASK: u32 = 3;
pub const JLINK_MEM_ACC_CACHE_MASK: u32 = 7;
pub const JLINK_MEM_ACC_PRIV_MASK: u32 = 3;
pub const JLINK_MEM_ACC_INC_MASK: u32 = 1;
pub const JLINK_MEM_ACC_TYPE_MASK: u32 = 7;
pub const JLINK_MEM_ACC_MODEPARAM_MASK: u32 = 255;
pub const JLINK_MEM_ACC_WIDTH_MASK: u32 = 255;
pub const JLINK_EMU_PRODUCT_ID_UNKNOWN: u32 = 0;
pub const JLINK_EMU_PRODUCT_ID_JLINK: u32 = 1;
pub const JLINK_EMU_PRODUCT_ID_JLINK_CF: u32 = 2;
pub const JLINK_EMU_PRODUCT_ID_JLINK_CE: u32 = 3;
pub const JLINK_EMU_PRODUCT_ID_JLINK_KS: u32 = 4;
pub const JLINK_EMU_PRODUCT_ID_DIGI_LINK: u32 = 5;
pub const JLINK_EMU_PRODUCT_ID_MIDAS: u32 = 6;
pub const JLINK_EMU_PRODUCT_ID_SAMICE: u32 = 7;
pub const JLINK_EMU_PRODUCT_ID_JTRACE: u32 = 8;
pub const JLINK_EMU_PRODUCT_ID_JTRACE_CS: u32 = 9;
pub const JLINK_EMU_PRODUCT_ID_FLASHER_ARM: u32 = 10;
pub const JLINK_EMU_PRODUCT_ID_JLINK_PRO: u32 = 11;
pub const JLINK_EMU_PRODUCT_ID_JLINK_EDU: u32 = 12;
pub const JLINK_EMU_PRODUCT_ID_JLINK_ULTRA: u32 = 13;
pub const JLINK_EMU_PRODUCT_ID_FLASHER_PPC: u32 = 14;
pub const JLINK_EMU_PRODUCT_ID_FLASHER_RX: u32 = 15;
pub const JLINK_EMU_PRODUCT_ID_JLINK_OB_RX200: u32 = 16;
pub const JLINK_EMU_PRODUCT_ID_JLINK_LITE: u32 = 17;
pub const JLINK_EMU_PRODUCT_ID_JLINK_OB_SAM3U128: u32 = 18;
pub const JLINK_EMU_PRODUCT_ID_JLINK_LITE_CORTEXM: u32 = 19;
pub const JLINK_EMU_PRODUCT_ID_JLINK_LITE_LPC: u32 = 20;
pub const JLINK_EMU_PRODUCT_ID_JLINK_LITE_STM32: u32 = 21;
pub const JLINK_EMU_PRODUCT_ID_JLINK_LITE_FSL: u32 = 22;
pub const JLINK_EMU_PRODUCT_ID_JLINK_LITE_ADI: u32 = 23;
pub const JLINK_EMU_PRODUCT_ID_ENERGY_MICRO_EFM32: u32 = 24;
pub const JLINK_EMU_PRODUCT_ID_JLINK_LITE_XMC4000: u32 = 25;
pub const JLINK_EMU_PRODUCT_ID_JLINK_LITE_XMC4200: u32 = 32;
pub const JLINK_EMU_PRODUCT_ID_JLINK_LPC_LINK2: u32 = 33;
pub const JLINK_EMU_PRODUCT_ID_FLASHER_PRO: u32 = 34;
pub const JLINK_EMU_PRODUCT_ID_JTRACE_PRO: u32 = 254;
pub const JLINK_ERR_EMU_NO_CONNECTION: i32 = -256;
pub const JLINK_ERR_EMU_COMM_ERROR: i32 = -257;
pub const JLINK_ERR_DLL_NOT_OPEN: i32 = -258;
pub const JLINK_ERR_VCC_FAILURE: i32 = -259;
pub const JLINK_ERR_INVALID_HANDLE: i32 = -260;
pub const JLINK_ERR_NO_CPU_FOUND: i32 = -261;
pub const JLINK_ERR_EMU_FEATURE_NOT_SUPPORTED: i32 = -262;
pub const JLINK_ERR_EMU_NO_MEMORY: i32 = -263;
pub const JLINK_ERR_TIF_STATUS_ERROR: i32 = -264;
pub const JLINK_ERR_FLASH_PROG_COMPARE_FAILED: i32 = -265;
pub const JLINK_ERR_FLASH_PROG_PROGRAM_FAILED: i32 = -266;
pub const JLINK_ERR_FLASH_PROG_VERIFY_FAILED: i32 = -267;
pub const JLINK_ERR_OPEN_FILE_FAILED: i32 = -268;
pub const JLINK_ERR_UNKNOWN_FILE_FORMAT: i32 = -269;
pub const JLINK_ERR_WRITE_TARGET_MEMORY_FAILED: i32 = -270;
pub const JLINK_ERR_DEVICE_FEATURE_NOT_SUPPORTED: i32 = -271;
pub const JLINK_ERR_WRONG_USER_CONFIG: i32 = -272;
pub const JLINK_ERR_NO_TARGET_DEVICE_SELECTED: i32 = -273;
pub const JLINK_ERR_CPU_IN_LOW_POWER_MODE: i32 = -274;
pub const JLINKARM_ERR_CPU_NO_CLOCK: u32 = 2147483649;
pub const JLINKARM_ERR_CPU_NO_POWER: u32 = 2147483650;
pub const JLINK_FLASH_ERR_BLOCK_VERIFICATION_ERROR: u32 = 1;
pub const JLINK_FLASH_ERR_ITEM_VERIFICATION_ERROR: u32 = 2;
pub const JLINK_FLASH_ERR_TIMEOUT: u32 = 3;
pub const JLINK_FLASH_ERR_PROGRAM_ERROR: u32 = 4;
pub const JLINK_FLASH_ERR_PROGRAM_1_OVER_0: u32 = 5;
pub const JLINK_FLASH_ERR_SECTOR_IS_LOCKED: u32 = 6;
pub const JLINK_FLASH_ERR_ERASE_ERROR: u32 = 7;
pub const JLINK_FLASH_ERR_NO_FLASH_MEMORY: u32 = 8;
pub const JLINK_FLASH_ERR_GENERIC_ERROR: u32 = 9;
pub const JLINK_FLASH_ERR_ALGO_SPECIFIC_ERROR: i32 = -2;
pub const JLINK_FLASH_ERR_NO_FLASH_BANK: i32 = -3;
pub const JLINK_FLASH_ERR_PROGRAM_DOES_NOT_FIT: i32 = -4;
pub const JLINKARM_PIN_STATUS_LOW: u32 = 0;
pub const JLINKARM_PIN_STATUS_HIGH: u32 = 1;
pub const JLINKARM_PIN_STATUS_UNKNOWN: u32 = 255;
pub const JLINK_PIN_OVERRIDE_MODE_RELEASE: u32 = 0;
pub const JLINK_PIN_OVERRIDE_MODE_PIO_IN: u32 = 1;
pub const JLINK_PIN_OVERRIDE_MODE_PIO_OUT_LOW: u32 = 2;
pub const JLINK_PIN_OVERRIDE_MODE_PIO_OUT_HIGH: u32 = 3;
pub const JLINK_PIN_OVERRIDE_MODE_UART_TX: u32 = 4;
pub const JLINK_PIN_OVERRIDE_MODE_UART_RX: u32 = 5;
pub const JLINK_PIN_OVERRIDE_MODE_UART_RXTX: u32 = 6;
pub const JLINKARM_TIF_JTAG: u32 = 0;
pub const JLINKARM_TIF_SWD: u32 = 1;
pub const JLINKARM_TIF_BDM3: u32 = 2;
pub const JLINKARM_TIF_FINE: u32 = 3;
pub const JLINKARM_TIF_ICSP: u32 = 4;
pub const JLINKARM_TIF_SPI: u32 = 5;
pub const JLINKARM_TIF_C2: u32 = 6;
pub const JLINKARM_TIF_CJTAG: u32 = 7;
pub const JLINKARM_TIF_SWIM: u32 = 8;
pub const JLINKARM_TIF_PDI: u32 = 9;
pub const JLINKARM_TIF_MC2WJTAG_TDI: u32 = 10;
pub const JLINKARM_TIF_SPI_IDLE_CLK_LOW: u32 = 11;
pub const JLINKARM_TIF_I2C: u32 = 12;
pub const JLINKARM_TIF_SPI2FE: u32 = 13;
pub const JLINKARM_TIF_QSPI: u32 = 14;
pub const JLINKARM_TIF_NUMTIFS: u32 = 15;
pub const JLINK_CJTAG_INIT_LONG_ACT_SEQ: u32 = 0;
pub const JLINK_CJTAG_INIT_SHORT_ACT_SEQ: u32 = 1;
pub const JLINK_CJTAG_INIT_WILIOT_ACT_SEQ: u32 = 2;
pub const JLINK_HSS_FLAG_TIMESTAMP_US: u32 = 1;
pub const JLINK_PIN_MAX_NUM_PINS: u32 = 8;
pub const JLINK_SPI_FLAG_MASK_CS_START_STATE: u32 = 3;
pub const JLINK_SPI_FLAG_MASK_CS_END_STATE: u32 = 12;
pub const JLINK_SPI_FLAG_MASK_START_MODE: u32 = 768;
pub const JLINK_SPI_FLAG_MASK_END_MODE: u32 = 3072;
pub const JLINK_SPI_FLAG_MASK_HANDLE_CS_ON_REPEATS: u32 = 16;
pub const JLINK_SPI_FLAG_MASK_CS_INDEX: u32 = 96;
pub const JLINK_SPI_FLAG_SHIFT_CS_INDEX: u32 = 5;
pub const JLINK_SPI_FLAG_CS_START_STATE_U: u32 = 0;
pub const JLINK_SPI_FLAG_CS_START_STATE_0: u32 = 2;
pub const JLINK_SPI_FLAG_CS_START_STATE_1: u32 = 3;
pub const JLINK_SPI_FLAG_CS_END_STATE_U: u32 = 0;
pub const JLINK_SPI_FLAG_CS_END_STATE_0: u32 = 8;
pub const JLINK_SPI_FLAG_CS_END_STATE_1: u32 = 12;
pub const JLINK_SPI_FLAG_HANDLE_CS_ON_REPEATS: u32 = 16;
pub const JLINK_SPI_FLAG_CS_INDEX_0: u32 = 0;
pub const JLINK_SPI_FLAG_CS_INDEX_1: u32 = 32;
pub const JLINK_SPI_FLAG_CS_INDEX_2: u32 = 64;
pub const JLINK_SPI_FLAG_CS_INDEX_3: u32 = 96;
pub const JLINK_SPI_FLAG_START_MODE_U: u32 = 0;
pub const JLINK_SPI_FLAG_START_MODE_S: u32 = 256;
pub const JLINK_SPI_FLAG_START_MODE_Q: u32 = 512;
pub const JLINK_SPI_FLAG_END_MODE_U: u32 = 0;
pub const JLINK_SPI_FLAG_END_MODE_S: u32 = 1024;
pub const JLINK_SPI_FLAG_END_MODE_Q: u32 = 2048;
pub const JLINK_SPI_CMD_TRANSFER: u32 = 1;
pub const JLINK_SPI_CMD_TRANSFER_UNTIL: u32 = 2;
pub const JLINK_STRACE_CMD_SET_TRACE_EVENT: u32 = 0;
pub const JLINK_STRACE_CMD_CLR_TRACE_EVENT: u32 = 1;
pub const JLINK_STRACE_CMD_CLR_ALL_TRACE_EVENTS: u32 = 2;
pub const JLINK_STRACE_CMD_SET_BUFF_SIZE: u32 = 3;
pub const JLINK_STRACE_EVENT_TYPE_CODE_FETCH: u32 = 0;
pub const JLINK_STRACE_EVENT_TYPE_DATA_ACC: u32 = 1;
pub const JLINK_STRACE_EVENT_TYPE_DATA_LOAD: u32 = 2;
pub const JLINK_STRACE_EVENT_TYPE_DATA_STORE: u32 = 3;
pub const JLINK_STRACE_OP_TRACE_START: u32 = 0;
pub const JLINK_STRACE_OP_TRACE_STOP: u32 = 1;
pub const JLINK_STRACE_OP_TRACE_INCLUDE_RANGE: u32 = 2;
pub const JLINK_STRACE_OP_TRACE_EXCLUDE_RANGE: u32 = 3;
pub const JLINKARM_DEV_FAMILY_AUTO: u32 = 0;
pub const JLINKARM_DEV_FAMILY_CM1: u32 = 1;
pub const JLINKARM_DEV_FAMILY_CF: u32 = 2;
pub const JLINKARM_DEV_FAMILY_CM3: u32 = 3;
pub const JLINKARM_DEV_FAMILY_SIM: u32 = 4;
pub const JLINKARM_DEV_FAMILY_XSCALE: u32 = 5;
pub const JLINKARM_DEV_FAMILY_CM0: u32 = 6;
pub const JLINKARM_DEV_FAMILY_ARM7: u32 = 7;
pub const JLINKARM_DEV_FAMILY_CORTEX_A8: u32 = 8;
pub const JLINKARM_DEV_FAMILY_ARM9: u32 = 9;
pub const JLINKARM_DEV_FAMILY_ARM10: u32 = 10;
pub const JLINKARM_DEV_FAMILY_ARM11: u32 = 11;
pub const JLINKARM_DEV_FAMILY_CORTEX_R4: u32 = 12;
pub const JLINKARM_DEV_FAMILY_RX: u32 = 13;
pub const JLINKARM_DEV_FAMILY_CM4: u32 = 14;
pub const JLINKARM_DEV_FAMILY_CORTEX_A5: u32 = 15;
pub const JLINKARM_DEV_FAMILY_POWER_PC: u32 = 16;
pub const JLINK_DEV_FAMILY_MIPS: u32 = 17;
pub const JLINK_DEV_FAMILY_EFM8: u32 = 18;
pub const JLINK_DEV_FAMILY_RISC_V: u32 = 19;
pub const JLINK_DEV_FAMILY_CORTEX_AR_ARMV8: u32 = 20;
pub const JLINK_DEV_FAMILY_BT5511: u32 = 21;
pub const JLINKARM_DEV_FAMILY_ANY: u32 = 255;
pub const JLINK_CORE_NONE: u32 = 0;
pub const JLINK_CORE_ANY: u32 = 4294967295;
pub const JLINK_CORE_CORTEX_M1: u32 = 16777471;
pub const JLINK_CORE_COLDFIRE: u32 = 50331647;
pub const JLINK_CORE_CORTEX_M3: u32 = 50331903;
pub const JLINK_CORE_CORTEX_M3_R1P0: u32 = 50331664;
pub const JLINK_CORE_CORTEX_M3_R1P1: u32 = 50331665;
pub const JLINK_CORE_CORTEX_M3_R2P0: u32 = 50331680;
pub const JLINK_CORE_CORTEX_M3_R2P1: u32 = 50331681;
pub const JLINK_CORE_SIM: u32 = 83886079;
pub const JLINK_CORE_XSCALE: u32 = 100663295;
pub const JLINK_CORE_CORTEX_M0: u32 = 100663551;
pub const JLINK_CORE_CORTEX_M23: u32 = 100729087;
pub const JLINK_CORE_ARM7: u32 = 134217727;
pub const JLINK_CORE_ARM7TDMI: u32 = 117440767;
pub const JLINK_CORE_ARM7TDMI_R3: u32 = 117440575;
pub const JLINK_CORE_ARM7TDMI_R4: u32 = 117440591;
pub const JLINK_CORE_ARM7TDMI_S: u32 = 117441023;
pub const JLINK_CORE_ARM7TDMI_S_R3: u32 = 117440831;
pub const JLINK_CORE_ARM7TDMI_S_R4: u32 = 117440847;
pub const JLINK_CORE_CORTEX_A8: u32 = 134217983;
pub const JLINK_CORE_CORTEX_A7: u32 = 134742271;
pub const JLINK_CORE_CORTEX_A9: u32 = 134807807;
pub const JLINK_CORE_CORTEX_A12: u32 = 134873343;
pub const JLINK_CORE_CORTEX_A15: u32 = 134938879;
pub const JLINK_CORE_CORTEX_A17: u32 = 135004415;
pub const JLINK_CORE_ARM9: u32 = 167772159;
pub const JLINK_CORE_ARM9TDMI_S: u32 = 150995455;
pub const JLINK_CORE_ARM920T: u32 = 153092351;
pub const JLINK_CORE_ARM922T: u32 = 153223423;
pub const JLINK_CORE_ARM926EJ_S: u32 = 153485823;
pub const JLINK_CORE_ARM946E_S: u32 = 155582975;
pub const JLINK_CORE_ARM966E_S: u32 = 157680127;
pub const JLINK_CORE_ARM968E_S: u32 = 157811199;
pub const JLINK_CORE_ARM11: u32 = 201326591;
pub const JLINK_CORE_ARM1136: u32 = 188153855;
pub const JLINK_CORE_ARM1136J: u32 = 188089087;
pub const JLINK_CORE_ARM1136J_S: u32 = 188089343;
pub const JLINK_CORE_ARM1136JF: u32 = 188090111;
pub const JLINK_CORE_ARM1136JF_S: u32 = 188090367;
pub const JLINK_CORE_ARM1156: u32 = 190251007;
pub const JLINK_CORE_ARM1176: u32 = 192348159;
pub const JLINK_CORE_ARM1176J: u32 = 192283391;
pub const JLINK_CORE_ARM1176J_S: u32 = 192283647;
pub const JLINK_CORE_ARM1176JF: u32 = 192284415;
pub const JLINK_CORE_ARM1176JF_S: u32 = 192284671;
pub const JLINK_CORE_CORTEX_R4: u32 = 201326847;
pub const JLINK_CORE_CORTEX_R5: u32 = 201392383;
pub const JLINK_CORE_CORTEX_R8: u32 = 201457919;
pub const JLINK_CORE_RX: u32 = 234881023;
pub const JLINK_CORE_RX610: u32 = 218169343;
pub const JLINK_CORE_RX62N: u32 = 218234879;
pub const JLINK_CORE_RX62T: u32 = 218300415;
pub const JLINK_CORE_RX63N: u32 = 218365951;
pub const JLINK_CORE_RX630: u32 = 218431487;
pub const JLINK_CORE_RX63T: u32 = 218497023;
pub const JLINK_CORE_RX621: u32 = 218562559;
pub const JLINK_CORE_RX62G: u32 = 218628095;
pub const JLINK_CORE_RX631: u32 = 218693631;
pub const JLINK_CORE_RX65N: u32 = 218759167;
pub const JLINK_CORE_RX66T: u32 = 218824703;
pub const JLINK_CORE_RX72T: u32 = 218890239;
pub const JLINK_CORE_RX66N: u32 = 218955775;
pub const JLINK_CORE_RX72M: u32 = 219021311;
pub const JLINK_CORE_RX72N: u32 = 219086847;
pub const JLINK_CORE_RX210: u32 = 219217919;
pub const JLINK_CORE_RX21A: u32 = 219283455;
pub const JLINK_CORE_RX220: u32 = 219348991;
pub const JLINK_CORE_RX230: u32 = 219414527;
pub const JLINK_CORE_RX231: u32 = 219480063;
pub const JLINK_CORE_RX23T: u32 = 219545599;
pub const JLINK_CORE_RX24T: u32 = 219611135;
pub const JLINK_CORE_RX111: u32 = 220266495;
pub const JLINK_CORE_RX110: u32 = 220332031;
pub const JLINK_CORE_RX113: u32 = 220397567;
pub const JLINK_CORE_RX130: u32 = 220463103;
pub const JLINK_CORE_RX64M: u32 = 221315071;
pub const JLINK_CORE_RX71M: u32 = 221380607;
pub const JLINK_CORE_CORTEX_M4: u32 = 234881279;
pub const JLINK_CORE_CORTEX_M7: u32 = 234946815;
pub const JLINK_CORE_CORTEX_M33: u32 = 235012351;
pub const JLINK_CORE_CORTEX_M55: u32 = 235077887;
pub const JLINK_CORE_STAR: u32 = 235143423;
pub const JLINK_CORE_CORTEX_A5: u32 = 251658495;
pub const JLINK_CORE_POWER_PC: u32 = 285212671;
pub const JLINK_CORE_POWER_PC_N1: u32 = 285147391;
pub const JLINK_CORE_POWER_PC_N2: u32 = 285147647;
pub const JLINK_CORE_MIPS: u32 = 301989887;
pub const JLINK_CORE_MIPS_M4K: u32 = 285278207;
pub const JLINK_CORE_MIPS_MICROAPTIV: u32 = 285343743;
pub const JLINK_CORE_MIPS_M14K: u32 = 285409279;
pub const JLINK_CORE_EFM8_UNSPEC: u32 = 318767103;
pub const JLINK_CORE_CIP51: u32 = 302055423;
pub const JLINK_CORE_RV32: u32 = 335544319;
pub const JLINK_CORE_RV64: u32 = 318832639;
pub const JLINK_CORE_CORTEX_A53: u32 = 335609855;
pub const JLINK_CORE_CORTEX_A57: u32 = 335675391;
pub const JLINK_CORE_CORTEX_A72: u32 = 335740927;
pub const JLINK_CORE_CORTEX_A35: u32 = 335806463;
pub const JLINK_CORE_BT5511: u32 = 352387071;
pub const JLINKARM_EMU_CPU_CAP_RESERVED: u32 = 1;
pub const JLINKARM_EMU_CPU_CAP_READ_MEM: u32 = 2;
pub const JLINKARM_EMU_CPU_CAP_WRITE_MEM: u32 = 4;
pub const JLINKARM_EMU_CPU_CAP_READ_REGS: u32 = 8;
pub const JLINKARM_EMU_CPU_CAP_WRITE_REGS: u32 = 16;
pub const JLINKARM_EMU_CPU_CAP_GO: u32 = 32;
pub const JLINKARM_EMU_CPU_CAP_STEP: u32 = 64;
pub const JLINKARM_EMU_CPU_CAP_HALT: u32 = 128;
pub const JLINKARM_EMU_CPU_CAP_IS_HALTED: u32 = 256;
pub const JLINKARM_EMU_CPU_CAP_RESET: u32 = 512;
pub const JLINKARM_EMU_CPU_CAP_RUN_STOP: u32 = 1024;
pub const JLINKARM_EMU_CPU_CAP_TERMINAL: u32 = 2048;
pub const JLINKARM_EMU_CPU_CAP_DCC: u32 = 16384;
pub const JLINKARM_EMU_CPU_CAP_HSS: u32 = 32768;
pub const JLINKARM_EMU_CAP_RESERVED: u32 = 1;
pub const JLINKARM_EMU_CAP_GET_HW_VERSION: u32 = 2;
pub const JLINKARM_EMU_CAP_WRITE_DCC: u32 = 4;
pub const JLINKARM_EMU_CAP_ADAPTIVE_CLOCKING: u32 = 8;
pub const JLINKARM_EMU_CAP_READ_CONFIG: u32 = 16;
pub const JLINKARM_EMU_CAP_WRITE_CONFIG: u32 = 32;
pub const JLINKARM_EMU_CAP_TRACE_ARM79: u32 = 64;
pub const JLINKARM_EMU_CAP_WRITE_MEM: u32 = 128;
pub const JLINKARM_EMU_CAP_READ_MEM: u32 = 256;
pub const JLINKARM_EMU_CAP_SPEED_INFO: u32 = 512;
pub const JLINKARM_EMU_CAP_EXEC_CODE: u32 = 1024;
pub const JLINKARM_EMU_CAP_GET_MAX_BLOCK_SIZE: u32 = 2048;
pub const JLINKARM_EMU_CAP_GET_HW_INFO: u32 = 4096;
pub const JLINKARM_EMU_CAP_SET_KS_POWER: u32 = 8192;
pub const JLINKARM_EMU_CAP_RESET_STOP_TIMED: u32 = 16384;
pub const JLINKARM_EMU_CAP_GET_LICENSE_INFO: u32 = 32768;
pub const JLINKARM_EMU_CAP_MEASURE_RTCK_REACT: u32 = 65536;
pub const JLINKARM_EMU_CAP_SELECT_IF: u32 = 131072;
pub const JLINKARM_EMU_CAP_RW_MEM_ARM79: u32 = 262144;
pub const JLINKARM_EMU_CAP_GET_COUNTERS: u32 = 524288;
pub const JLINKARM_EMU_CAP_READ_DCC: u32 = 1048576;
pub const JLINKARM_EMU_CAP_GET_CPU_CAPS: u32 = 2097152;
pub const JLINKARM_EMU_CAP_EXEC_CPU_CMD: u32 = 4194304;
pub const JLINKARM_EMU_CAP_SWO: u32 = 8388608;
pub const JLINKARM_EMU_CAP_WRITE_DCC_EX: u32 = 16777216;
pub const JLINKARM_EMU_CAP_UPDATE_FIRMWARE_EX: u32 = 33554432;
pub const JLINKARM_EMU_CAP_FILE_IO: u32 = 67108864;
pub const JLINKARM_EMU_CAP_REGISTER: u32 = 134217728;
pub const JLINKARM_EMU_CAP_INDICATORS: u32 = 268435456;
pub const JLINKARM_EMU_CAP_TEST_NET_SPEED: u32 = 536870912;
pub const JLINKARM_EMU_CAP_RAWTRACE: u32 = 1073741824;
pub const JLINKARM_EMU_CAP_GET_CAPS_EX: u32 = 2147483648;
pub const JLINKARM_EMU_CAP_EX_RESERVED: u32 = 0;
pub const JLINKARM_EMU_CAP_EX_GET_HW_VERSION: u32 = 1;
pub const JLINKARM_EMU_CAP_EX_WRITE_DCC: u32 = 2;
pub const JLINKARM_EMU_CAP_EX_ADAPTIVE_CLOCKING: u32 = 3;
pub const JLINKARM_EMU_CAP_EX_READ_CONFIG: u32 = 4;
pub const JLINKARM_EMU_CAP_EX_WRITE_CONFIG: u32 = 5;
pub const JLINKARM_EMU_CAP_EX_TRACE_ARM79: u32 = 6;
pub const JLINKARM_EMU_CAP_EX_WRITE_MEM: u32 = 7;
pub const JLINKARM_EMU_CAP_EX_READ_MEM: u32 = 8;
pub const JLINKARM_EMU_CAP_EX_SPEED_INFO: u32 = 9;
pub const JLINKARM_EMU_CAP_EX_EXEC_CODE: u32 = 10;
pub const JLINKARM_EMU_CAP_EX_GET_MAX_BLOCK_SIZE: u32 = 11;
pub const JLINKARM_EMU_CAP_EX_GET_HW_INFO: u32 = 12;
pub const JLINKARM_EMU_CAP_EX_SET_KS_POWER: u32 = 13;
pub const JLINKARM_EMU_CAP_EX_RESET_STOP_TIMED: u32 = 14;
pub const JLINKARM_EMU_CAP_EX_GET_LICENSE_INFO: u32 = 15;
pub const JLINKARM_EMU_CAP_EX_MEASURE_RTCK_REACT: u32 = 16;
pub const JLINKARM_EMU_CAP_EX_SELECT_IF: u32 = 17;
pub const JLINKARM_EMU_CAP_EX_RW_MEM_ARM79: u32 = 18;
pub const JLINKARM_EMU_CAP_EX_GET_COUNTERS: u32 = 19;
pub const JLINKARM_EMU_CAP_EX_READ_DCC: u32 = 20;
pub const JLINKARM_EMU_CAP_EX_GET_CPU_CAPS: u32 = 21;
pub const JLINKARM_EMU_CAP_EX_EXEC_CPU_CMD: u32 = 22;
pub const JLINKARM_EMU_CAP_EX_SWO: u32 = 23;
pub const JLINKARM_EMU_CAP_EX_WRITE_DCC_EX: u32 = 24;
pub const JLINKARM_EMU_CAP_EX_UPDATE_FIRMWARE_EX: u32 = 25;
pub const JLINKARM_EMU_CAP_EX_FILE_IO: u32 = 26;
pub const JLINKARM_EMU_CAP_EX_REGISTER: u32 = 27;
pub const JLINKARM_EMU_CAP_EX_INDICATORS: u32 = 28;
pub const JLINKARM_EMU_CAP_EX_TEST_NET_SPEED: u32 = 29;
pub const JLINKARM_EMU_CAP_EX_RAWTRACE: u32 = 30;
pub const JLINKARM_EMU_CAP_EX_GET_CAPS_EX: u32 = 31;
pub const JLINKARM_EMU_CAP_EX_HW_JTAG_WRITE: u32 = 32;
pub const JLINKARM_EMU_CAP_EX_EMUCOM: u32 = 33;
pub const JLINKARM_EMU_CAP_EX_EXEC_CPU2_CMD: u32 = 34;
pub const JLINKARM_EMU_CAP_EX_GET_CPU2_CAPS: u32 = 35;
pub const JLINKARM_EMU_CAP_EX_TEST_NET: u32 = 36;
pub const JLINKARM_EMU_CAP_EX_POWERTRACE: u32 = 37;
pub const JLINKARM_EMU_CAP_EX_ETHERNET: u32 = 38;
pub const JLINKARM_EMU_CAP_EX_HW_SET_SWDIO_DIR: u32 = 39;
pub const JLINKARM_EMU_CAP_EX_HW_ENABLE_DISABLE_SWCLK: u32 = 40;
pub const JLINKARM_EMU_CAP_EX_HW_ENABLE_DISABLE_JTAG_IF: u32 = 41;
pub const JLINKARM_EMU_CAP_EX_HW_SET_CLEAR_TCK: u32 = 42;
pub const JLINKARM_EMU_CAP_EX_PCODE_EXEC: u32 = 44;
pub const JLINKARM_EMU_CAP_EX_CDC_EXEC: u32 = 48;
pub const JLINKARM_EMU_CAP_EX_CDC_SET_HOOK_FUNCS: u32 = 49;
pub const JLINKARM_EMU_CAP_EX_HANDLE_BMI: u32 = 50;
pub const JLINKARM_EMU_CAP_EX_HANDLE_GPIO: u32 = 51;
pub const JLINKARM_EMU_CAP_EX_HSS: u32 = 53;
pub const JLINKARM_EMU_CAP_EX_FILE_IO_EX: u32 = 54;
pub const JLINKARM_EMU_CAP_EX_SPI: u32 = 56;
pub const JLINKARM_EMU_CAP_EX_SUPPORT_OTS_CONFIG_X: u32 = 57;
pub const JLINKARM_EMU_CAP_EX_HANDLE_SECURITY: u32 = 58;
pub const JLINKARM_EMU_CAP_EX_PIN_OVERRIDE: u32 = 59;
pub const JLINKARM_EMU_CAP_EX_WINUSB: u32 = 61;
pub const JLINKARM_EMU_CAP_EX_USB_IP: u32 = 66;
pub const JLINKARM_EMU_CAP_EX_WIFI: u32 = 67;
pub const JLINKARM_EMU_CAP_EX_FIXED_VTREF: u32 = 68;
pub const JLINKARM_EMU_CAP_EX_MULTI_VCOM: u32 = 70;
pub const JLINKARM_EMU_CAP_EX_SPI_STAND_ALONE: u32 = 72;
pub const JLINKARM_EMUCOM_CHANNEL_TIME: u32 = 0;
pub const JLINKARM_EMUCOM_CHANNEL_USER: u32 = 65536;
pub const JLINKARM_EMUCOM_ERR: u32 = 2147483648;
pub const JLINKARM_EMUCOM_ERR_CHANNEL_NOT_SUPPORTED: u32 = 2147483649;
pub const JLINKARM_EMUCOM_ERR_BUFFER_TOO_SMALL: u32 = 2164260864;
pub const JLINKARM_HOSTIF_USB: u32 = 1;
pub const JLINKARM_HOSTIF_IP: u32 = 2;
pub const JLINKARM_BP_MODE0: u32 = 0;
pub const JLINKARM_BP_MODE1: u32 = 1;
pub const JLINKARM_BP_MODE2: u32 = 2;
pub const JLINKARM_BP_MODE3: u32 = 3;
pub const JLINKARM_BP_MODE_MASK: u32 = 15;
pub const JLINKARM_BP_IMP_SW_RAM: u32 = 16;
pub const JLINKARM_BP_IMP_SW_FLASH: u32 = 32;
pub const JLINKARM_BP_IMP_SW: u32 = 240;
pub const JLINKARM_BP_IMP_HW: u32 = 4294967040;
pub const JLINKARM_BP_IMP_ANY: u32 = 4294967280;
pub const JLINKARM_BP_IMP_MASK: u32 = 4294967280;
pub const JLINKARM_BP_HANDLE_ALL: u32 = 4294967295;
pub const JLINKARM_WP_HANDLE_ALL: u32 = 4294967295;
pub const JLINKARM_BP_TYPE_ARM: u32 = 1;
pub const JLINKARM_BP_TYPE_THUMB: u32 = 2;
pub const JLINKARM_BP_IMP_FLAG_HARD: u32 = 1;
pub const JLINKARM_BP_IMP_FLAG_SOFT: u32 = 2;
pub const JLINKARM_BP_IMP_FLAG_PENDING: u32 = 4;
pub const JLINKARM_BP_IMP_FLAG_FLASH: u32 = 16;
pub const JLINK_PCODE_CAP_RESERVED: u32 = 1;
pub const JLINK_PCODE_CAP_GET_S32_VERSION: u32 = 2;
pub const JLINK_PCODE_CAP_EXEC: u32 = 4;
pub const JLINK_PCODE_CAP_CREATE_MODULE: u32 = 8;
pub const JLINK_PCODE_CAP_DELETE_MODULE: u32 = 16;
pub const JLINK_PCODE_CAP_DOWNLOAD: u32 = 32;
pub const JLINK_PCODE_CAP_FREE: u32 = 64;
pub const JLINK_PCODE_CAP_GO: u32 = 128;
pub const JLINK_PCODE_CAP_STEP: u32 = 256;
pub const JLINK_PCODE_CAP_READ_MEM: u32 = 512;
pub const JLINK_PCODE_CAP_WRITE_MEM: u32 = 1024;
pub const JLINK_PCODE_CAP_SUPPORT_V2: u32 = 2048;
pub const JLINKARM_EVENT_TYPE_DATA_BP: u32 = 1;
pub const JLINKARM_EVENT_ERR_UNKNOWN: u32 = 2147483648;
pub const JLINKARM_EVENT_ERR_NO_MORE_EVENTS: u32 = 2147483649;
pub const JLINKARM_EVENT_ERR_NO_MORE_ADDR_COMP: u32 = 2147483650;
pub const JLINKARM_EVENT_ERR_NO_MORE_DATA_COMP: u32 = 2147483652;
pub const JLINKARM_EVENT_ERR_INVALID_ADDR_MASK: u32 = 2147483680;
pub const JLINKARM_EVENT_ERR_INVALID_DATA_MASK: u32 = 2147483712;
pub const JLINKARM_EVENT_ERR_INVALID_ACCESS_MASK: u32 = 2147483776;
pub const JLINK_EVENT_HANDLE_ALL: u32 = 4294967295;
pub const JLINK_EVENT_DATA_BP_DIR_RD: u32 = 0;
pub const JLINK_EVENT_DATA_BP_DIR_WR: u32 = 1;
pub const JLINK_EVENT_DATA_BP_PRIV: u32 = 16;
pub const JLINK_EVENT_DATA_BP_SIZE_8BIT: u32 = 0;
pub const JLINK_EVENT_DATA_BP_SIZE_16BIT: u32 = 2;
pub const JLINK_EVENT_DATA_BP_SIZE_32BIT: u32 = 4;
pub const JLINK_EVENT_DATA_BP_MASK_SIZE: u32 = 6;
pub const JLINK_EVENT_DATA_BP_MASK_DIR: u32 = 1;
pub const JLINK_EVENT_DATA_BP_MASK_PRIV: u32 = 16;
pub const JLINKARM_WP_DIR_RD: u32 = 0;
pub const JLINKARM_WP_DIR_WR: u32 = 1;
pub const JLINKARM_WP_PRIV: u32 = 16;
pub const JLINKARM_WP_SIZE_8BIT: u32 = 0;
pub const JLINKARM_WP_SIZE_16BIT: u32 = 2;
pub const JLINKARM_WP_SIZE_32BIT: u32 = 4;
pub const JLINKARM_WP_MASK_SIZE: u32 = 6;
pub const JLINKARM_WP_MASK_DIR: u32 = 1;
pub const JLINKARM_WP_MASK_PRIV: u32 = 16;
pub const JLINKARM_SPEED_AUTO: u32 = 0;
pub const JLINKARM_SPEED_INVALID: u32 = 65534;
pub const JLINKARM_SPEED_ADAPTIVE: u32 = 65535;
pub const JLINKARM_INDICATOR_ID_LED_GREEN: u32 = 0;
pub const JLINKARM_INDICATOR_ID_LED_RED: u32 = 1;
pub const JLINKARM_INDICATOR_ID_BUSY: u32 = 2;
pub const JLINKARM_INDICATOR_ID_OK: u32 = 3;
pub const JLINKARM_GO_FLAG_OVERSTEP_BP: u32 = 1;
pub const JLINKARM_GO_FLAG_DISABLE_INT: u32 = 2;
pub const JLINKARM_GO_MAX_EMUL_INSTS_DEFAULT: i32 = -1;
pub const JLINKARM_ALLOW_FLASH_DOWNLOAD: u32 = 1;
pub const JLINKARM_ALLOW_BUFFERED_RAM_DOWNLOAD: u32 = 2;
pub const JLINKARM_CORTEX_R4_VCATCH_RESET: u32 = 1;
pub const JLINKARM_CORTEX_R4_VCATCH_UNDEF: u32 = 2;
pub const JLINKARM_CORTEX_R4_VCATCH_SVC: u32 = 4;
pub const JLINKARM_CORTEX_R4_VCATCH_SWI: u32 = 4;
pub const JLINKARM_CORTEX_R4_VCATCH_PREFETCH: u32 = 8;
pub const JLINKARM_CORTEX_R4_VCATCH_ABORT: u32 = 16;
pub const JLINKARM_CORTEX_R4_VCATCH_IRQ: u32 = 64;
pub const JLINKARM_CORTEX_R4_VCATCH_FIQ: u32 = 128;
pub const JLINKARM_CORTEX_M3_VCATCH_CORERESET: u32 = 1;
pub const JLINKARM_CORTEX_M3_VCATCH_MMERR: u32 = 16;
pub const JLINKARM_CORTEX_M3_VCATCH_NOCPERR: u32 = 32;
pub const JLINKARM_CORTEX_M3_VCATCH_CHKERR: u32 = 64;
pub const JLINKARM_CORTEX_M3_VCATCH_STATERR: u32 = 128;
pub const JLINKARM_CORTEX_M3_VCATCH_BUSERR: u32 = 256;
pub const JLINKARM_CORTEX_M3_VCATCH_INTERR: u32 = 512;
pub const JLINKARM_CORTEX_M3_VCATCH_HARDERR: u32 = 1024;
pub const JLINKARM_MAX_NUM_CPU_REGS: u32 = 256;
pub const JLINK_EMU_GPIO_STATE_UNCHANGE: u32 = 0;
pub const JLINK_EMU_GPIO_STATE_INPUT: u32 = 1;
pub const JLINK_EMU_GPIO_STATE_CLR: u32 = 2;
pub const JLINK_EMU_GPIO_STATE_SET: u32 = 3;
pub const JLINK_MRU_GROUP_DEVICE: u32 = 0;
pub const JLINK_MRU_GROUP_SETTINGSFILE: u32 = 1;
pub const JLINK_MRU_GROUP_SCRIPTFILE: u32 = 2;
pub const JLINK_DLG_BUTTON_YES: u32 = 1;
pub const JLINK_DLG_BUTTON_NO: u32 = 2;
pub const JLINK_DLG_BUTTON_OK: u32 = 4;
pub const JLINK_DLG_BUTTON_CANCEL: u32 = 8;
pub const JLINK_DLG_TYPE_PROT_READ: u32 = 268435456;
pub const JLINK_DLG_TYPE_PROT_WRITE: u32 = 536870912;
pub const JLINK_8051_REG_R0_B0: u32 = 0;
pub const JLINK_8051_REG_R1_B0: u32 = 1;
pub const JLINK_8051_REG_R2_B0: u32 = 2;
pub const JLINK_8051_REG_R3_B0: u32 = 3;
pub const JLINK_8051_REG_R4_B0: u32 = 4;
pub const JLINK_8051_REG_R5_B0: u32 = 5;
pub const JLINK_8051_REG_R6_B0: u32 = 6;
pub const JLINK_8051_REG_R7_B0: u32 = 7;
pub const JLINK_8051_REG_R0_B1: u32 = 8;
pub const JLINK_8051_REG_R1_B1: u32 = 9;
pub const JLINK_8051_REG_R2_B1: u32 = 10;
pub const JLINK_8051_REG_R3_B1: u32 = 11;
pub const JLINK_8051_REG_R4_B1: u32 = 12;
pub const JLINK_8051_REG_R5_B1: u32 = 13;
pub const JLINK_8051_REG_R6_B1: u32 = 14;
pub const JLINK_8051_REG_R7_B1: u32 = 15;
pub const JLINK_8051_REG_R0_B2: u32 = 16;
pub const JLINK_8051_REG_R1_B2: u32 = 17;
pub const JLINK_8051_REG_R2_B2: u32 = 18;
pub const JLINK_8051_REG_R3_B2: u32 = 19;
pub const JLINK_8051_REG_R4_B2: u32 = 20;
pub const JLINK_8051_REG_R5_B2: u32 = 21;
pub const JLINK_8051_REG_R6_B2: u32 = 22;
pub const JLINK_8051_REG_R7_B2: u32 = 23;
pub const JLINK_8051_REG_R0_B3: u32 = 24;
pub const JLINK_8051_REG_R1_B3: u32 = 25;
pub const JLINK_8051_REG_R2_B3: u32 = 26;
pub const JLINK_8051_REG_R3_B3: u32 = 27;
pub const JLINK_8051_REG_R4_B3: u32 = 28;
pub const JLINK_8051_REG_R5_B3: u32 = 29;
pub const JLINK_8051_REG_R6_B3: u32 = 30;
pub const JLINK_8051_REG_R7_B3: u32 = 31;
pub const JLINK_8051_REG_PC: u32 = 32;
pub const JLINK_8051_REG_A: u32 = 33;
pub const JLINK_8051_REG_B: u32 = 34;
pub const JLINK_8051_REG_DPTR: u32 = 35;
pub const JLINK_8051_REG_SP: u32 = 36;
pub const JLINK_8051_REG_PSW: u32 = 37;
pub const JLINK_8051_REG_R0: u32 = 38;
pub const JLINK_8051_REG_R1: u32 = 39;
pub const JLINK_8051_REG_R2: u32 = 40;
pub const JLINK_8051_REG_R3: u32 = 41;
pub const JLINK_8051_REG_R4: u32 = 42;
pub const JLINK_8051_REG_R5: u32 = 43;
pub const JLINK_8051_REG_R6: u32 = 44;
pub const JLINK_8051_REG_R7: u32 = 45;
pub const JLINK_8051_NUM_REGS: u32 = 46;
pub const JLINK_EFM8_NUM_REGS: u32 = 46;
pub const JLINK_BT5511_REG_DPS: u32 = 46;
pub const JLINK_BT5511_REG_DPTR1: u32 = 47;
pub const JLINK_BT5511_REG_DPL: u32 = 48;
pub const JLINK_BT5511_REG_DPH: u32 = 49;
pub const JLINK_BT5511_REG_DPX: u32 = 50;
pub const JLINK_BT5511_REG_DPL1: u32 = 51;
pub const JLINK_BT5511_REG_DPH1: u32 = 52;
pub const JLINK_BT5511_REG_DPX1: u32 = 53;
pub const JLINK_BT5511_REG_ACON: u32 = 54;
pub const JLINK_BT5511_NUM_REGS: u32 = 55;
pub const JLINK_STRACE_ERR_UNKNOWN_ADDR: u32 = 4294967280;
pub const JLINK_STRACE_ERR_OVERFLOW: u32 = 4294967281;
pub const JLINK_STRACE_CNT_TYPE_FETCHED: u32 = 0;
pub const JLINK_STRACE_CNT_TYPE_EXEC: u32 = 1;
pub const JLINK_STRACE_CNT_TYPE_SKIP: u32 = 2;
pub const JLINK_STRACE_CNT_TYPE_TOTAL_FETCHED: u32 = 4;
pub const JLINK_STRACE_CNT_TYPE_TOTAL_EXEC: u32 = 5;
pub const JLINK_STRACE_CNT_TYPE_TOTAL_SKIP: u32 = 6;
pub const JLINK_STRACE_CNT_TYPE_TOTAL_NUM_INSTS: u32 = 7;
pub const JLINK_STRACE_CNT_TYPE_FETCHED_EXEC: u32 = 8;
pub const JLINK_STRACE_CNT_TYPE_FETCHED_SKIP: u32 = 9;
pub const JLINK_STRACE_CNT_TYPE_EXEC_SKIP: u32 = 10;
pub const JLINK_STRACE_CNT_TYPE_FETCHED_EXEC_SKIP: u32 = 11;
pub const JLINKARM_DEBUG_INFO_HAS_FPU_INDEX: u32 = 1;
pub const JLINKARM_ROM_TABLE_ADDR_INDEX: u32 = 256;
pub const JLINKARM_DEBUG_INFO_ETM_ADDR_INDEX: u32 = 257;
pub const JLINKARM_DEBUG_INFO_MTB_ADDR_INDEX: u32 = 258;
pub const JLINKARM_DEBUG_INFO_TPIU_ADDR_INDEX: u32 = 259;
pub const JLINKARM_DEBUG_INFO_ITM_ADDR_INDEX: u32 = 260;
pub const JLINKARM_DEBUG_INFO_DWT_ADDR_INDEX: u32 = 261;
pub const JLINKARM_DEBUG_INFO_FPB_ADDR_INDEX: u32 = 262;
pub const JLINKARM_DEBUG_INFO_NVIC_ADDR_INDEX: u32 = 263;
pub const JLINKARM_DEBUG_INFO_TMC_ADDR_INDEX: u32 = 264;
pub const JLINKARM_DEBUG_INFO_TF_ADDR_INDEX: u32 = 265;
pub const JLINKARM_DEBUG_INFO_PTM_ADDR_INDEX: u32 = 266;
pub const JLINKARM_DEBUG_INFO_ETB_ADDR_INDEX: u32 = 267;
pub const JLINKARM_DEBUG_INFO_DBG_ADDR_INDEX: u32 = 268;
pub const JLINKARM_DEBUG_INFO_APBAP_INDEX: u32 = 269;
pub const JLINKARM_DEBUG_INFO_AHBAP_INDEX: u32 = 270;
pub const JLINKARM_DEBUG_INFO_HAS_CORTEX_M_SECURITY_EXT_INDEX: u32 = 271;
pub const JLINKARM_DEBUG_INFO_APBAP_ADDRESS: u32 = 269;
pub const JLINKARM_DEBUG_INFO_DEBUG_AP_ADDRESS: u32 = 272;
pub const JLINK_SWO_CONVERSION_MODE_WINDOWS: u32 = 0;
pub const JLINK_SWO_CONVERSION_MODE_NONE: u32 = 1;
pub const JLINKARM_HALT_REASON_DBGRQ: u32 = 0;
pub const JLINKARM_HALT_REASON_CODE_BREAKPOINT: u32 = 1;
pub const JLINKARM_HALT_REASON_DATA_BREAKPOINT: u32 = 2;
pub const JLINKARM_HALT_REASON_VECTOR_CATCH: u32 = 3;
pub const JLINKARM_HALT_REASON_UNKNOWN: i32 = -1;
pub const JLINKARM_DEVICE_MAX_NUM_FLASH_BANKS: u32 = 16;
pub const JLINK_POWERTRACE_FLAG_UA: u32 = 2;
pub const JLINK_MEM_ZONE_DEFAULT_NAME: &[u8; 8usize] = b"Default\0";
pub const JLINK_MEM_ZONE_DEFAULT_DESC: &[u8; 20usize] = b"Default access mode\0";
pub const JLINK_DISASSEMBLY_MODE_CURRENT: u32 = 0;
pub const JLINK_DISASSEMBLY_MODE_ARM: u32 = 1;
pub const JLINK_DISASSEMBLY_MODE_THUMB: u32 = 2;
pub const JLINK_DISASSEMBLY_BRANCH_UNSPECIFIED: u32 = 1;
pub const JLINK_DISASSEMBLY_BRANCH_FIXED: u32 = 3;
pub const JLINK_DISASSEMBLY_BRANCH_RELATIVE: u32 = 5;
pub const JLINK_DISASSEMBLY_BRANCH_REGISTER: u32 = 7;
pub const JLINK_DISASSEMBLY_BRANCH_RETURN: u32 = 9;
pub const JLINK_DISASSEMBLY_BRANCH_STACK: u32 = 11;
pub const JLINK_DISASSEMBLY_BRANCH_NONE: u32 = 0;
pub const JLINK_CORESIGHT_DP_REG_0x0: u32 = 0;
pub const JLINK_CORESIGHT_DP_REG_0x4: u32 = 1;
pub const JLINK_CORESIGHT_DP_REG_0x8: u32 = 2;
pub const JLINK_CORESIGHT_DP_REG_0xC: u32 = 3;
pub const JLINK_CORESIGHT_AP_REG_0x0: u32 = 0;
pub const JLINK_CORESIGHT_AP_REG_0x4: u32 = 1;
pub const JLINK_CORESIGHT_AP_REG_0x8: u32 = 2;
pub const JLINK_CORESIGHT_AP_REG_0xC: u32 = 3;
pub const JLINK_CORESIGHT_DP_REG_0x0_NEW: u32 = 240;
pub const JLINK_CORESIGHT_AP_REG_CSW: u32 = 0;
pub const JLINK_CORESIGHT_AP_REG_TAR: u32 = 1;
pub const JLINK_CORESIGHT_AP_REG_DRW: u32 = 3;
pub const JLINK_CORESIGHT_AP_REG_BD0: u32 = 0;
pub const JLINK_CORESIGHT_AP_REG_BD1: u32 = 1;
pub const JLINK_CORESIGHT_AP_REG_BD2: u32 = 2;
pub const JLINK_CORESIGHT_AP_REG_BD3: u32 = 3;
pub const JLINK_CORESIGHT_DP_REG_DPIDR: u32 = 0;
pub const JLINK_CORESIGHT_DP_REG_ABORT: u32 = 0;
pub const JLINK_CORESIGHT_DP_REG_CTRL_STAT: u32 = 1;
pub const JLINK_CORESIGHT_DP_REG_RESEND: u32 = 2;
pub const JLINK_CORESIGHT_DP_REG_SELECT: u32 = 2;
pub const JLINK_CORESIGHT_DP_REG_RD_BUF: u32 = 3;
pub const JLINK_CORESIGHT_DP_REG_TARGETSEL: u32 = 3;
pub const JLINK_CORESIGHT_DP_REG_DLCR: u32 = 1;
pub const JLINK_CORESIGHT_DP_REG_TARGETID: u32 = 1;
pub const JLINK_CORESIGHT_DP_REG_DLPIDR: u32 = 1;
pub const JLINK_CORESIGHT_DP_REG_EVENTSTAT: u32 = 1;
pub const JLINK_CONFIG_MASK_HOST_IF: u32 = 1;
pub const JLINK_CONFIG_MASK_TARGET_DEVICE: u32 = 2;
pub const JLINK_CONFIG_MASK_TARGET_IF: u32 = 4;
pub const JLINKARM_TRACE_SOURCE_ETB: u32 = 0;
pub const JLINKARM_TRACE_SOURCE_ETM: u32 = 1;
pub const JLINKARM_TRACE_SOURCE_MTB: u32 = 2;
pub const JLINKARM_TRACE_SOURCE_SWO: u32 = 3;
pub const JLINKARM_TRACE_CMD_START: u32 = 0;
pub const JLINKARM_TRACE_CMD_STOP: u32 = 1;
pub const JLINKARM_TRACE_CMD_FLUSH: u32 = 2;
pub const JLINKARM_TRACE_CMD_GET_NUM_SAMPLES: u32 = 16;
pub const JLINKARM_TRACE_CMD_GET_CONF_CAPACITY: u32 = 17;
pub const JLINKARM_TRACE_CMD_SET_CAPACITY: u32 = 18;
pub const JLINKARM_TRACE_CMD_GET_MIN_CAPACITY: u32 = 19;
pub const JLINKARM_TRACE_CMD_GET_MAX_CAPACITY: u32 = 20;
pub const JLINKARM_TRACE_CMD_SET_FORMAT: u32 = 32;
pub const JLINKARM_TRACE_CMD_GET_FORMAT: u32 = 33;
pub const JLINKARM_TRACE_CMD_GET_NUM_REGIONS: u32 = 48;
pub const JLINKARM_TRACE_CMD_GET_REGION_PROPS: u32 = 49;
pub const JLINKARM_TRACE_CMD_GET_REGION_PROPS_EX: u32 = 50;
pub const JLINKARM_TRACE_FORMAT_4BIT: u32 = 1;
pub const JLINKARM_TRACE_FORMAT_8BIT: u32 = 2;
pub const JLINKARM_TRACE_FORMAT_16BIT: u32 = 4;
pub const JLINKARM_TRACE_FORMAT_MULTIPLEXED: u32 = 8;
pub const JLINKARM_TRACE_FORMAT_DEMULTIPLEXED: u32 = 16;
pub const JLINKARM_TRACE_FORMAT_DOUBLE_EDGE: u32 = 32;
pub const JLINKARM_TRACE_FORMAT_ETM7_9: u32 = 64;
pub const JLINKARM_TRACE_FORMAT_ETM10: u32 = 128;
pub const JLINKARM_TRACE_FORMAT_1BIT: u32 = 256;
pub const JLINKARM_TRACE_FORMAT_2BIT: u32 = 512;
pub const JLINKARM_RAWTRACE_CMD_START: u32 = 0;
pub const JLINKARM_RAWTRACE_CMD_STOP: u32 = 1;
pub const JLINKARM_RAWTRACE_CMD_GET_TRACE_FREQ: u32 = 2;
pub const JLINKARM_RAWTRACE_CMD_SET_BUFF_SIZE: u32 = 3;
pub const JLINKARM_RAWTRACE_CMD_GET_CAPS: u32 = 4;
pub const JLINKARM_RAWTRACE_FORMAT_1BIT: u32 = 3;
pub const JLINKARM_RAWTRACE_FORMAT_2BIT: u32 = 12;
pub const JLINKARM_RAWTRACE_FORMAT_4BIT: u32 = 48;
pub const JLINK_RAWTRACE_CAP_RESERVED: u32 = 1;
pub const JLINK_RAWTRACE_CAP_START: u32 = 2;
pub const JLINK_RAWTRACE_CAP_STOP: u32 = 4;
pub const JLINK_RAWTRACE_CAP_READ: u32 = 8;
pub const JLINK_RAWTRACE_CAP_GET_FREQ: u32 = 16;
pub const JLINK_RAWTRACE_CAP_LTRACE: u32 = 32;
pub const JLINK_RAWTRACE_CAP_LTRACE_USB: u32 = 64;
pub const JLINKARM_RTTERMINAL_CMD_START: u32 = 0;
pub const JLINKARM_RTTERMINAL_CMD_STOP: u32 = 1;
pub const JLINKARM_RTTERMINAL_CMD_GETDESC: u32 = 2;
pub const JLINKARM_RTTERMINAL_CMD_GETNUMBUF: u32 = 3;
pub const JLINKARM_RTTERMINAL_CMD_GETSTAT: u32 = 4;
pub const JLINKARM_RTTERMINAL_BUFFER_DIR_UP: u32 = 0;
pub const JLINKARM_RTTERMINAL_BUFFER_DIR_DOWN: u32 = 1;
pub const JLINK_POWERTRACE_CMD_SETUP: u32 = 0;
pub const JLINK_POWERTRACE_CMD_START: u32 = 1;
pub const JLINK_POWERTRACE_CMD_STOP: u32 = 2;
pub const JLINK_POWERTRACE_CMD_FLUSH: u32 = 3;
pub const JLINK_POWERTRACE_CMD_GET_CAPS: u32 = 4;
pub const JLINK_POWERTRACE_CMD_GET_CHANNEL_CAPS: u32 = 5;
pub const JLINK_POWERTRACE_CMD_GET_NUM_ITEMS: u32 = 6;
pub const JLINKARM_SWO_CMD_START: u32 = 0;
pub const JLINKARM_SWO_CMD_STOP: u32 = 1;
pub const JLINKARM_SWO_CMD_FLUSH: u32 = 2;
pub const JLINKARM_SWO_CMD_GET_SPEED_INFO: u32 = 3;
pub const JLINKARM_SWO_CMD_GET_NUM_BYTES: u32 = 10;
pub const JLINKARM_SWO_CMD_SET_BUFFERSIZE_HOST: u32 = 20;
pub const JLINKARM_SWO_CMD_SET_BUFFERSIZE_EMU: u32 = 21;
pub const JLINKARM_SWO_IF_UART: u32 = 0;
pub const JLINKARM_SWO_IF_MANCHESTER: u32 = 1;
pub const JLINKARM_SWO_IF_TRACE: u32 = 2;
pub const JLINK_FW_UPDATE_RESULT_FW_INVALID: u32 = 6;
pub const JLINK_FW_UPDATE_RESULT_EMU_FW_OLDER: u32 = 5;
pub const JLINK_FW_UPDATE_RESULT_EMU_FW_NEWER: u32 = 4;
pub const JLINK_FW_UPDATE_RESULT_EMU_FW_CURRENT: u32 = 3;
pub const JLINK_FW_UPDATE_RESULT_NO_EMBEDDED_FW: u32 = 2;
pub const JLINK_FW_UPDATE_RESULT_CANCELED_BY_USER: u32 = 1;
pub const JLINK_FW_UPDATE_RESULT_OK: u32 = 0;
pub const JLINK_FW_UPDATE_RESULT_ERR_GENERIC: i32 = -1;
pub const JLINK_FW_UPDATE_RESULT_ERR_UNKNOWN_FW_ID: i32 = -2;
pub const JLINK_FW_UPDATE_RESULT_ERR_NO_TIMESTAMP: i32 = -3;
pub const JLINKARM_TIF_2_WIRE_JTAG_PIC32: u32 = 4;
pub const JLINKARM_GO_OVERSTEP_BP: u32 = 1;
pub const JLINKARM_EMU_CAP_TRACE: u32 = 64;
pub const JLINKARM_BP_TYPE_SW_RAM: u32 = 16;
pub const JLINKARM_BP_TYPE_SW_FLASH: u32 = 32;
pub const JLINKARM_BP_TYPE_SW: u32 = 240;
pub const JLINKARM_BP_TYPE_HW: u32 = 4294967040;
pub const JLINKARM_BP_TYPE_ANY: u32 = 4294967280;
pub const JLINKARM_BP_IMP_HW_ICE: u32 = 256;
pub const JLINKARM_BP_IMP_HW_ETM: u32 = 512;
pub const JLINKARM_BP_IMP_HW_NEXUS: u32 = 1024;
pub const JLINKARM_TIF_UART: u32 = 3;
pub const JLINK_CORE_CORTEX_M_V8BASEL: u32 = 100729087;
pub const JLINK_CORE_CORTEX_M_V8MAINL: u32 = 235012351;
pub const JLINK_MEM_FLAG_WIDTH_DEFAULT: u32 = 0;
pub const JLINK_MEM_FLAG_WIDTH_8BIT: u32 = 1;
pub const JLINK_MEM_FLAG_WIDTH_16BIT: u32 = 2;
pub const JLINK_MEM_FLAG_WIDTH_32BIT: u32 = 4;
pub const JLINK_MEM_FLAG_WIDTH_64BIT: u32 = 8;
pub const JLINKARM_DEV_FAMILY_CORTEX_AR_ARMV8: u32 = 20;
pub const JLINK_CORE_RISC_V: u32 = 335544319;
pub const ARM_REG_ARM_REG_R0: ARM_REG = 0;
pub const ARM_REG_ARM_REG_R1: ARM_REG = 1;
pub const ARM_REG_ARM_REG_R2: ARM_REG = 2;
pub const ARM_REG_ARM_REG_R3: ARM_REG = 3;
pub const ARM_REG_ARM_REG_R4: ARM_REG = 4;
pub const ARM_REG_ARM_REG_R5: ARM_REG = 5;
pub const ARM_REG_ARM_REG_R6: ARM_REG = 6;
pub const ARM_REG_ARM_REG_R7: ARM_REG = 7;
pub const ARM_REG_ARM_REG_CPSR: ARM_REG = 8;
pub const ARM_REG_ARM_REG_R15: ARM_REG = 9;
pub const ARM_REG_ARM_REG_R8_USR: ARM_REG = 10;
pub const ARM_REG_ARM_REG_R9_USR: ARM_REG = 11;
pub const ARM_REG_ARM_REG_R10_USR: ARM_REG = 12;
pub const ARM_REG_ARM_REG_R11_USR: ARM_REG = 13;
pub const ARM_REG_ARM_REG_R12_USR: ARM_REG = 14;
pub const ARM_REG_ARM_REG_R13_USR: ARM_REG = 15;
pub const ARM_REG_ARM_REG_R14_USR: ARM_REG = 16;
pub const ARM_REG_ARM_REG_SPSR_FIQ: ARM_REG = 17;
pub const ARM_REG_ARM_REG_R8_FIQ: ARM_REG = 18;
pub const ARM_REG_ARM_REG_R9_FIQ: ARM_REG = 19;
pub const ARM_REG_ARM_REG_R10_FIQ: ARM_REG = 20;
pub const ARM_REG_ARM_REG_R11_FIQ: ARM_REG = 21;
pub const ARM_REG_ARM_REG_R12_FIQ: ARM_REG = 22;
pub const ARM_REG_ARM_REG_R13_FIQ: ARM_REG = 23;
pub const ARM_REG_ARM_REG_R14_FIQ: ARM_REG = 24;
pub const ARM_REG_ARM_REG_SPSR_SVC: ARM_REG = 25;
pub const ARM_REG_ARM_REG_R13_SVC: ARM_REG = 26;
pub const ARM_REG_ARM_REG_R14_SVC: ARM_REG = 27;
pub const ARM_REG_ARM_REG_SPSR_ABT: ARM_REG = 28;
pub const ARM_REG_ARM_REG_R13_ABT: ARM_REG = 29;
pub const ARM_REG_ARM_REG_R14_ABT: ARM_REG = 30;
pub const ARM_REG_ARM_REG_SPSR_IRQ: ARM_REG = 31;
pub const ARM_REG_ARM_REG_R13_IRQ: ARM_REG = 32;
pub const ARM_REG_ARM_REG_R14_IRQ: ARM_REG = 33;
pub const ARM_REG_ARM_REG_SPSR_UND: ARM_REG = 34;
pub const ARM_REG_ARM_REG_R13_UND: ARM_REG = 35;
pub const ARM_REG_ARM_REG_R14_UND: ARM_REG = 36;
pub const ARM_REG_ARM_REG_FPSID: ARM_REG = 37;
pub const ARM_REG_ARM_REG_FPSCR: ARM_REG = 38;
pub const ARM_REG_ARM_REG_FPEXC: ARM_REG = 39;
pub const ARM_REG_ARM_REG_FPS0: ARM_REG = 40;
pub const ARM_REG_ARM_REG_FPS1: ARM_REG = 41;
pub const ARM_REG_ARM_REG_FPS2: ARM_REG = 42;
pub const ARM_REG_ARM_REG_FPS3: ARM_REG = 43;
pub const ARM_REG_ARM_REG_FPS4: ARM_REG = 44;
pub const ARM_REG_ARM_REG_FPS5: ARM_REG = 45;
pub const ARM_REG_ARM_REG_FPS6: ARM_REG = 46;
pub const ARM_REG_ARM_REG_FPS7: ARM_REG = 47;
pub const ARM_REG_ARM_REG_FPS8: ARM_REG = 48;
pub const ARM_REG_ARM_REG_FPS9: ARM_REG = 49;
pub const ARM_REG_ARM_REG_FPS10: ARM_REG = 50;
pub const ARM_REG_ARM_REG_FPS11: ARM_REG = 51;
pub const ARM_REG_ARM_REG_FPS12: ARM_REG = 52;
pub const ARM_REG_ARM_REG_FPS13: ARM_REG = 53;
pub const ARM_REG_ARM_REG_FPS14: ARM_REG = 54;
pub const ARM_REG_ARM_REG_FPS15: ARM_REG = 55;
pub const ARM_REG_ARM_REG_FPS16: ARM_REG = 56;
pub const ARM_REG_ARM_REG_FPS17: ARM_REG = 57;
pub const ARM_REG_ARM_REG_FPS18: ARM_REG = 58;
pub const ARM_REG_ARM_REG_FPS19: ARM_REG = 59;
pub const ARM_REG_ARM_REG_FPS20: ARM_REG = 60;
pub const ARM_REG_ARM_REG_FPS21: ARM_REG = 61;
pub const ARM_REG_ARM_REG_FPS22: ARM_REG = 62;
pub const ARM_REG_ARM_REG_FPS23: ARM_REG = 63;
pub const ARM_REG_ARM_REG_FPS24: ARM_REG = 64;
pub const ARM_REG_ARM_REG_FPS25: ARM_REG = 65;
pub const ARM_REG_ARM_REG_FPS26: ARM_REG = 66;
pub const ARM_REG_ARM_REG_FPS27: ARM_REG = 67;
pub const ARM_REG_ARM_REG_FPS28: ARM_REG = 68;
pub const ARM_REG_ARM_REG_FPS29: ARM_REG = 69;
pub const ARM_REG_ARM_REG_FPS30: ARM_REG = 70;
pub const ARM_REG_ARM_REG_FPS31: ARM_REG = 71;
pub const ARM_REG_ARM_REG_R8: ARM_REG = 72;
pub const ARM_REG_ARM_REG_R9: ARM_REG = 73;
pub const ARM_REG_ARM_REG_R10: ARM_REG = 74;
pub const ARM_REG_ARM_REG_R11: ARM_REG = 75;
pub const ARM_REG_ARM_REG_R12: ARM_REG = 76;
pub const ARM_REG_ARM_REG_R13: ARM_REG = 77;
pub const ARM_REG_ARM_REG_R14: ARM_REG = 78;
pub const ARM_REG_ARM_REG_SPSR: ARM_REG = 79;
pub const ARM_REG_ARM_NUM_REGS: ARM_REG = 80;
#[doc = "       Types required for API"]
#[doc = ""]
pub type ARM_REG = ::std::os::raw::c_uint;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_R0: JLINKARM_CM3_REG = 0;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_R1: JLINKARM_CM3_REG = 1;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_R2: JLINKARM_CM3_REG = 2;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_R3: JLINKARM_CM3_REG = 3;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_R4: JLINKARM_CM3_REG = 4;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_R5: JLINKARM_CM3_REG = 5;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_R6: JLINKARM_CM3_REG = 6;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_R7: JLINKARM_CM3_REG = 7;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_R8: JLINKARM_CM3_REG = 8;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_R9: JLINKARM_CM3_REG = 9;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_R10: JLINKARM_CM3_REG = 10;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_R11: JLINKARM_CM3_REG = 11;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_R12: JLINKARM_CM3_REG = 12;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_R13: JLINKARM_CM3_REG = 13;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_R14: JLINKARM_CM3_REG = 14;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_R15: JLINKARM_CM3_REG = 15;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_XPSR: JLINKARM_CM3_REG = 16;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_MSP: JLINKARM_CM3_REG = 17;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_PSP: JLINKARM_CM3_REG = 18;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_RAZ: JLINKARM_CM3_REG = 19;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_CFBP: JLINKARM_CM3_REG = 20;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_APSR: JLINKARM_CM3_REG = 21;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_EPSR: JLINKARM_CM3_REG = 22;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_IPSR: JLINKARM_CM3_REG = 23;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_PRIMASK: JLINKARM_CM3_REG = 24;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_BASEPRI: JLINKARM_CM3_REG = 25;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_FAULTMASK: JLINKARM_CM3_REG = 26;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_CONTROL: JLINKARM_CM3_REG = 27;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_BASEPRI_MAX: JLINKARM_CM3_REG = 28;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_IAPSR: JLINKARM_CM3_REG = 29;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_EAPSR: JLINKARM_CM3_REG = 30;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_IEPSR: JLINKARM_CM3_REG = 31;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_DWT_CYCCNT: JLINKARM_CM3_REG = 65;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_MSP_NS: JLINKARM_CM3_REG = 66;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_PSP_NS: JLINKARM_CM3_REG = 67;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_MSP_S: JLINKARM_CM3_REG = 68;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_PSP_S: JLINKARM_CM3_REG = 69;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_MSPLIM_S: JLINKARM_CM3_REG = 70;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_PSPLIM_S: JLINKARM_CM3_REG = 71;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_MSPLIM_NS: JLINKARM_CM3_REG = 72;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_PSPLIM_NS: JLINKARM_CM3_REG = 73;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_CFBP_S: JLINKARM_CM3_REG = 74;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_CFBP_NS: JLINKARM_CM3_REG = 75;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_PRIMASK_NS: JLINKARM_CM3_REG = 76;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_BASEPRI_NS: JLINKARM_CM3_REG = 77;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_FAULTMASK_NS: JLINKARM_CM3_REG = 78;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_CONTROL_NS: JLINKARM_CM3_REG = 79;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_BASEPRI_MAX_NS: JLINKARM_CM3_REG = 80;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_PRIMASK_S: JLINKARM_CM3_REG = 81;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_BASEPRI_S: JLINKARM_CM3_REG = 82;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_FAULTMASK_S: JLINKARM_CM3_REG = 83;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_CONTROL_S: JLINKARM_CM3_REG = 84;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_BASEPRI_MAX_S: JLINKARM_CM3_REG = 85;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_MSPLIM: JLINKARM_CM3_REG = 86;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_PSPLIM: JLINKARM_CM3_REG = 87;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_BASEPRI_BASE0: JLINKARM_CM3_REG = 88;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_FAULTMASK_BASE0: JLINKARM_CM3_REG = 89;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_CONTROL_BASE0: JLINKARM_CM3_REG = 90;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_REG_BASEPRI_MAX_BASE0: JLINKARM_CM3_REG = 91;
pub const JLINKARM_CM3_REG_JLINKARM_CM3_NUM_REGS: JLINKARM_CM3_REG = 92;
pub type JLINKARM_CM3_REG = ::std::os::raw::c_uint;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_R0: JLINKARM_CM4_REG = 0;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_R1: JLINKARM_CM4_REG = 1;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_R2: JLINKARM_CM4_REG = 2;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_R3: JLINKARM_CM4_REG = 3;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_R4: JLINKARM_CM4_REG = 4;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_R5: JLINKARM_CM4_REG = 5;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_R6: JLINKARM_CM4_REG = 6;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_R7: JLINKARM_CM4_REG = 7;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_R8: JLINKARM_CM4_REG = 8;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_R9: JLINKARM_CM4_REG = 9;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_R10: JLINKARM_CM4_REG = 10;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_R11: JLINKARM_CM4_REG = 11;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_R12: JLINKARM_CM4_REG = 12;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_R13: JLINKARM_CM4_REG = 13;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_R14: JLINKARM_CM4_REG = 14;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_R15: JLINKARM_CM4_REG = 15;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_XPSR: JLINKARM_CM4_REG = 16;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_MSP: JLINKARM_CM4_REG = 17;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_PSP: JLINKARM_CM4_REG = 18;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_RAZ: JLINKARM_CM4_REG = 19;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_CFBP: JLINKARM_CM4_REG = 20;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_APSR: JLINKARM_CM4_REG = 21;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_EPSR: JLINKARM_CM4_REG = 22;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_IPSR: JLINKARM_CM4_REG = 23;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_PRIMASK: JLINKARM_CM4_REG = 24;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_BASEPRI: JLINKARM_CM4_REG = 25;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FAULTMASK: JLINKARM_CM4_REG = 26;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_CONTROL: JLINKARM_CM4_REG = 27;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_BASEPRI_MAX: JLINKARM_CM4_REG = 28;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_IAPSR: JLINKARM_CM4_REG = 29;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_EAPSR: JLINKARM_CM4_REG = 30;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_IEPSR: JLINKARM_CM4_REG = 31;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPSCR: JLINKARM_CM4_REG = 32;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS0: JLINKARM_CM4_REG = 33;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS1: JLINKARM_CM4_REG = 34;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS2: JLINKARM_CM4_REG = 35;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS3: JLINKARM_CM4_REG = 36;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS4: JLINKARM_CM4_REG = 37;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS5: JLINKARM_CM4_REG = 38;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS6: JLINKARM_CM4_REG = 39;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS7: JLINKARM_CM4_REG = 40;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS8: JLINKARM_CM4_REG = 41;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS9: JLINKARM_CM4_REG = 42;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS10: JLINKARM_CM4_REG = 43;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS11: JLINKARM_CM4_REG = 44;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS12: JLINKARM_CM4_REG = 45;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS13: JLINKARM_CM4_REG = 46;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS14: JLINKARM_CM4_REG = 47;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS15: JLINKARM_CM4_REG = 48;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS16: JLINKARM_CM4_REG = 49;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS17: JLINKARM_CM4_REG = 50;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS18: JLINKARM_CM4_REG = 51;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS19: JLINKARM_CM4_REG = 52;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS20: JLINKARM_CM4_REG = 53;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS21: JLINKARM_CM4_REG = 54;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS22: JLINKARM_CM4_REG = 55;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS23: JLINKARM_CM4_REG = 56;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS24: JLINKARM_CM4_REG = 57;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS25: JLINKARM_CM4_REG = 58;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS26: JLINKARM_CM4_REG = 59;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS27: JLINKARM_CM4_REG = 60;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS28: JLINKARM_CM4_REG = 61;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS29: JLINKARM_CM4_REG = 62;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS30: JLINKARM_CM4_REG = 63;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FPS31: JLINKARM_CM4_REG = 64;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_DWT_CYCCNT: JLINKARM_CM4_REG = 65;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_MSP_NS: JLINKARM_CM4_REG = 66;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_PSP_NS: JLINKARM_CM4_REG = 67;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_MSP_S: JLINKARM_CM4_REG = 68;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_PSP_S: JLINKARM_CM4_REG = 69;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_MSPLIM_S: JLINKARM_CM4_REG = 70;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_PSPLIM_S: JLINKARM_CM4_REG = 71;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_MSPLIM_NS: JLINKARM_CM4_REG = 72;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_PSPLIM_NS: JLINKARM_CM4_REG = 73;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_CFBP_S: JLINKARM_CM4_REG = 74;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_CFBP_NS: JLINKARM_CM4_REG = 75;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_PRIMASK_NS: JLINKARM_CM4_REG = 76;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_BASEPRI_NS: JLINKARM_CM4_REG = 77;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FAULTMASK_NS: JLINKARM_CM4_REG = 78;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_CONTROL_NS: JLINKARM_CM4_REG = 79;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_BASEPRI_MAX_NS: JLINKARM_CM4_REG = 80;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_PRIMASK_S: JLINKARM_CM4_REG = 81;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_BASEPRI_S: JLINKARM_CM4_REG = 82;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_FAULTMASK_S: JLINKARM_CM4_REG = 83;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_CONTROL_S: JLINKARM_CM4_REG = 84;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_BASEPRI_MAX_S: JLINKARM_CM4_REG = 85;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_MSPLIM: JLINKARM_CM4_REG = 86;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_REG_PSPLIM: JLINKARM_CM4_REG = 87;
pub const JLINKARM_CM4_REG_JLINKARM_CM4_NUM_REGS: JLINKARM_CM4_REG = 88;
pub type JLINKARM_CM4_REG = ::std::os::raw::c_uint;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R0: JLINKARM_CORTEX_R4_REG = 0;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R1: JLINKARM_CORTEX_R4_REG = 1;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R2: JLINKARM_CORTEX_R4_REG = 2;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R3: JLINKARM_CORTEX_R4_REG = 3;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R4: JLINKARM_CORTEX_R4_REG = 4;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R5: JLINKARM_CORTEX_R4_REG = 5;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R6: JLINKARM_CORTEX_R4_REG = 6;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R7: JLINKARM_CORTEX_R4_REG = 7;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_CPSR: JLINKARM_CORTEX_R4_REG = 8;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R15: JLINKARM_CORTEX_R4_REG = 9;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R8_USR: JLINKARM_CORTEX_R4_REG = 10;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R9_USR: JLINKARM_CORTEX_R4_REG = 11;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R10_USR: JLINKARM_CORTEX_R4_REG = 12;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R11_USR: JLINKARM_CORTEX_R4_REG = 13;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R12_USR: JLINKARM_CORTEX_R4_REG = 14;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R13_USR: JLINKARM_CORTEX_R4_REG = 15;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R14_USR: JLINKARM_CORTEX_R4_REG = 16;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_SPSR_FIQ: JLINKARM_CORTEX_R4_REG = 17;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R8_FIQ: JLINKARM_CORTEX_R4_REG = 18;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R9_FIQ: JLINKARM_CORTEX_R4_REG = 19;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R10_FIQ: JLINKARM_CORTEX_R4_REG = 20;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R11_FIQ: JLINKARM_CORTEX_R4_REG = 21;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R12_FIQ: JLINKARM_CORTEX_R4_REG = 22;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R13_FIQ: JLINKARM_CORTEX_R4_REG = 23;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R14_FIQ: JLINKARM_CORTEX_R4_REG = 24;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_SPSR_SVC: JLINKARM_CORTEX_R4_REG = 25;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R13_SVC: JLINKARM_CORTEX_R4_REG = 26;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R14_SVC: JLINKARM_CORTEX_R4_REG = 27;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_SPSR_ABT: JLINKARM_CORTEX_R4_REG = 28;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R13_ABT: JLINKARM_CORTEX_R4_REG = 29;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R14_ABT: JLINKARM_CORTEX_R4_REG = 30;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_SPSR_IRQ: JLINKARM_CORTEX_R4_REG = 31;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R13_IRQ: JLINKARM_CORTEX_R4_REG = 32;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R14_IRQ: JLINKARM_CORTEX_R4_REG = 33;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_SPSR_UND: JLINKARM_CORTEX_R4_REG = 34;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R13_UND: JLINKARM_CORTEX_R4_REG = 35;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R14_UND: JLINKARM_CORTEX_R4_REG = 36;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPSID: JLINKARM_CORTEX_R4_REG = 37;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPSCR: JLINKARM_CORTEX_R4_REG = 38;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPEXC: JLINKARM_CORTEX_R4_REG = 39;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS0: JLINKARM_CORTEX_R4_REG = 40;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS1: JLINKARM_CORTEX_R4_REG = 41;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS2: JLINKARM_CORTEX_R4_REG = 42;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS3: JLINKARM_CORTEX_R4_REG = 43;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS4: JLINKARM_CORTEX_R4_REG = 44;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS5: JLINKARM_CORTEX_R4_REG = 45;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS6: JLINKARM_CORTEX_R4_REG = 46;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS7: JLINKARM_CORTEX_R4_REG = 47;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS8: JLINKARM_CORTEX_R4_REG = 48;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS9: JLINKARM_CORTEX_R4_REG = 49;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS10: JLINKARM_CORTEX_R4_REG = 50;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS11: JLINKARM_CORTEX_R4_REG = 51;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS12: JLINKARM_CORTEX_R4_REG = 52;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS13: JLINKARM_CORTEX_R4_REG = 53;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS14: JLINKARM_CORTEX_R4_REG = 54;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS15: JLINKARM_CORTEX_R4_REG = 55;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS16: JLINKARM_CORTEX_R4_REG = 56;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS17: JLINKARM_CORTEX_R4_REG = 57;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS18: JLINKARM_CORTEX_R4_REG = 58;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS19: JLINKARM_CORTEX_R4_REG = 59;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS20: JLINKARM_CORTEX_R4_REG = 60;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS21: JLINKARM_CORTEX_R4_REG = 61;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS22: JLINKARM_CORTEX_R4_REG = 62;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS23: JLINKARM_CORTEX_R4_REG = 63;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS24: JLINKARM_CORTEX_R4_REG = 64;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS25: JLINKARM_CORTEX_R4_REG = 65;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS26: JLINKARM_CORTEX_R4_REG = 66;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS27: JLINKARM_CORTEX_R4_REG = 67;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS28: JLINKARM_CORTEX_R4_REG = 68;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS29: JLINKARM_CORTEX_R4_REG = 69;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS30: JLINKARM_CORTEX_R4_REG = 70;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_FPS31: JLINKARM_CORTEX_R4_REG = 71;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_MVFR0: JLINKARM_CORTEX_R4_REG = 72;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_MVFR1: JLINKARM_CORTEX_R4_REG = 73;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R8: JLINKARM_CORTEX_R4_REG = 74;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R9: JLINKARM_CORTEX_R4_REG = 75;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R10: JLINKARM_CORTEX_R4_REG = 76;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R11: JLINKARM_CORTEX_R4_REG = 77;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R12: JLINKARM_CORTEX_R4_REG = 78;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R13: JLINKARM_CORTEX_R4_REG = 79;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_R14: JLINKARM_CORTEX_R4_REG = 80;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_SPSR: JLINKARM_CORTEX_R4_REG = 81;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_D16: JLINKARM_CORTEX_R4_REG = 82;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_D17: JLINKARM_CORTEX_R4_REG = 83;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_D18: JLINKARM_CORTEX_R4_REG = 84;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_D19: JLINKARM_CORTEX_R4_REG = 85;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_D20: JLINKARM_CORTEX_R4_REG = 86;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_D21: JLINKARM_CORTEX_R4_REG = 87;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_D22: JLINKARM_CORTEX_R4_REG = 88;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_D23: JLINKARM_CORTEX_R4_REG = 89;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_D24: JLINKARM_CORTEX_R4_REG = 90;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_D25: JLINKARM_CORTEX_R4_REG = 91;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_D26: JLINKARM_CORTEX_R4_REG = 92;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_D27: JLINKARM_CORTEX_R4_REG = 93;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_D28: JLINKARM_CORTEX_R4_REG = 94;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_D29: JLINKARM_CORTEX_R4_REG = 95;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_D30: JLINKARM_CORTEX_R4_REG = 96;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_REG_D31: JLINKARM_CORTEX_R4_REG = 97;
pub const JLINKARM_CORTEX_R4_REG_JLINKARM_CORTEX_R4_NUM_REGS: JLINKARM_CORTEX_R4_REG = 98;
pub type JLINKARM_CORTEX_R4_REG = ::std::os::raw::c_uint;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_R0: JLINKARM_RX_REG = 0;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_R1: JLINKARM_RX_REG = 1;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_R2: JLINKARM_RX_REG = 2;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_R3: JLINKARM_RX_REG = 3;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_R4: JLINKARM_RX_REG = 4;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_R5: JLINKARM_RX_REG = 5;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_R6: JLINKARM_RX_REG = 6;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_R7: JLINKARM_RX_REG = 7;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_R8: JLINKARM_RX_REG = 8;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_R9: JLINKARM_RX_REG = 9;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_R10: JLINKARM_RX_REG = 10;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_R11: JLINKARM_RX_REG = 11;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_R12: JLINKARM_RX_REG = 12;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_R13: JLINKARM_RX_REG = 13;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_R14: JLINKARM_RX_REG = 14;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_R15: JLINKARM_RX_REG = 15;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_ISP: JLINKARM_RX_REG = 16;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_USP: JLINKARM_RX_REG = 17;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_INTB: JLINKARM_RX_REG = 18;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_PC: JLINKARM_RX_REG = 19;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_PSW: JLINKARM_RX_REG = 20;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_BPC: JLINKARM_RX_REG = 21;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_BPSW: JLINKARM_RX_REG = 22;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_FINTV: JLINKARM_RX_REG = 23;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_FPSW: JLINKARM_RX_REG = 24;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_CPEN: JLINKARM_RX_REG = 25;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_ACCUH: JLINKARM_RX_REG = 26;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_ACCUL: JLINKARM_RX_REG = 27;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_ACCUE: JLINKARM_RX_REG = 28;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_ACCU1H: JLINKARM_RX_REG = 29;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_ACCU1L: JLINKARM_RX_REG = 30;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_ACCU1E: JLINKARM_RX_REG = 31;
pub const JLINKARM_RX_REG_JLINKARM_RX_REG_EXTB: JLINKARM_RX_REG = 32;
pub const JLINKARM_RX_REG_JLINKARM_RX_NUM_REGS: JLINKARM_RX_REG = 33;
pub type JLINKARM_RX_REG = ::std::os::raw::c_uint;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R0: JLINK_MIPS_REG = 0;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R1: JLINK_MIPS_REG = 1;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R2: JLINK_MIPS_REG = 2;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R3: JLINK_MIPS_REG = 3;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R4: JLINK_MIPS_REG = 4;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R5: JLINK_MIPS_REG = 5;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R6: JLINK_MIPS_REG = 6;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R7: JLINK_MIPS_REG = 7;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R8: JLINK_MIPS_REG = 8;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R9: JLINK_MIPS_REG = 9;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R10: JLINK_MIPS_REG = 10;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R11: JLINK_MIPS_REG = 11;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R12: JLINK_MIPS_REG = 12;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R13: JLINK_MIPS_REG = 13;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R14: JLINK_MIPS_REG = 14;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R15: JLINK_MIPS_REG = 15;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R16: JLINK_MIPS_REG = 16;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R17: JLINK_MIPS_REG = 17;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R18: JLINK_MIPS_REG = 18;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R19: JLINK_MIPS_REG = 19;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R20: JLINK_MIPS_REG = 20;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R21: JLINK_MIPS_REG = 21;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R22: JLINK_MIPS_REG = 22;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R23: JLINK_MIPS_REG = 23;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R24: JLINK_MIPS_REG = 24;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R25: JLINK_MIPS_REG = 25;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R26: JLINK_MIPS_REG = 26;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R27: JLINK_MIPS_REG = 27;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R28: JLINK_MIPS_REG = 28;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R29: JLINK_MIPS_REG = 29;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R30: JLINK_MIPS_REG = 30;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_R31: JLINK_MIPS_REG = 31;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_HWRENA: JLINK_MIPS_REG = 32;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_BADVADDR: JLINK_MIPS_REG = 33;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_COUNT: JLINK_MIPS_REG = 34;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_COMPARE: JLINK_MIPS_REG = 35;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_STATUS: JLINK_MIPS_REG = 36;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_INTCTL: JLINK_MIPS_REG = 37;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_SRSCTL: JLINK_MIPS_REG = 38;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_SRSMAP: JLINK_MIPS_REG = 39;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_CAUSE: JLINK_MIPS_REG = 40;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_EPC: JLINK_MIPS_REG = 41;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_PRID: JLINK_MIPS_REG = 42;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_EBASE: JLINK_MIPS_REG = 43;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_CONFIG: JLINK_MIPS_REG = 44;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_CONFIG1: JLINK_MIPS_REG = 45;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_CONFIG2: JLINK_MIPS_REG = 46;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_CONFIG3: JLINK_MIPS_REG = 47;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_DEBUG: JLINK_MIPS_REG = 48;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_TRACECONTROL: JLINK_MIPS_REG = 49;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_TRACECONTROL2: JLINK_MIPS_REG = 50;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_USERTRACEDATA: JLINK_MIPS_REG = 51;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_TRACEBPC: JLINK_MIPS_REG = 52;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_DEBUG2: JLINK_MIPS_REG = 53;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_PC: JLINK_MIPS_REG = 54;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_ERROR_PC: JLINK_MIPS_REG = 55;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_DESAVE: JLINK_MIPS_REG = 56;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_HI: JLINK_MIPS_REG = 57;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_LO: JLINK_MIPS_REG = 58;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_LO1: JLINK_MIPS_REG = 59;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_LO2: JLINK_MIPS_REG = 60;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_LO3: JLINK_MIPS_REG = 61;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_HI1: JLINK_MIPS_REG = 62;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_HI2: JLINK_MIPS_REG = 63;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_HI3: JLINK_MIPS_REG = 64;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_INDEX: JLINK_MIPS_REG = 65;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_RANDOM: JLINK_MIPS_REG = 66;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_ENTRY_LO0: JLINK_MIPS_REG = 67;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_ENTRY_LO1: JLINK_MIPS_REG = 68;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_CONTEXT: JLINK_MIPS_REG = 69;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_USER_LOCAL: JLINK_MIPS_REG = 70;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_PAGE_MASK: JLINK_MIPS_REG = 71;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_PAGE_GRAIN: JLINK_MIPS_REG = 72;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_WIRED: JLINK_MIPS_REG = 73;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_BADINSTR: JLINK_MIPS_REG = 74;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_BADINSTRP: JLINK_MIPS_REG = 75;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_ENTRYHI: JLINK_MIPS_REG = 76;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_VIEWIPL: JLINK_MIPS_REG = 77;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_SRSMAP2: JLINK_MIPS_REG = 78;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_VIEW_RIPL: JLINK_MIPS_REG = 79;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_NESTEDEXC: JLINK_MIPS_REG = 80;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_NESTEDEPC: JLINK_MIPS_REG = 81;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_CDMMBASE: JLINK_MIPS_REG = 82;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_CONFIG4: JLINK_MIPS_REG = 83;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_CONFIG5: JLINK_MIPS_REG = 84;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_CONFIG7: JLINK_MIPS_REG = 85;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_LLADDR: JLINK_MIPS_REG = 86;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_USERTRACEDATA2: JLINK_MIPS_REG = 87;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_PERFCTL0: JLINK_MIPS_REG = 88;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_PERFCNT0: JLINK_MIPS_REG = 89;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_PERFCTL1: JLINK_MIPS_REG = 90;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_PERFCNT1: JLINK_MIPS_REG = 91;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_ERRCTL: JLINK_MIPS_REG = 92;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_CACHEERR: JLINK_MIPS_REG = 93;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_TAGLO: JLINK_MIPS_REG = 94;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_DATALO: JLINK_MIPS_REG = 95;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_KSCRATCH1: JLINK_MIPS_REG = 96;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_KSCRATCH2: JLINK_MIPS_REG = 97;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_WATCHLO0: JLINK_MIPS_REG = 98;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_WATCHLO1: JLINK_MIPS_REG = 99;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_WATCHLO2: JLINK_MIPS_REG = 100;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_WATCHLO3: JLINK_MIPS_REG = 101;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_WATCHLO4: JLINK_MIPS_REG = 102;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_WATCHLO5: JLINK_MIPS_REG = 103;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_WATCHLO6: JLINK_MIPS_REG = 104;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_WATCHLO7: JLINK_MIPS_REG = 105;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_WATCHHI0: JLINK_MIPS_REG = 106;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_WATCHHI1: JLINK_MIPS_REG = 107;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_WATCHHI2: JLINK_MIPS_REG = 108;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_WATCHHI3: JLINK_MIPS_REG = 109;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_WATCHHI4: JLINK_MIPS_REG = 110;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_WATCHHI5: JLINK_MIPS_REG = 111;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_WATCHHI6: JLINK_MIPS_REG = 112;
pub const JLINK_MIPS_REG_JLINK_MIPS_REG_WATCHHI7: JLINK_MIPS_REG = 113;
pub const JLINK_MIPS_REG_JLINK_MIPS_NUM_REGS: JLINK_MIPS_REG = 114;
pub type JLINK_MIPS_REG = ::std::os::raw::c_uint;
pub const JLINK_CF_REG_JLINK_CF_REG_D0: JLINK_CF_REG = 0;
pub const JLINK_CF_REG_JLINK_CF_REG_D1: JLINK_CF_REG = 1;
pub const JLINK_CF_REG_JLINK_CF_REG_D2: JLINK_CF_REG = 2;
pub const JLINK_CF_REG_JLINK_CF_REG_D3: JLINK_CF_REG = 3;
pub const JLINK_CF_REG_JLINK_CF_REG_D4: JLINK_CF_REG = 4;
pub const JLINK_CF_REG_JLINK_CF_REG_D5: JLINK_CF_REG = 5;
pub const JLINK_CF_REG_JLINK_CF_REG_D6: JLINK_CF_REG = 6;
pub const JLINK_CF_REG_JLINK_CF_REG_D7: JLINK_CF_REG = 7;
pub const JLINK_CF_REG_JLINK_CF_REG_A0: JLINK_CF_REG = 8;
pub const JLINK_CF_REG_JLINK_CF_REG_A1: JLINK_CF_REG = 9;
pub const JLINK_CF_REG_JLINK_CF_REG_A2: JLINK_CF_REG = 10;
pub const JLINK_CF_REG_JLINK_CF_REG_A3: JLINK_CF_REG = 11;
pub const JLINK_CF_REG_JLINK_CF_REG_A4: JLINK_CF_REG = 12;
pub const JLINK_CF_REG_JLINK_CF_REG_A5: JLINK_CF_REG = 13;
pub const JLINK_CF_REG_JLINK_CF_REG_A6: JLINK_CF_REG = 14;
pub const JLINK_CF_REG_JLINK_CF_REG_A7: JLINK_CF_REG = 15;
pub const JLINK_CF_REG_JLINK_CF_REG_OTHER_A7: JLINK_CF_REG = 16;
pub const JLINK_CF_REG_JLINK_CF_REG_USP: JLINK_CF_REG = 17;
pub const JLINK_CF_REG_JLINK_CF_REG_SSP: JLINK_CF_REG = 18;
pub const JLINK_CF_REG_JLINK_CF_REG_SR: JLINK_CF_REG = 19;
pub const JLINK_CF_REG_JLINK_CF_REG_PC: JLINK_CF_REG = 20;
pub const JLINK_CF_REG_JLINK_CF_REG_PC_CORRECTED: JLINK_CF_REG = 21;
pub const JLINK_CF_REG_JLINK_CF_REG_VBR: JLINK_CF_REG = 22;
pub const JLINK_CF_REG_JLINK_CF_REG_CACR: JLINK_CF_REG = 23;
pub const JLINK_CF_REG_JLINK_CF_REG_ACR0: JLINK_CF_REG = 24;
pub const JLINK_CF_REG_JLINK_CF_REG_ACR1: JLINK_CF_REG = 25;
pub const JLINK_CF_REG_JLINK_CF_REG_ACR2: JLINK_CF_REG = 26;
pub const JLINK_CF_REG_JLINK_CF_REG_ACR3: JLINK_CF_REG = 27;
pub const JLINK_CF_REG_JLINK_CF_REG_ASID: JLINK_CF_REG = 28;
pub const JLINK_CF_REG_JLINK_CF_REG_MMUBAR: JLINK_CF_REG = 29;
pub const JLINK_CF_REG_JLINK_CF_REG_MACSR: JLINK_CF_REG = 30;
pub const JLINK_CF_REG_JLINK_CF_REG_MASK: JLINK_CF_REG = 31;
pub const JLINK_CF_REG_JLINK_CF_REG_ACC0: JLINK_CF_REG = 32;
pub const JLINK_CF_REG_JLINK_CF_REG_ACC1: JLINK_CF_REG = 33;
pub const JLINK_CF_REG_JLINK_CF_REG_ACC2: JLINK_CF_REG = 34;
pub const JLINK_CF_REG_JLINK_CF_REG_ACC3: JLINK_CF_REG = 35;
pub const JLINK_CF_REG_JLINK_CF_REG_ACCext01: JLINK_CF_REG = 36;
pub const JLINK_CF_REG_JLINK_CF_REG_ACCext23: JLINK_CF_REG = 37;
pub const JLINK_CF_REG_JLINK_CF_REG_FPU0: JLINK_CF_REG = 38;
pub const JLINK_CF_REG_JLINK_CF_REG_FPL0: JLINK_CF_REG = 39;
pub const JLINK_CF_REG_JLINK_CF_REG_FPU1: JLINK_CF_REG = 40;
pub const JLINK_CF_REG_JLINK_CF_REG_FPL1: JLINK_CF_REG = 41;
pub const JLINK_CF_REG_JLINK_CF_REG_FPU2: JLINK_CF_REG = 42;
pub const JLINK_CF_REG_JLINK_CF_REG_FPL2: JLINK_CF_REG = 43;
pub const JLINK_CF_REG_JLINK_CF_REG_FPU3: JLINK_CF_REG = 44;
pub const JLINK_CF_REG_JLINK_CF_REG_FPL3: JLINK_CF_REG = 45;
pub const JLINK_CF_REG_JLINK_CF_REG_FPU4: JLINK_CF_REG = 46;
pub const JLINK_CF_REG_JLINK_CF_REG_FPL4: JLINK_CF_REG = 47;
pub const JLINK_CF_REG_JLINK_CF_REG_FPU5: JLINK_CF_REG = 48;
pub const JLINK_CF_REG_JLINK_CF_REG_FPL5: JLINK_CF_REG = 49;
pub const JLINK_CF_REG_JLINK_CF_REG_FPU6: JLINK_CF_REG = 50;
pub const JLINK_CF_REG_JLINK_CF_REG_FPL6: JLINK_CF_REG = 51;
pub const JLINK_CF_REG_JLINK_CF_REG_FPU7: JLINK_CF_REG = 52;
pub const JLINK_CF_REG_JLINK_CF_REG_FPL7: JLINK_CF_REG = 53;
pub const JLINK_CF_REG_JLINK_CF_REG_FPIAR: JLINK_CF_REG = 54;
pub const JLINK_CF_REG_JLINK_CF_REG_FPSR: JLINK_CF_REG = 55;
pub const JLINK_CF_REG_JLINK_CF_REG_FPCR: JLINK_CF_REG = 56;
pub const JLINK_CF_REG_JLINK_CF_NUM_REGS: JLINK_CF_REG = 57;
pub type JLINK_CF_REG = ::std::os::raw::c_uint;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R0: JLINK_POWER_PC_REG = 0;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R1: JLINK_POWER_PC_REG = 1;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R2: JLINK_POWER_PC_REG = 2;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R3: JLINK_POWER_PC_REG = 3;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R4: JLINK_POWER_PC_REG = 4;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R5: JLINK_POWER_PC_REG = 5;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R6: JLINK_POWER_PC_REG = 6;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R7: JLINK_POWER_PC_REG = 7;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R8: JLINK_POWER_PC_REG = 8;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R9: JLINK_POWER_PC_REG = 9;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R10: JLINK_POWER_PC_REG = 10;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R11: JLINK_POWER_PC_REG = 11;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R12: JLINK_POWER_PC_REG = 12;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R13: JLINK_POWER_PC_REG = 13;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R14: JLINK_POWER_PC_REG = 14;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R15: JLINK_POWER_PC_REG = 15;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R16: JLINK_POWER_PC_REG = 16;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R17: JLINK_POWER_PC_REG = 17;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R18: JLINK_POWER_PC_REG = 18;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R19: JLINK_POWER_PC_REG = 19;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R20: JLINK_POWER_PC_REG = 20;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R21: JLINK_POWER_PC_REG = 21;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R22: JLINK_POWER_PC_REG = 22;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R23: JLINK_POWER_PC_REG = 23;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R24: JLINK_POWER_PC_REG = 24;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R25: JLINK_POWER_PC_REG = 25;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R26: JLINK_POWER_PC_REG = 26;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R27: JLINK_POWER_PC_REG = 27;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R28: JLINK_POWER_PC_REG = 28;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R29: JLINK_POWER_PC_REG = 29;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R30: JLINK_POWER_PC_REG = 30;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_R31: JLINK_POWER_PC_REG = 31;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_CR: JLINK_POWER_PC_REG = 32;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_CTR: JLINK_POWER_PC_REG = 33;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_LR: JLINK_POWER_PC_REG = 34;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_XER: JLINK_POWER_PC_REG = 35;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_PC: JLINK_POWER_PC_REG = 36;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_MSR: JLINK_POWER_PC_REG = 37;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_PVR: JLINK_POWER_PC_REG = 38;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_PIR: JLINK_POWER_PC_REG = 39;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_SVR: JLINK_POWER_PC_REG = 40;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_HID0: JLINK_POWER_PC_REG = 41;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_HID1: JLINK_POWER_PC_REG = 42;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_SPRG0: JLINK_POWER_PC_REG = 43;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_SPRG1: JLINK_POWER_PC_REG = 44;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_SRR0: JLINK_POWER_PC_REG = 45;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_SRR1: JLINK_POWER_PC_REG = 46;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_CSRR0: JLINK_POWER_PC_REG = 47;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_CSRR1: JLINK_POWER_PC_REG = 48;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_DSRR0: JLINK_POWER_PC_REG = 49;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_DSRR1: JLINK_POWER_PC_REG = 50;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_ESR: JLINK_POWER_PC_REG = 51;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_MCSR: JLINK_POWER_PC_REG = 52;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_DEAR: JLINK_POWER_PC_REG = 53;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_IVPR: JLINK_POWER_PC_REG = 54;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_PID0: JLINK_POWER_PC_REG = 55;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_MMUCFG: JLINK_POWER_PC_REG = 56;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_L1CFG0: JLINK_POWER_PC_REG = 57;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_BUCSR: JLINK_POWER_PC_REG = 58;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_DBCR0: JLINK_POWER_PC_REG = 59;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_DBCR1: JLINK_POWER_PC_REG = 60;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_DBCR2: JLINK_POWER_PC_REG = 61;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_DBSR: JLINK_POWER_PC_REG = 62;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_IAC1: JLINK_POWER_PC_REG = 63;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_IAC2: JLINK_POWER_PC_REG = 64;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_IAC3: JLINK_POWER_PC_REG = 65;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_IAC4: JLINK_POWER_PC_REG = 66;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_DAC1: JLINK_POWER_PC_REG = 67;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_REG_DAC2: JLINK_POWER_PC_REG = 68;
pub const JLINK_POWER_PC_REG_JLINK_POWER_PC_NUM_REGS: JLINK_POWER_PC_REG = 69;
pub type JLINK_POWER_PC_REG = ::std::os::raw::c_uint;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_FFLAGS: JLINK_RISCV_REG = 1;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_FRM: JLINK_RISCV_REG = 2;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_FCSR: JLINK_RISCV_REG = 3;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_USTATUS: JLINK_RISCV_REG = 0;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_UIE: JLINK_RISCV_REG = 4;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_UTVEC: JLINK_RISCV_REG = 5;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_USCRATCH: JLINK_RISCV_REG = 64;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_UEPC: JLINK_RISCV_REG = 65;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_UCAUSE: JLINK_RISCV_REG = 66;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_UTVAL: JLINK_RISCV_REG = 67;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_UIP: JLINK_RISCV_REG = 68;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_SSTATUS: JLINK_RISCV_REG = 256;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_SEDELEG: JLINK_RISCV_REG = 258;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_SIDELEG: JLINK_RISCV_REG = 259;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_SIE: JLINK_RISCV_REG = 260;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_STVEC: JLINK_RISCV_REG = 261;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_SCOUNTEREN: JLINK_RISCV_REG = 262;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_SSCRATCH: JLINK_RISCV_REG = 320;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_SEPC: JLINK_RISCV_REG = 321;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_SCAUSE: JLINK_RISCV_REG = 322;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_STVAL: JLINK_RISCV_REG = 323;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_SIP: JLINK_RISCV_REG = 324;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_SATP: JLINK_RISCV_REG = 384;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MSTATUS: JLINK_RISCV_REG = 768;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MISA: JLINK_RISCV_REG = 769;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MEDELEG: JLINK_RISCV_REG = 770;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MIDELEG: JLINK_RISCV_REG = 771;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MIE: JLINK_RISCV_REG = 772;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MTVEC: JLINK_RISCV_REG = 773;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MCOUNTEREN: JLINK_RISCV_REG = 774;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMEVENT3: JLINK_RISCV_REG = 803;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMEVENT4: JLINK_RISCV_REG = 804;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMEVENT5: JLINK_RISCV_REG = 805;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMEVENT6: JLINK_RISCV_REG = 806;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMEVENT7: JLINK_RISCV_REG = 807;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMEVENT8: JLINK_RISCV_REG = 808;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMEVENT9: JLINK_RISCV_REG = 809;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMEVENT10: JLINK_RISCV_REG = 810;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMEVENT11: JLINK_RISCV_REG = 811;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMEVENT12: JLINK_RISCV_REG = 812;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMEVENT13: JLINK_RISCV_REG = 813;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMEVENT14: JLINK_RISCV_REG = 814;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMEVENT15: JLINK_RISCV_REG = 815;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMEVENT16: JLINK_RISCV_REG = 816;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMEVENT17: JLINK_RISCV_REG = 817;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMEVENT18: JLINK_RISCV_REG = 818;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMEVENT19: JLINK_RISCV_REG = 819;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMEVENT20: JLINK_RISCV_REG = 820;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMEVENT21: JLINK_RISCV_REG = 821;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMEVENT22: JLINK_RISCV_REG = 822;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMEVENT23: JLINK_RISCV_REG = 823;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMEVENT24: JLINK_RISCV_REG = 824;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMEVENT25: JLINK_RISCV_REG = 825;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMEVENT26: JLINK_RISCV_REG = 826;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMEVENT27: JLINK_RISCV_REG = 827;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMEVENT28: JLINK_RISCV_REG = 828;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMEVENT29: JLINK_RISCV_REG = 829;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMEVENT30: JLINK_RISCV_REG = 830;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMEVENT31: JLINK_RISCV_REG = 831;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MSCRATCH: JLINK_RISCV_REG = 832;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MEPC: JLINK_RISCV_REG = 833;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MCAUSE: JLINK_RISCV_REG = 834;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MTVAL: JLINK_RISCV_REG = 835;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MIP: JLINK_RISCV_REG = 836;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_PMPCFG0: JLINK_RISCV_REG = 928;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_PMPCFG1: JLINK_RISCV_REG = 929;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_PMPCFG2: JLINK_RISCV_REG = 930;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_PMPCFG3: JLINK_RISCV_REG = 931;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_PMPADDR0: JLINK_RISCV_REG = 944;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_PMPADDR1: JLINK_RISCV_REG = 945;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_PMPADDR2: JLINK_RISCV_REG = 946;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_PMPADDR3: JLINK_RISCV_REG = 947;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_PMPADDR4: JLINK_RISCV_REG = 948;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_PMPADDR5: JLINK_RISCV_REG = 949;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_PMPADDR6: JLINK_RISCV_REG = 950;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_PMPADDR7: JLINK_RISCV_REG = 951;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_PMPADDR8: JLINK_RISCV_REG = 952;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_PMPADDR9: JLINK_RISCV_REG = 953;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_PMPADDR10: JLINK_RISCV_REG = 954;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_PMPADDR11: JLINK_RISCV_REG = 955;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_PMPADDR12: JLINK_RISCV_REG = 956;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_PMPADDR13: JLINK_RISCV_REG = 957;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_PMPADDR14: JLINK_RISCV_REG = 958;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_PMPADDR15: JLINK_RISCV_REG = 959;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_TSELECT: JLINK_RISCV_REG = 1952;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_TDATA1: JLINK_RISCV_REG = 1953;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_TDATA2: JLINK_RISCV_REG = 1954;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_TDATA3: JLINK_RISCV_REG = 1955;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_DCSR: JLINK_RISCV_REG = 1968;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_DPC: JLINK_RISCV_REG = 1969;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_DSCRATCH: JLINK_RISCV_REG = 1970;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MCYCLE: JLINK_RISCV_REG = 2816;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MINSTRET: JLINK_RISCV_REG = 2818;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER3: JLINK_RISCV_REG = 2819;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER4: JLINK_RISCV_REG = 2820;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER5: JLINK_RISCV_REG = 2821;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER6: JLINK_RISCV_REG = 2822;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER7: JLINK_RISCV_REG = 2823;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER8: JLINK_RISCV_REG = 2824;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER9: JLINK_RISCV_REG = 2825;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER10: JLINK_RISCV_REG = 2826;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER11: JLINK_RISCV_REG = 2827;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER12: JLINK_RISCV_REG = 2828;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER13: JLINK_RISCV_REG = 2829;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER14: JLINK_RISCV_REG = 2830;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER15: JLINK_RISCV_REG = 2831;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER16: JLINK_RISCV_REG = 2832;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER17: JLINK_RISCV_REG = 2833;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER18: JLINK_RISCV_REG = 2834;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER19: JLINK_RISCV_REG = 2835;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER20: JLINK_RISCV_REG = 2836;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER21: JLINK_RISCV_REG = 2837;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER22: JLINK_RISCV_REG = 2838;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER23: JLINK_RISCV_REG = 2839;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER24: JLINK_RISCV_REG = 2840;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER25: JLINK_RISCV_REG = 2841;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER26: JLINK_RISCV_REG = 2842;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER27: JLINK_RISCV_REG = 2843;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER28: JLINK_RISCV_REG = 2844;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER29: JLINK_RISCV_REG = 2845;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER30: JLINK_RISCV_REG = 2846;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER31: JLINK_RISCV_REG = 2847;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MCYCLEH: JLINK_RISCV_REG = 2944;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MINSTRETH: JLINK_RISCV_REG = 2946;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER3H: JLINK_RISCV_REG = 2947;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER4H: JLINK_RISCV_REG = 2948;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER5H: JLINK_RISCV_REG = 2949;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER6H: JLINK_RISCV_REG = 2950;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER7H: JLINK_RISCV_REG = 2951;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER8H: JLINK_RISCV_REG = 2952;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER9H: JLINK_RISCV_REG = 2953;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER10H: JLINK_RISCV_REG = 2954;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER11H: JLINK_RISCV_REG = 2955;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER12H: JLINK_RISCV_REG = 2956;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER13H: JLINK_RISCV_REG = 2957;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER14H: JLINK_RISCV_REG = 2958;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER15H: JLINK_RISCV_REG = 2959;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER16H: JLINK_RISCV_REG = 2960;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER17H: JLINK_RISCV_REG = 2961;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER18H: JLINK_RISCV_REG = 2962;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER19H: JLINK_RISCV_REG = 2963;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER20H: JLINK_RISCV_REG = 2964;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER21H: JLINK_RISCV_REG = 2965;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER22H: JLINK_RISCV_REG = 2966;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER23H: JLINK_RISCV_REG = 2967;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER24H: JLINK_RISCV_REG = 2968;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER25H: JLINK_RISCV_REG = 2969;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER26H: JLINK_RISCV_REG = 2970;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER27H: JLINK_RISCV_REG = 2971;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER28H: JLINK_RISCV_REG = 2972;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER29H: JLINK_RISCV_REG = 2973;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER30H: JLINK_RISCV_REG = 2974;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHPMCOUNTER31H: JLINK_RISCV_REG = 2975;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_CYCLE: JLINK_RISCV_REG = 3072;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_TIME: JLINK_RISCV_REG = 3073;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_INSTRET: JLINK_RISCV_REG = 3074;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER3: JLINK_RISCV_REG = 3075;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER4: JLINK_RISCV_REG = 3076;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER5: JLINK_RISCV_REG = 3077;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER6: JLINK_RISCV_REG = 3078;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER7: JLINK_RISCV_REG = 3079;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER8: JLINK_RISCV_REG = 3080;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER9: JLINK_RISCV_REG = 3081;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER10: JLINK_RISCV_REG = 3082;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER11: JLINK_RISCV_REG = 3083;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER12: JLINK_RISCV_REG = 3084;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER13: JLINK_RISCV_REG = 3085;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER14: JLINK_RISCV_REG = 3086;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER15: JLINK_RISCV_REG = 3087;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER16: JLINK_RISCV_REG = 3088;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER17: JLINK_RISCV_REG = 3089;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER18: JLINK_RISCV_REG = 3090;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER19: JLINK_RISCV_REG = 3091;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER20: JLINK_RISCV_REG = 3092;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER21: JLINK_RISCV_REG = 3093;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER22: JLINK_RISCV_REG = 3094;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER23: JLINK_RISCV_REG = 3095;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER24: JLINK_RISCV_REG = 3096;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER25: JLINK_RISCV_REG = 3097;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER26: JLINK_RISCV_REG = 3098;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER27: JLINK_RISCV_REG = 3099;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER28: JLINK_RISCV_REG = 3100;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER29: JLINK_RISCV_REG = 3101;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER30: JLINK_RISCV_REG = 3102;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER31: JLINK_RISCV_REG = 3103;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_CYCLEH: JLINK_RISCV_REG = 3200;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_TIMEH: JLINK_RISCV_REG = 3201;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_INSTRETH: JLINK_RISCV_REG = 3202;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER3H: JLINK_RISCV_REG = 3203;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER4H: JLINK_RISCV_REG = 3204;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER5H: JLINK_RISCV_REG = 3205;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER6H: JLINK_RISCV_REG = 3206;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER7H: JLINK_RISCV_REG = 3207;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER8H: JLINK_RISCV_REG = 3208;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER9H: JLINK_RISCV_REG = 3209;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER10H: JLINK_RISCV_REG = 3210;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER11H: JLINK_RISCV_REG = 3211;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER12H: JLINK_RISCV_REG = 3212;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER13H: JLINK_RISCV_REG = 3213;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER14H: JLINK_RISCV_REG = 3214;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER15H: JLINK_RISCV_REG = 3215;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER16H: JLINK_RISCV_REG = 3216;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER17H: JLINK_RISCV_REG = 3217;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER18H: JLINK_RISCV_REG = 3218;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER19H: JLINK_RISCV_REG = 3219;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER20H: JLINK_RISCV_REG = 3220;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER21H: JLINK_RISCV_REG = 3221;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER22H: JLINK_RISCV_REG = 3222;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER23H: JLINK_RISCV_REG = 3223;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER24H: JLINK_RISCV_REG = 3224;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER25H: JLINK_RISCV_REG = 3225;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER26H: JLINK_RISCV_REG = 3226;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER27H: JLINK_RISCV_REG = 3227;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER28H: JLINK_RISCV_REG = 3228;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER29H: JLINK_RISCV_REG = 3229;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER30H: JLINK_RISCV_REG = 3230;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_HPMCOUNTER31H: JLINK_RISCV_REG = 3231;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MVENDORID: JLINK_RISCV_REG = 3857;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MARCHID: JLINK_RISCV_REG = 3858;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MIMPID: JLINK_RISCV_REG = 3859;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_MHARTID: JLINK_RISCV_REG = 3860;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X0: JLINK_RISCV_REG = 4096;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X1: JLINK_RISCV_REG = 4097;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X2: JLINK_RISCV_REG = 4098;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X3: JLINK_RISCV_REG = 4099;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X4: JLINK_RISCV_REG = 4100;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X5: JLINK_RISCV_REG = 4101;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X6: JLINK_RISCV_REG = 4102;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X7: JLINK_RISCV_REG = 4103;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X8: JLINK_RISCV_REG = 4104;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X9: JLINK_RISCV_REG = 4105;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X10: JLINK_RISCV_REG = 4106;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X11: JLINK_RISCV_REG = 4107;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X12: JLINK_RISCV_REG = 4108;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X13: JLINK_RISCV_REG = 4109;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X14: JLINK_RISCV_REG = 4110;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X15: JLINK_RISCV_REG = 4111;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X16: JLINK_RISCV_REG = 4112;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X17: JLINK_RISCV_REG = 4113;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X18: JLINK_RISCV_REG = 4114;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X19: JLINK_RISCV_REG = 4115;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X20: JLINK_RISCV_REG = 4116;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X21: JLINK_RISCV_REG = 4117;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X22: JLINK_RISCV_REG = 4118;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X23: JLINK_RISCV_REG = 4119;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X24: JLINK_RISCV_REG = 4120;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X25: JLINK_RISCV_REG = 4121;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X26: JLINK_RISCV_REG = 4122;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X27: JLINK_RISCV_REG = 4123;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X28: JLINK_RISCV_REG = 4124;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X29: JLINK_RISCV_REG = 4125;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X30: JLINK_RISCV_REG = 4126;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_X31: JLINK_RISCV_REG = 4127;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F0: JLINK_RISCV_REG = 4128;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F1: JLINK_RISCV_REG = 4129;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F2: JLINK_RISCV_REG = 4130;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F3: JLINK_RISCV_REG = 4131;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F4: JLINK_RISCV_REG = 4132;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F5: JLINK_RISCV_REG = 4133;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F6: JLINK_RISCV_REG = 4134;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F7: JLINK_RISCV_REG = 4135;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F8: JLINK_RISCV_REG = 4136;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F9: JLINK_RISCV_REG = 4137;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F10: JLINK_RISCV_REG = 4138;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F11: JLINK_RISCV_REG = 4139;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F12: JLINK_RISCV_REG = 4140;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F13: JLINK_RISCV_REG = 4141;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F14: JLINK_RISCV_REG = 4142;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F15: JLINK_RISCV_REG = 4143;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F16: JLINK_RISCV_REG = 4144;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F17: JLINK_RISCV_REG = 4145;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F18: JLINK_RISCV_REG = 4146;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F19: JLINK_RISCV_REG = 4147;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F20: JLINK_RISCV_REG = 4148;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F21: JLINK_RISCV_REG = 4149;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F22: JLINK_RISCV_REG = 4150;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F23: JLINK_RISCV_REG = 4151;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F24: JLINK_RISCV_REG = 4152;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F25: JLINK_RISCV_REG = 4153;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F26: JLINK_RISCV_REG = 4154;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F27: JLINK_RISCV_REG = 4155;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F28: JLINK_RISCV_REG = 4156;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F29: JLINK_RISCV_REG = 4157;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F30: JLINK_RISCV_REG = 4158;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_F31: JLINK_RISCV_REG = 4159;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V0: JLINK_RISCV_REG = 4160;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V1: JLINK_RISCV_REG = 4161;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V2: JLINK_RISCV_REG = 4162;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V3: JLINK_RISCV_REG = 4163;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V4: JLINK_RISCV_REG = 4164;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V5: JLINK_RISCV_REG = 4165;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V6: JLINK_RISCV_REG = 4166;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V7: JLINK_RISCV_REG = 4167;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V8: JLINK_RISCV_REG = 4168;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V9: JLINK_RISCV_REG = 4169;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V10: JLINK_RISCV_REG = 4170;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V11: JLINK_RISCV_REG = 4171;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V12: JLINK_RISCV_REG = 4172;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V13: JLINK_RISCV_REG = 4173;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V14: JLINK_RISCV_REG = 4174;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V15: JLINK_RISCV_REG = 4175;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V16: JLINK_RISCV_REG = 4176;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V17: JLINK_RISCV_REG = 4177;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V18: JLINK_RISCV_REG = 4178;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V19: JLINK_RISCV_REG = 4179;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V20: JLINK_RISCV_REG = 4180;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V21: JLINK_RISCV_REG = 4181;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V22: JLINK_RISCV_REG = 4182;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V23: JLINK_RISCV_REG = 4183;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V24: JLINK_RISCV_REG = 4184;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V25: JLINK_RISCV_REG = 4185;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V26: JLINK_RISCV_REG = 4186;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V27: JLINK_RISCV_REG = 4187;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V28: JLINK_RISCV_REG = 4188;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V29: JLINK_RISCV_REG = 4189;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V30: JLINK_RISCV_REG = 4190;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_V31: JLINK_RISCV_REG = 4191;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_VP0: JLINK_RISCV_REG = 4192;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_VP1: JLINK_RISCV_REG = 4193;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_VP2: JLINK_RISCV_REG = 4194;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_VP3: JLINK_RISCV_REG = 4195;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_VP4: JLINK_RISCV_REG = 4196;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_VP5: JLINK_RISCV_REG = 4197;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_VP6: JLINK_RISCV_REG = 4198;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_VP7: JLINK_RISCV_REG = 4199;
pub const JLINK_RISCV_REG_JLINK_RISCV_REG_PC: JLINK_RISCV_REG = 4224;
pub const JLINK_RISCV_REG_JLINK_RISCV_NUM_REGS: JLINK_RISCV_REG = 4225;
pub type JLINK_RISCV_REG = ::std::os::raw::c_uint;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R0: JLINK_ARM_V8AR_REG = 0;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R1: JLINK_ARM_V8AR_REG = 1;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R2: JLINK_ARM_V8AR_REG = 2;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R3: JLINK_ARM_V8AR_REG = 3;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R4: JLINK_ARM_V8AR_REG = 4;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R5: JLINK_ARM_V8AR_REG = 5;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R6: JLINK_ARM_V8AR_REG = 6;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R7: JLINK_ARM_V8AR_REG = 7;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R8: JLINK_ARM_V8AR_REG = 8;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R9: JLINK_ARM_V8AR_REG = 9;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R10: JLINK_ARM_V8AR_REG = 10;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R11: JLINK_ARM_V8AR_REG = 11;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R12: JLINK_ARM_V8AR_REG = 12;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R13: JLINK_ARM_V8AR_REG = 13;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R14: JLINK_ARM_V8AR_REG = 14;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R15: JLINK_ARM_V8AR_REG = 15;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R16: JLINK_ARM_V8AR_REG = 16;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R17: JLINK_ARM_V8AR_REG = 17;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R18: JLINK_ARM_V8AR_REG = 18;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R19: JLINK_ARM_V8AR_REG = 19;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R20: JLINK_ARM_V8AR_REG = 20;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R21: JLINK_ARM_V8AR_REG = 21;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R22: JLINK_ARM_V8AR_REG = 22;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R23: JLINK_ARM_V8AR_REG = 23;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R24: JLINK_ARM_V8AR_REG = 24;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R25: JLINK_ARM_V8AR_REG = 25;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R26: JLINK_ARM_V8AR_REG = 26;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R27: JLINK_ARM_V8AR_REG = 27;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R28: JLINK_ARM_V8AR_REG = 28;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R29: JLINK_ARM_V8AR_REG = 29;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R30: JLINK_ARM_V8AR_REG = 30;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_R31: JLINK_ARM_V8AR_REG = 31;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_SP: JLINK_ARM_V8AR_REG = 32;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_PC: JLINK_ARM_V8AR_REG = 33;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_ELR_EL1: JLINK_ARM_V8AR_REG = 34;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_ELR_EL2: JLINK_ARM_V8AR_REG = 35;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_ELR_EL3: JLINK_ARM_V8AR_REG = 36;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_SP_EL0: JLINK_ARM_V8AR_REG = 37;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_SP_EL1: JLINK_ARM_V8AR_REG = 38;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_SP_EL2: JLINK_ARM_V8AR_REG = 39;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_SP_EL3: JLINK_ARM_V8AR_REG = 40;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_CPSR: JLINK_ARM_V8AR_REG = 41;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_SPSR_abt: JLINK_ARM_V8AR_REG = 42;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_SPSR_EL1: JLINK_ARM_V8AR_REG = 43;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_SPSR_EL2: JLINK_ARM_V8AR_REG = 44;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_SPSR_EL3: JLINK_ARM_V8AR_REG = 45;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_SPSR_fiq: JLINK_ARM_V8AR_REG = 46;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_SPSR_irq: JLINK_ARM_V8AR_REG = 47;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_SPSR_und: JLINK_ARM_V8AR_REG = 48;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_FPCR: JLINK_ARM_V8AR_REG = 49;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_FPSR: JLINK_ARM_V8AR_REG = 50;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V0_LOW: JLINK_ARM_V8AR_REG = 51;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V0_HIGH: JLINK_ARM_V8AR_REG = 52;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V1_LOW: JLINK_ARM_V8AR_REG = 53;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V1_HIGH: JLINK_ARM_V8AR_REG = 54;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V2_LOW: JLINK_ARM_V8AR_REG = 55;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V2_HIGH: JLINK_ARM_V8AR_REG = 56;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V3_LOW: JLINK_ARM_V8AR_REG = 57;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V3_HIGH: JLINK_ARM_V8AR_REG = 58;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V4_LOW: JLINK_ARM_V8AR_REG = 59;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V4_HIGH: JLINK_ARM_V8AR_REG = 60;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V5_LOW: JLINK_ARM_V8AR_REG = 61;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V5_HIGH: JLINK_ARM_V8AR_REG = 62;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V6_LOW: JLINK_ARM_V8AR_REG = 63;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V6_HIGH: JLINK_ARM_V8AR_REG = 64;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V7_LOW: JLINK_ARM_V8AR_REG = 65;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V7_HIGH: JLINK_ARM_V8AR_REG = 66;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V8_LOW: JLINK_ARM_V8AR_REG = 67;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V8_HIGH: JLINK_ARM_V8AR_REG = 68;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V9_LOW: JLINK_ARM_V8AR_REG = 69;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V9_HIGH: JLINK_ARM_V8AR_REG = 70;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V10_LOW: JLINK_ARM_V8AR_REG = 71;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V10_HIGH: JLINK_ARM_V8AR_REG = 72;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V11_LOW: JLINK_ARM_V8AR_REG = 73;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V11_HIGH: JLINK_ARM_V8AR_REG = 74;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V12_LOW: JLINK_ARM_V8AR_REG = 75;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V12_HIGH: JLINK_ARM_V8AR_REG = 76;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V13_LOW: JLINK_ARM_V8AR_REG = 77;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V13_HIGH: JLINK_ARM_V8AR_REG = 78;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V14_LOW: JLINK_ARM_V8AR_REG = 79;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V14_HIGH: JLINK_ARM_V8AR_REG = 80;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V15_LOW: JLINK_ARM_V8AR_REG = 81;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V15_HIGH: JLINK_ARM_V8AR_REG = 82;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V16_LOW: JLINK_ARM_V8AR_REG = 83;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V16_HIGH: JLINK_ARM_V8AR_REG = 84;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V17_LOW: JLINK_ARM_V8AR_REG = 85;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V17_HIGH: JLINK_ARM_V8AR_REG = 86;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V18_LOW: JLINK_ARM_V8AR_REG = 87;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V18_HIGH: JLINK_ARM_V8AR_REG = 88;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V19_LOW: JLINK_ARM_V8AR_REG = 89;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V19_HIGH: JLINK_ARM_V8AR_REG = 90;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V20_LOW: JLINK_ARM_V8AR_REG = 91;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V20_HIGH: JLINK_ARM_V8AR_REG = 92;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V21_LOW: JLINK_ARM_V8AR_REG = 93;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V21_HIGH: JLINK_ARM_V8AR_REG = 94;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V22_LOW: JLINK_ARM_V8AR_REG = 95;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V22_HIGH: JLINK_ARM_V8AR_REG = 96;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V23_LOW: JLINK_ARM_V8AR_REG = 97;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V23_HIGH: JLINK_ARM_V8AR_REG = 98;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V24_LOW: JLINK_ARM_V8AR_REG = 99;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V24_HIGH: JLINK_ARM_V8AR_REG = 100;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V25_LOW: JLINK_ARM_V8AR_REG = 101;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V25_HIGH: JLINK_ARM_V8AR_REG = 102;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V26_LOW: JLINK_ARM_V8AR_REG = 103;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V26_HIGH: JLINK_ARM_V8AR_REG = 104;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V27_LOW: JLINK_ARM_V8AR_REG = 105;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V27_HIGH: JLINK_ARM_V8AR_REG = 106;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V28_LOW: JLINK_ARM_V8AR_REG = 107;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V28_HIGH: JLINK_ARM_V8AR_REG = 108;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V29_LOW: JLINK_ARM_V8AR_REG = 109;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V29_HIGH: JLINK_ARM_V8AR_REG = 110;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V30_LOW: JLINK_ARM_V8AR_REG = 111;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V30_HIGH: JLINK_ARM_V8AR_REG = 112;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V31_LOW: JLINK_ARM_V8AR_REG = 113;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_V31_HIGH: JLINK_ARM_V8AR_REG = 114;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_JMISC: JLINK_ARM_V8AR_REG = 115;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R0: JLINK_ARM_V8AR_REG = 116;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R1: JLINK_ARM_V8AR_REG = 117;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R2: JLINK_ARM_V8AR_REG = 118;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R3: JLINK_ARM_V8AR_REG = 119;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R4: JLINK_ARM_V8AR_REG = 120;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R5: JLINK_ARM_V8AR_REG = 121;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R6: JLINK_ARM_V8AR_REG = 122;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R7: JLINK_ARM_V8AR_REG = 123;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R8_USR: JLINK_ARM_V8AR_REG = 124;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R9_USR: JLINK_ARM_V8AR_REG = 125;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R10_USR: JLINK_ARM_V8AR_REG = 126;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R11_USR: JLINK_ARM_V8AR_REG = 127;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R12_USR: JLINK_ARM_V8AR_REG = 128;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R13_USR: JLINK_ARM_V8AR_REG = 129;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R14_USR: JLINK_ARM_V8AR_REG = 130;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R13_HYP: JLINK_ARM_V8AR_REG = 131;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R13_IRQ: JLINK_ARM_V8AR_REG = 132;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R14_IRQ: JLINK_ARM_V8AR_REG = 133;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R13_SVC: JLINK_ARM_V8AR_REG = 134;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R14_SVC: JLINK_ARM_V8AR_REG = 135;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R13_ABT: JLINK_ARM_V8AR_REG = 136;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R14_ABT: JLINK_ARM_V8AR_REG = 137;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R13_UND: JLINK_ARM_V8AR_REG = 138;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R14_UND: JLINK_ARM_V8AR_REG = 139;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R8_FIQ: JLINK_ARM_V8AR_REG = 140;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R9_FIQ: JLINK_ARM_V8AR_REG = 141;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R10_FIQ: JLINK_ARM_V8AR_REG = 142;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R11_FIQ: JLINK_ARM_V8AR_REG = 143;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R12_FIQ: JLINK_ARM_V8AR_REG = 144;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R13_FIQ: JLINK_ARM_V8AR_REG = 145;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R14_FIQ: JLINK_ARM_V8AR_REG = 146;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_PC: JLINK_ARM_V8AR_REG = 147;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_ELR_HYP: JLINK_ARM_V8AR_REG = 148;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_CPSR: JLINK_ARM_V8AR_REG = 149;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_SPSR_ABT: JLINK_ARM_V8AR_REG = 150;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_SPSR_SVC: JLINK_ARM_V8AR_REG = 151;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_SPSR_HYP: JLINK_ARM_V8AR_REG = 152;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_SPSR_FIQ: JLINK_ARM_V8AR_REG = 153;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_SPSR_IRQ: JLINK_ARM_V8AR_REG = 154;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_SPSR_UND: JLINK_ARM_V8AR_REG = 155;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_FPSCR: JLINK_ARM_V8AR_REG = 156;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q0_LOW: JLINK_ARM_V8AR_REG = 157;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q0_HIGH: JLINK_ARM_V8AR_REG = 158;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q1_LOW: JLINK_ARM_V8AR_REG = 159;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q1_HIGH: JLINK_ARM_V8AR_REG = 160;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q2_LOW: JLINK_ARM_V8AR_REG = 161;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q2_HIGH: JLINK_ARM_V8AR_REG = 162;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q3_LOW: JLINK_ARM_V8AR_REG = 163;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q3_HIGH: JLINK_ARM_V8AR_REG = 164;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q4_LOW: JLINK_ARM_V8AR_REG = 165;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q4_HIGH: JLINK_ARM_V8AR_REG = 166;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q5_LOW: JLINK_ARM_V8AR_REG = 167;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q5_HIGH: JLINK_ARM_V8AR_REG = 168;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q6_LOW: JLINK_ARM_V8AR_REG = 169;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q6_HIGH: JLINK_ARM_V8AR_REG = 170;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q7_LOW: JLINK_ARM_V8AR_REG = 171;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q7_HIGH: JLINK_ARM_V8AR_REG = 172;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q8_LOW: JLINK_ARM_V8AR_REG = 173;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q8_HIGH: JLINK_ARM_V8AR_REG = 174;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q9_LOW: JLINK_ARM_V8AR_REG = 175;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q9_HIGH: JLINK_ARM_V8AR_REG = 176;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q10_LOW: JLINK_ARM_V8AR_REG = 177;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q10_HIGH: JLINK_ARM_V8AR_REG = 178;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q11_LOW: JLINK_ARM_V8AR_REG = 179;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q11_HIGH: JLINK_ARM_V8AR_REG = 180;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q12_LOW: JLINK_ARM_V8AR_REG = 181;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q12_HIGH: JLINK_ARM_V8AR_REG = 182;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q13_LOW: JLINK_ARM_V8AR_REG = 183;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q13_HIGH: JLINK_ARM_V8AR_REG = 184;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q14_LOW: JLINK_ARM_V8AR_REG = 185;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q14_HIGH: JLINK_ARM_V8AR_REG = 186;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q15_LOW: JLINK_ARM_V8AR_REG = 187;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_Q15_HIGH: JLINK_ARM_V8AR_REG = 188;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R8: JLINK_ARM_V8AR_REG = 189;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R9: JLINK_ARM_V8AR_REG = 190;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R10: JLINK_ARM_V8AR_REG = 191;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R11: JLINK_ARM_V8AR_REG = 192;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R12: JLINK_ARM_V8AR_REG = 193;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R13: JLINK_ARM_V8AR_REG = 194;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_REG_AARCH32_R14: JLINK_ARM_V8AR_REG = 195;
pub const JLINK_ARM_V8AR_REG_JLINK_ARM_V8AR_NUM_REGS: JLINK_ARM_V8AR_REG = 196;
pub type JLINK_ARM_V8AR_REG = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_STRACE_EVENT_INFO {
    pub SizeofStruct: ::std::os::raw::c_uint,
    pub Type: ::std::os::raw::c_uchar,
    pub Op: ::std::os::raw::c_uchar,
    pub AccessSize: ::std::os::raw::c_uchar,
    pub Reserved0: ::std::os::raw::c_uchar,
    pub Addr: ::std::os::raw::c_ulonglong,
    pub Data: ::std::os::raw::c_ulonglong,
    pub DataMask: ::std::os::raw::c_ulonglong,
    pub AddrRangeSize: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_JLINK_STRACE_EVENT_INFO() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_STRACE_EVENT_INFO>(),
        40usize,
        concat!("Size of: ", stringify!(JLINK_STRACE_EVENT_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_STRACE_EVENT_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(JLINK_STRACE_EVENT_INFO))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_STRACE_EVENT_INFO>())).SizeofStruct as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_STRACE_EVENT_INFO),
            "::",
            stringify!(SizeofStruct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_STRACE_EVENT_INFO>())).Type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_STRACE_EVENT_INFO),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_STRACE_EVENT_INFO>())).Op as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_STRACE_EVENT_INFO),
            "::",
            stringify!(Op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_STRACE_EVENT_INFO>())).AccessSize as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_STRACE_EVENT_INFO),
            "::",
            stringify!(AccessSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_STRACE_EVENT_INFO>())).Reserved0 as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_STRACE_EVENT_INFO),
            "::",
            stringify!(Reserved0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_STRACE_EVENT_INFO>())).Addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_STRACE_EVENT_INFO),
            "::",
            stringify!(Addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_STRACE_EVENT_INFO>())).Data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_STRACE_EVENT_INFO),
            "::",
            stringify!(Data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_STRACE_EVENT_INFO>())).DataMask as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_STRACE_EVENT_INFO),
            "::",
            stringify!(DataMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_STRACE_EVENT_INFO>())).AddrRangeSize as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_STRACE_EVENT_INFO),
            "::",
            stringify!(AddrRangeSize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_STRACE_INST_STAT {
    pub ExecCnt: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_JLINK_STRACE_INST_STAT() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_STRACE_INST_STAT>(),
        8usize,
        concat!("Size of: ", stringify!(JLINK_STRACE_INST_STAT))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_STRACE_INST_STAT>(),
        8usize,
        concat!("Alignment of ", stringify!(JLINK_STRACE_INST_STAT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_STRACE_INST_STAT>())).ExecCnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_STRACE_INST_STAT),
            "::",
            stringify!(ExecCnt)
        )
    );
}
pub const ARM_ENDIAN_ARM_ENDIAN_LITTLE: ARM_ENDIAN = 0;
pub const ARM_ENDIAN_ARM_ENDIAN_BIG: ARM_ENDIAN = 1;
pub type ARM_ENDIAN = ::std::os::raw::c_uint;
pub const JLINKARM_RESET_TYPE_JLINKARM_RESET_TYPE_NORMAL: JLINKARM_RESET_TYPE = 0;
pub const JLINKARM_RESET_TYPE_JLINKARM_RESET_TYPE_BP0: JLINKARM_RESET_TYPE = 1;
pub const JLINKARM_RESET_TYPE_JLINKARM_RESET_TYPE_ADI: JLINKARM_RESET_TYPE = 2;
pub const JLINKARM_RESET_TYPE_JLINKARM_RESET_TYPE_NO_RESET: JLINKARM_RESET_TYPE = 3;
pub const JLINKARM_RESET_TYPE_JLINKARM_RESET_TYPE_HALT_WP: JLINKARM_RESET_TYPE = 4;
pub const JLINKARM_RESET_TYPE_JLINKARM_RESET_TYPE_HALT_DBGRQ: JLINKARM_RESET_TYPE = 5;
pub const JLINKARM_RESET_TYPE_JLINKARM_RESET_TYPE_SOFT: JLINKARM_RESET_TYPE = 6;
pub const JLINKARM_RESET_TYPE_JLINKARM_RESET_TYPE_HALT_DURING: JLINKARM_RESET_TYPE = 7;
pub const JLINKARM_RESET_TYPE_JLINKARM_RESET_TYPE_SAM7: JLINKARM_RESET_TYPE = 8;
pub const JLINKARM_RESET_TYPE_JLINKARM_RESET_TYPE_LPC: JLINKARM_RESET_TYPE = 9;
pub const JLINKARM_RESET_TYPE_JLINK_RESET_TYPE_CORE: JLINKARM_RESET_TYPE = 100;
pub const JLINKARM_RESET_TYPE_JLINK_RESET_TYPE_RESET_PIN: JLINKARM_RESET_TYPE = 101;
pub type JLINKARM_RESET_TYPE = ::std::os::raw::c_uint;
pub const JLINK_PCODE_OPERATIONS_JLINK_PCODE_OP_RESET: JLINK_PCODE_OPERATIONS = 0;
pub const JLINK_PCODE_OPERATIONS_JLINK_PCODE_OP_CONNECT: JLINK_PCODE_OPERATIONS = 1;
pub const JLINK_PCODE_OPERATIONS_JLINK_PCODE_OP_UNSECURE: JLINK_PCODE_OPERATIONS = 2;
pub const JLINK_PCODE_OPERATIONS_JLINK_PCODE_OP_SETUP: JLINK_PCODE_OPERATIONS = 3;
pub const JLINK_PCODE_OPERATIONS_JLINK_PCODE_OP_PCODE_DEVICE: JLINK_PCODE_OPERATIONS = 4;
pub const JLINK_PCODE_OPERATIONS_JLINK_PCODE_OP_NUM_OPERATIONS: JLINK_PCODE_OPERATIONS = 5;
pub type JLINK_PCODE_OPERATIONS = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINKARM_INDICATOR_CTRL {
    pub IndicatorId: ::std::os::raw::c_ushort,
    pub Override: ::std::os::raw::c_ushort,
    pub InitialOnTime: ::std::os::raw::c_ushort,
    pub OnTime: ::std::os::raw::c_ushort,
    pub OffTime: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_JLINKARM_INDICATOR_CTRL() {
    assert_eq!(
        ::std::mem::size_of::<JLINKARM_INDICATOR_CTRL>(),
        10usize,
        concat!("Size of: ", stringify!(JLINKARM_INDICATOR_CTRL))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINKARM_INDICATOR_CTRL>(),
        2usize,
        concat!("Alignment of ", stringify!(JLINKARM_INDICATOR_CTRL))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_INDICATOR_CTRL>())).IndicatorId as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_INDICATOR_CTRL),
            "::",
            stringify!(IndicatorId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_INDICATOR_CTRL>())).Override as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_INDICATOR_CTRL),
            "::",
            stringify!(Override)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_INDICATOR_CTRL>())).InitialOnTime as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_INDICATOR_CTRL),
            "::",
            stringify!(InitialOnTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_INDICATOR_CTRL>())).OnTime as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_INDICATOR_CTRL),
            "::",
            stringify!(OnTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_INDICATOR_CTRL>())).OffTime as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_INDICATOR_CTRL),
            "::",
            stringify!(OffTime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JTAG_ID_DATA {
    pub NumDevices: ::std::os::raw::c_int,
    pub ScanLen: ::std::os::raw::c_ushort,
    pub aId: [::std::os::raw::c_uint; 3usize],
    pub aScanLen: [::std::os::raw::c_uchar; 3usize],
    pub aIrRead: [::std::os::raw::c_uchar; 3usize],
    pub aScanRead: [::std::os::raw::c_uchar; 3usize],
}
#[test]
fn bindgen_test_layout_JTAG_ID_DATA() {
    assert_eq!(
        ::std::mem::size_of::<JTAG_ID_DATA>(),
        32usize,
        concat!("Size of: ", stringify!(JTAG_ID_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<JTAG_ID_DATA>(),
        4usize,
        concat!("Alignment of ", stringify!(JTAG_ID_DATA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JTAG_ID_DATA>())).NumDevices as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JTAG_ID_DATA),
            "::",
            stringify!(NumDevices)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JTAG_ID_DATA>())).ScanLen as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JTAG_ID_DATA),
            "::",
            stringify!(ScanLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JTAG_ID_DATA>())).aId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JTAG_ID_DATA),
            "::",
            stringify!(aId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JTAG_ID_DATA>())).aScanLen as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(JTAG_ID_DATA),
            "::",
            stringify!(aScanLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JTAG_ID_DATA>())).aIrRead as *const _ as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(JTAG_ID_DATA),
            "::",
            stringify!(aIrRead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JTAG_ID_DATA>())).aScanRead as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(JTAG_ID_DATA),
            "::",
            stringify!(aScanRead)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINKARM_BP_INFO {
    pub SizeOfStruct: ::std::os::raw::c_uint,
    pub Handle: ::std::os::raw::c_uint,
    pub Addr: ::std::os::raw::c_uint,
    pub Type: ::std::os::raw::c_uint,
    pub ImpFlags: ::std::os::raw::c_uint,
    pub UseCnt: ::std::os::raw::c_uint,
    pub Internal: ::std::os::raw::c_uchar,
    pub Disabled: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_JLINKARM_BP_INFO() {
    assert_eq!(
        ::std::mem::size_of::<JLINKARM_BP_INFO>(),
        28usize,
        concat!("Size of: ", stringify!(JLINKARM_BP_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINKARM_BP_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINKARM_BP_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_BP_INFO>())).SizeOfStruct as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_BP_INFO),
            "::",
            stringify!(SizeOfStruct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_BP_INFO>())).Handle as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_BP_INFO),
            "::",
            stringify!(Handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_BP_INFO>())).Addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_BP_INFO),
            "::",
            stringify!(Addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_BP_INFO>())).Type as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_BP_INFO),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_BP_INFO>())).ImpFlags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_BP_INFO),
            "::",
            stringify!(ImpFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_BP_INFO>())).UseCnt as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_BP_INFO),
            "::",
            stringify!(UseCnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_BP_INFO>())).Internal as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_BP_INFO),
            "::",
            stringify!(Internal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_BP_INFO>())).Disabled as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_BP_INFO),
            "::",
            stringify!(Disabled)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINKARM_WP_INFO {
    pub SizeOfStruct: ::std::os::raw::c_uint,
    pub Handle: ::std::os::raw::c_uint,
    pub Addr: ::std::os::raw::c_uint,
    pub AddrMask: ::std::os::raw::c_uint,
    pub Data: ::std::os::raw::c_uint,
    pub DataMask: ::std::os::raw::c_uint,
    pub Ctrl: ::std::os::raw::c_uint,
    pub CtrlMask: ::std::os::raw::c_uint,
    pub WPUnit: ::std::os::raw::c_uchar,
    pub Internal: ::std::os::raw::c_uchar,
    pub Disabled: ::std::os::raw::c_uchar,
    pub Dummy: ::std::os::raw::c_uchar,
    pub UnitMask: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_JLINKARM_WP_INFO() {
    assert_eq!(
        ::std::mem::size_of::<JLINKARM_WP_INFO>(),
        40usize,
        concat!("Size of: ", stringify!(JLINKARM_WP_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINKARM_WP_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINKARM_WP_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_WP_INFO>())).SizeOfStruct as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_WP_INFO),
            "::",
            stringify!(SizeOfStruct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_WP_INFO>())).Handle as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_WP_INFO),
            "::",
            stringify!(Handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_WP_INFO>())).Addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_WP_INFO),
            "::",
            stringify!(Addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_WP_INFO>())).AddrMask as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_WP_INFO),
            "::",
            stringify!(AddrMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_WP_INFO>())).Data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_WP_INFO),
            "::",
            stringify!(Data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_WP_INFO>())).DataMask as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_WP_INFO),
            "::",
            stringify!(DataMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_WP_INFO>())).Ctrl as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_WP_INFO),
            "::",
            stringify!(Ctrl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_WP_INFO>())).CtrlMask as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_WP_INFO),
            "::",
            stringify!(CtrlMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_WP_INFO>())).WPUnit as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_WP_INFO),
            "::",
            stringify!(WPUnit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_WP_INFO>())).Internal as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_WP_INFO),
            "::",
            stringify!(Internal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_WP_INFO>())).Disabled as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_WP_INFO),
            "::",
            stringify!(Disabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_WP_INFO>())).Dummy as *const _ as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_WP_INFO),
            "::",
            stringify!(Dummy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_WP_INFO>())).UnitMask as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_WP_INFO),
            "::",
            stringify!(UnitMask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINKARM_DATA_EVENT {
    pub SizeOfStruct: ::std::os::raw::c_int,
    pub Type: ::std::os::raw::c_int,
    pub Addr: ::std::os::raw::c_uint,
    pub AddrMask: ::std::os::raw::c_uint,
    pub Data: ::std::os::raw::c_uint,
    pub DataMask: ::std::os::raw::c_uint,
    pub Access: ::std::os::raw::c_uchar,
    pub AccessMask: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_JLINKARM_DATA_EVENT() {
    assert_eq!(
        ::std::mem::size_of::<JLINKARM_DATA_EVENT>(),
        28usize,
        concat!("Size of: ", stringify!(JLINKARM_DATA_EVENT))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINKARM_DATA_EVENT>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINKARM_DATA_EVENT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_DATA_EVENT>())).SizeOfStruct as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_DATA_EVENT),
            "::",
            stringify!(SizeOfStruct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_DATA_EVENT>())).Type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_DATA_EVENT),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_DATA_EVENT>())).Addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_DATA_EVENT),
            "::",
            stringify!(Addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_DATA_EVENT>())).AddrMask as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_DATA_EVENT),
            "::",
            stringify!(AddrMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_DATA_EVENT>())).Data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_DATA_EVENT),
            "::",
            stringify!(Data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_DATA_EVENT>())).DataMask as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_DATA_EVENT),
            "::",
            stringify!(DataMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_DATA_EVENT>())).Access as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_DATA_EVENT),
            "::",
            stringify!(Access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_DATA_EVENT>())).AccessMask as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_DATA_EVENT),
            "::",
            stringify!(AccessMask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINKARM_MOE_INFO {
    pub HaltReason: ::std::os::raw::c_int,
    pub Index: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_JLINKARM_MOE_INFO() {
    assert_eq!(
        ::std::mem::size_of::<JLINKARM_MOE_INFO>(),
        8usize,
        concat!("Size of: ", stringify!(JLINKARM_MOE_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINKARM_MOE_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINKARM_MOE_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_MOE_INFO>())).HaltReason as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_MOE_INFO),
            "::",
            stringify!(HaltReason)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_MOE_INFO>())).Index as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_MOE_INFO),
            "::",
            stringify!(Index)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_FLASH_AREA_INFO {
    pub Addr: ::std::os::raw::c_uint,
    pub Size: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_JLINK_FLASH_AREA_INFO() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_FLASH_AREA_INFO>(),
        8usize,
        concat!("Size of: ", stringify!(JLINK_FLASH_AREA_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_FLASH_AREA_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINK_FLASH_AREA_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_FLASH_AREA_INFO>())).Addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_FLASH_AREA_INFO),
            "::",
            stringify!(Addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_FLASH_AREA_INFO>())).Size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_FLASH_AREA_INFO),
            "::",
            stringify!(Size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_RAM_AREA_INFO {
    pub Addr: ::std::os::raw::c_uint,
    pub Size: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_JLINK_RAM_AREA_INFO() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_RAM_AREA_INFO>(),
        8usize,
        concat!("Size of: ", stringify!(JLINK_RAM_AREA_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_RAM_AREA_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINK_RAM_AREA_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_RAM_AREA_INFO>())).Addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_RAM_AREA_INFO),
            "::",
            stringify!(Addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_RAM_AREA_INFO>())).Size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_RAM_AREA_INFO),
            "::",
            stringify!(Size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_FLASH_BANK_INFO {
    pub sBankName: *const ::std::os::raw::c_char,
    pub sAlgoFile: *const ::std::os::raw::c_char,
    pub AlgoType: ::std::os::raw::c_uint,
    pub BaseAddr: ::std::os::raw::c_uint,
    pub paBlockInfo: *const ::std::os::raw::c_void,
    pub pAlgoInfo: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_JLINK_FLASH_BANK_INFO() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_FLASH_BANK_INFO>(),
        40usize,
        concat!("Size of: ", stringify!(JLINK_FLASH_BANK_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_FLASH_BANK_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(JLINK_FLASH_BANK_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_FLASH_BANK_INFO>())).sBankName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_FLASH_BANK_INFO),
            "::",
            stringify!(sBankName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_FLASH_BANK_INFO>())).sAlgoFile as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_FLASH_BANK_INFO),
            "::",
            stringify!(sAlgoFile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_FLASH_BANK_INFO>())).AlgoType as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_FLASH_BANK_INFO),
            "::",
            stringify!(AlgoType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_FLASH_BANK_INFO>())).BaseAddr as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_FLASH_BANK_INFO),
            "::",
            stringify!(BaseAddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_FLASH_BANK_INFO>())).paBlockInfo as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_FLASH_BANK_INFO),
            "::",
            stringify!(paBlockInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_FLASH_BANK_INFO>())).pAlgoInfo as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_FLASH_BANK_INFO),
            "::",
            stringify!(pAlgoInfo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_FLASH_BANK_INFO_EXT {
    pub pRAMCodeTurbo_LE: *const ::std::os::raw::c_void,
    pub pRAMCodeTurbo_BE: *const ::std::os::raw::c_void,
    pub pRAMCode_LE: *const ::std::os::raw::c_void,
    pub pRAMCode_BE: *const ::std::os::raw::c_void,
    pub SizeRAMCodeTurbo_LE: ::std::os::raw::c_uint,
    pub SizeRAMCodeTurbo_BE: ::std::os::raw::c_uint,
    pub SizeRAMCode_LE: ::std::os::raw::c_uint,
    pub SizeRAMCode_BE: ::std::os::raw::c_uint,
    pub pPCode: *const ::std::os::raw::c_void,
    pub SizePCode: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_JLINK_FLASH_BANK_INFO_EXT() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_FLASH_BANK_INFO_EXT>(),
        64usize,
        concat!("Size of: ", stringify!(JLINK_FLASH_BANK_INFO_EXT))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_FLASH_BANK_INFO_EXT>(),
        8usize,
        concat!("Alignment of ", stringify!(JLINK_FLASH_BANK_INFO_EXT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_FLASH_BANK_INFO_EXT>())).pRAMCodeTurbo_LE as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_FLASH_BANK_INFO_EXT),
            "::",
            stringify!(pRAMCodeTurbo_LE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_FLASH_BANK_INFO_EXT>())).pRAMCodeTurbo_BE as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_FLASH_BANK_INFO_EXT),
            "::",
            stringify!(pRAMCodeTurbo_BE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_FLASH_BANK_INFO_EXT>())).pRAMCode_LE as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_FLASH_BANK_INFO_EXT),
            "::",
            stringify!(pRAMCode_LE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_FLASH_BANK_INFO_EXT>())).pRAMCode_BE as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_FLASH_BANK_INFO_EXT),
            "::",
            stringify!(pRAMCode_BE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_FLASH_BANK_INFO_EXT>())).SizeRAMCodeTurbo_LE as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_FLASH_BANK_INFO_EXT),
            "::",
            stringify!(SizeRAMCodeTurbo_LE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_FLASH_BANK_INFO_EXT>())).SizeRAMCodeTurbo_BE as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_FLASH_BANK_INFO_EXT),
            "::",
            stringify!(SizeRAMCodeTurbo_BE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_FLASH_BANK_INFO_EXT>())).SizeRAMCode_LE as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_FLASH_BANK_INFO_EXT),
            "::",
            stringify!(SizeRAMCode_LE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_FLASH_BANK_INFO_EXT>())).SizeRAMCode_BE as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_FLASH_BANK_INFO_EXT),
            "::",
            stringify!(SizeRAMCode_BE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_FLASH_BANK_INFO_EXT>())).pPCode as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_FLASH_BANK_INFO_EXT),
            "::",
            stringify!(pPCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_FLASH_BANK_INFO_EXT>())).SizePCode as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_FLASH_BANK_INFO_EXT),
            "::",
            stringify!(SizePCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_PCODE_INFO {
    pub pPCode: *const ::std::os::raw::c_uchar,
    pub NumBytes: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_JLINK_PCODE_INFO() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_PCODE_INFO>(),
        16usize,
        concat!("Size of: ", stringify!(JLINK_PCODE_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_PCODE_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(JLINK_PCODE_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_PCODE_INFO>())).pPCode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_PCODE_INFO),
            "::",
            stringify!(pPCode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_PCODE_INFO>())).NumBytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_PCODE_INFO),
            "::",
            stringify!(NumBytes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINKARM_DEVICE_INFO {
    pub SizeOfStruct: ::std::os::raw::c_uint,
    pub sName: *const ::std::os::raw::c_char,
    pub CoreId: ::std::os::raw::c_uint,
    pub FlashAddr: ::std::os::raw::c_uint,
    pub RAMAddr: ::std::os::raw::c_uint,
    pub EndianMode: ::std::os::raw::c_char,
    pub FlashSize: ::std::os::raw::c_uint,
    pub RAMSize: ::std::os::raw::c_uint,
    pub sManu: *const ::std::os::raw::c_char,
    pub aFlashArea: [JLINK_FLASH_AREA_INFO; 32usize],
    pub aRAMArea: [JLINK_RAM_AREA_INFO; 32usize],
    pub Core: ::std::os::raw::c_uint,
    pub aFlashBank: [JLINK_FLASH_BANK_INFO; 16usize],
    pub aPCodes: [JLINK_PCODE_INFO; 10usize],
    pub aFlashBankExt: [JLINK_FLASH_BANK_INFO_EXT; 16usize],
    pub sNote: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_JLINKARM_DEVICE_INFO() {
    assert_eq!(
        ::std::mem::size_of::<JLINKARM_DEVICE_INFO>(),
        2400usize,
        concat!("Size of: ", stringify!(JLINKARM_DEVICE_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINKARM_DEVICE_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(JLINKARM_DEVICE_INFO))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_DEVICE_INFO>())).SizeOfStruct as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_DEVICE_INFO),
            "::",
            stringify!(SizeOfStruct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_DEVICE_INFO>())).sName as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_DEVICE_INFO),
            "::",
            stringify!(sName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_DEVICE_INFO>())).CoreId as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_DEVICE_INFO),
            "::",
            stringify!(CoreId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_DEVICE_INFO>())).FlashAddr as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_DEVICE_INFO),
            "::",
            stringify!(FlashAddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_DEVICE_INFO>())).RAMAddr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_DEVICE_INFO),
            "::",
            stringify!(RAMAddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_DEVICE_INFO>())).EndianMode as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_DEVICE_INFO),
            "::",
            stringify!(EndianMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_DEVICE_INFO>())).FlashSize as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_DEVICE_INFO),
            "::",
            stringify!(FlashSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_DEVICE_INFO>())).RAMSize as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_DEVICE_INFO),
            "::",
            stringify!(RAMSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_DEVICE_INFO>())).sManu as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_DEVICE_INFO),
            "::",
            stringify!(sManu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_DEVICE_INFO>())).aFlashArea as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_DEVICE_INFO),
            "::",
            stringify!(aFlashArea)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_DEVICE_INFO>())).aRAMArea as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_DEVICE_INFO),
            "::",
            stringify!(aRAMArea)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_DEVICE_INFO>())).Core as *const _ as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_DEVICE_INFO),
            "::",
            stringify!(Core)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_DEVICE_INFO>())).aFlashBank as *const _ as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_DEVICE_INFO),
            "::",
            stringify!(aFlashBank)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_DEVICE_INFO>())).aPCodes as *const _ as usize },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_DEVICE_INFO),
            "::",
            stringify!(aPCodes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_DEVICE_INFO>())).aFlashBankExt as *const _ as usize
        },
        1368usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_DEVICE_INFO),
            "::",
            stringify!(aFlashBankExt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_DEVICE_INFO>())).sNote as *const _ as usize },
        2392usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_DEVICE_INFO),
            "::",
            stringify!(sNote)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINKARM_DEVICE_SELECT_INFO {
    pub SizeOfStruct: ::std::os::raw::c_uint,
    pub CoreIndex: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_JLINKARM_DEVICE_SELECT_INFO() {
    assert_eq!(
        ::std::mem::size_of::<JLINKARM_DEVICE_SELECT_INFO>(),
        8usize,
        concat!("Size of: ", stringify!(JLINKARM_DEVICE_SELECT_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINKARM_DEVICE_SELECT_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINKARM_DEVICE_SELECT_INFO))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_DEVICE_SELECT_INFO>())).SizeOfStruct as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_DEVICE_SELECT_INFO),
            "::",
            stringify!(SizeOfStruct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_DEVICE_SELECT_INFO>())).CoreIndex as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_DEVICE_SELECT_INFO),
            "::",
            stringify!(CoreIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINKARM_JTAG_DEVICE_CONF {
    pub SizeOfStruct: ::std::os::raw::c_uint,
    pub IRLen: ::std::os::raw::c_uint,
    pub IRPrint: ::std::os::raw::c_uint,
    pub Id: ::std::os::raw::c_uint,
    pub sName: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_JLINKARM_JTAG_DEVICE_CONF() {
    assert_eq!(
        ::std::mem::size_of::<JLINKARM_JTAG_DEVICE_CONF>(),
        24usize,
        concat!("Size of: ", stringify!(JLINKARM_JTAG_DEVICE_CONF))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINKARM_JTAG_DEVICE_CONF>(),
        8usize,
        concat!("Alignment of ", stringify!(JLINKARM_JTAG_DEVICE_CONF))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_JTAG_DEVICE_CONF>())).SizeOfStruct as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_JTAG_DEVICE_CONF),
            "::",
            stringify!(SizeOfStruct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_JTAG_DEVICE_CONF>())).IRLen as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_JTAG_DEVICE_CONF),
            "::",
            stringify!(IRLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_JTAG_DEVICE_CONF>())).IRPrint as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_JTAG_DEVICE_CONF),
            "::",
            stringify!(IRPrint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_JTAG_DEVICE_CONF>())).Id as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_JTAG_DEVICE_CONF),
            "::",
            stringify!(Id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_JTAG_DEVICE_CONF>())).sName as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_JTAG_DEVICE_CONF),
            "::",
            stringify!(sName)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINKARM_JTAG_DEVICE_INFO {
    pub sName: *const ::std::os::raw::c_char,
    pub IRLen: ::std::os::raw::c_uint,
    pub IRPrint: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_JLINKARM_JTAG_DEVICE_INFO() {
    assert_eq!(
        ::std::mem::size_of::<JLINKARM_JTAG_DEVICE_INFO>(),
        16usize,
        concat!("Size of: ", stringify!(JLINKARM_JTAG_DEVICE_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINKARM_JTAG_DEVICE_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(JLINKARM_JTAG_DEVICE_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_JTAG_DEVICE_INFO>())).sName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_JTAG_DEVICE_INFO),
            "::",
            stringify!(sName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_JTAG_DEVICE_INFO>())).IRLen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_JTAG_DEVICE_INFO),
            "::",
            stringify!(IRLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_JTAG_DEVICE_INFO>())).IRPrint as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_JTAG_DEVICE_INFO),
            "::",
            stringify!(IRPrint)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINKARM_RTCK_REACT_INFO {
    pub SizeOfStruct: ::std::os::raw::c_uint,
    pub Min: ::std::os::raw::c_uint,
    pub Max: ::std::os::raw::c_uint,
    pub Average: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_JLINKARM_RTCK_REACT_INFO() {
    assert_eq!(
        ::std::mem::size_of::<JLINKARM_RTCK_REACT_INFO>(),
        16usize,
        concat!("Size of: ", stringify!(JLINKARM_RTCK_REACT_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINKARM_RTCK_REACT_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINKARM_RTCK_REACT_INFO))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_RTCK_REACT_INFO>())).SizeOfStruct as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_RTCK_REACT_INFO),
            "::",
            stringify!(SizeOfStruct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_RTCK_REACT_INFO>())).Min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_RTCK_REACT_INFO),
            "::",
            stringify!(Min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_RTCK_REACT_INFO>())).Max as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_RTCK_REACT_INFO),
            "::",
            stringify!(Max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_RTCK_REACT_INFO>())).Average as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_RTCK_REACT_INFO),
            "::",
            stringify!(Average)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINKARM_SPEED_INFO {
    pub SizeOfStruct: ::std::os::raw::c_uint,
    pub BaseFreq: ::std::os::raw::c_uint,
    pub MinDiv: ::std::os::raw::c_ushort,
    pub SupportAdaptive: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_JLINKARM_SPEED_INFO() {
    assert_eq!(
        ::std::mem::size_of::<JLINKARM_SPEED_INFO>(),
        12usize,
        concat!("Size of: ", stringify!(JLINKARM_SPEED_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINKARM_SPEED_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINKARM_SPEED_INFO))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_SPEED_INFO>())).SizeOfStruct as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_SPEED_INFO),
            "::",
            stringify!(SizeOfStruct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_SPEED_INFO>())).BaseFreq as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_SPEED_INFO),
            "::",
            stringify!(BaseFreq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_SPEED_INFO>())).MinDiv as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_SPEED_INFO),
            "::",
            stringify!(MinDiv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_SPEED_INFO>())).SupportAdaptive as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_SPEED_INFO),
            "::",
            stringify!(SupportAdaptive)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINKARM_EMU_INFO {
    pub SizeOfStruct: ::std::os::raw::c_uint,
    pub USBAddr: ::std::os::raw::c_uint,
    pub SerialNo: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_JLINKARM_EMU_INFO() {
    assert_eq!(
        ::std::mem::size_of::<JLINKARM_EMU_INFO>(),
        12usize,
        concat!("Size of: ", stringify!(JLINKARM_EMU_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINKARM_EMU_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINKARM_EMU_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_EMU_INFO>())).SizeOfStruct as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_EMU_INFO),
            "::",
            stringify!(SizeOfStruct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_EMU_INFO>())).USBAddr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_EMU_INFO),
            "::",
            stringify!(USBAddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_EMU_INFO>())).SerialNo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_EMU_INFO),
            "::",
            stringify!(SerialNo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINKARM_EMU_CONNECT_INFO {
    pub SerialNumber: ::std::os::raw::c_uint,
    pub Connection: ::std::os::raw::c_uint,
    pub USBAddr: ::std::os::raw::c_uint,
    pub aIPAddr: [::std::os::raw::c_uchar; 16usize],
    pub Time: ::std::os::raw::c_int,
    pub Time_us: ::std::os::raw::c_ulonglong,
    pub HWVersion: ::std::os::raw::c_uint,
    pub abMACAddr: [::std::os::raw::c_uchar; 6usize],
    pub acProduct: [::std::os::raw::c_char; 32usize],
    pub acNickName: [::std::os::raw::c_char; 32usize],
    pub acFWString: [::std::os::raw::c_char; 112usize],
    pub IsDHCPAssignedIP: ::std::os::raw::c_char,
    pub IsDHCPAssignedIPIsValid: ::std::os::raw::c_char,
    pub NumIPConnections: ::std::os::raw::c_char,
    pub NumIPConnectionsIsValid: ::std::os::raw::c_char,
    pub aPadding: [::std::os::raw::c_uchar; 34usize],
}
#[test]
fn bindgen_test_layout_JLINKARM_EMU_CONNECT_INFO() {
    assert_eq!(
        ::std::mem::size_of::<JLINKARM_EMU_CONNECT_INFO>(),
        264usize,
        concat!("Size of: ", stringify!(JLINKARM_EMU_CONNECT_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINKARM_EMU_CONNECT_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(JLINKARM_EMU_CONNECT_INFO))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_EMU_CONNECT_INFO>())).SerialNumber as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_EMU_CONNECT_INFO),
            "::",
            stringify!(SerialNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_EMU_CONNECT_INFO>())).Connection as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_EMU_CONNECT_INFO),
            "::",
            stringify!(Connection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_EMU_CONNECT_INFO>())).USBAddr as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_EMU_CONNECT_INFO),
            "::",
            stringify!(USBAddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_EMU_CONNECT_INFO>())).aIPAddr as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_EMU_CONNECT_INFO),
            "::",
            stringify!(aIPAddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_EMU_CONNECT_INFO>())).Time as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_EMU_CONNECT_INFO),
            "::",
            stringify!(Time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_EMU_CONNECT_INFO>())).Time_us as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_EMU_CONNECT_INFO),
            "::",
            stringify!(Time_us)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_EMU_CONNECT_INFO>())).HWVersion as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_EMU_CONNECT_INFO),
            "::",
            stringify!(HWVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_EMU_CONNECT_INFO>())).abMACAddr as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_EMU_CONNECT_INFO),
            "::",
            stringify!(abMACAddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_EMU_CONNECT_INFO>())).acProduct as *const _ as usize
        },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_EMU_CONNECT_INFO),
            "::",
            stringify!(acProduct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_EMU_CONNECT_INFO>())).acNickName as *const _ as usize
        },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_EMU_CONNECT_INFO),
            "::",
            stringify!(acNickName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_EMU_CONNECT_INFO>())).acFWString as *const _ as usize
        },
        114usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_EMU_CONNECT_INFO),
            "::",
            stringify!(acFWString)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_EMU_CONNECT_INFO>())).IsDHCPAssignedIP as *const _
                as usize
        },
        226usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_EMU_CONNECT_INFO),
            "::",
            stringify!(IsDHCPAssignedIP)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_EMU_CONNECT_INFO>())).IsDHCPAssignedIPIsValid
                as *const _ as usize
        },
        227usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_EMU_CONNECT_INFO),
            "::",
            stringify!(IsDHCPAssignedIPIsValid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_EMU_CONNECT_INFO>())).NumIPConnections as *const _
                as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_EMU_CONNECT_INFO),
            "::",
            stringify!(NumIPConnections)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_EMU_CONNECT_INFO>())).NumIPConnectionsIsValid
                as *const _ as usize
        },
        229usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_EMU_CONNECT_INFO),
            "::",
            stringify!(NumIPConnectionsIsValid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_EMU_CONNECT_INFO>())).aPadding as *const _ as usize
        },
        230usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_EMU_CONNECT_INFO),
            "::",
            stringify!(aPadding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_EMU_CURR_CONNECT_INFO {
    pub HostIF: ::std::os::raw::c_uint,
    pub PortWEBS: ::std::os::raw::c_ushort,
    pub acPadding: [::std::os::raw::c_uchar; 250usize],
}
#[test]
fn bindgen_test_layout_JLINK_EMU_CURR_CONNECT_INFO() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_EMU_CURR_CONNECT_INFO>(),
        256usize,
        concat!("Size of: ", stringify!(JLINK_EMU_CURR_CONNECT_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_EMU_CURR_CONNECT_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINK_EMU_CURR_CONNECT_INFO))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_EMU_CURR_CONNECT_INFO>())).HostIF as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_EMU_CURR_CONNECT_INFO),
            "::",
            stringify!(HostIF)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_EMU_CURR_CONNECT_INFO>())).PortWEBS as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_EMU_CURR_CONNECT_INFO),
            "::",
            stringify!(PortWEBS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_EMU_CURR_CONNECT_INFO>())).acPadding as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_EMU_CURR_CONNECT_INFO),
            "::",
            stringify!(acPadding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINKARM_HW_STATUS {
    pub VTarget: ::std::os::raw::c_ushort,
    pub tck: ::std::os::raw::c_uchar,
    pub tdi: ::std::os::raw::c_uchar,
    pub tdo: ::std::os::raw::c_uchar,
    pub tms: ::std::os::raw::c_uchar,
    pub tres: ::std::os::raw::c_uchar,
    pub trst: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_JLINKARM_HW_STATUS() {
    assert_eq!(
        ::std::mem::size_of::<JLINKARM_HW_STATUS>(),
        8usize,
        concat!("Size of: ", stringify!(JLINKARM_HW_STATUS))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINKARM_HW_STATUS>(),
        2usize,
        concat!("Alignment of ", stringify!(JLINKARM_HW_STATUS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_HW_STATUS>())).VTarget as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_HW_STATUS),
            "::",
            stringify!(VTarget)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_HW_STATUS>())).tck as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_HW_STATUS),
            "::",
            stringify!(tck)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_HW_STATUS>())).tdi as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_HW_STATUS),
            "::",
            stringify!(tdi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_HW_STATUS>())).tdo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_HW_STATUS),
            "::",
            stringify!(tdo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_HW_STATUS>())).tms as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_HW_STATUS),
            "::",
            stringify!(tms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_HW_STATUS>())).tres as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_HW_STATUS),
            "::",
            stringify!(tres)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_HW_STATUS>())).trst as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_HW_STATUS),
            "::",
            stringify!(trst)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINKARM_TRACE_DATA {
    pub PipeStat: ::std::os::raw::c_uchar,
    pub Sync: ::std::os::raw::c_uchar,
    pub Packet: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_JLINKARM_TRACE_DATA() {
    assert_eq!(
        ::std::mem::size_of::<JLINKARM_TRACE_DATA>(),
        4usize,
        concat!("Size of: ", stringify!(JLINKARM_TRACE_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINKARM_TRACE_DATA>(),
        2usize,
        concat!("Alignment of ", stringify!(JLINKARM_TRACE_DATA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_TRACE_DATA>())).PipeStat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_TRACE_DATA),
            "::",
            stringify!(PipeStat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_TRACE_DATA>())).Sync as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_TRACE_DATA),
            "::",
            stringify!(Sync)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_TRACE_DATA>())).Packet as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_TRACE_DATA),
            "::",
            stringify!(Packet)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINKARM_TRACE_REGION_PROPS {
    pub SizeofStruct: ::std::os::raw::c_uint,
    pub RegionIndex: ::std::os::raw::c_uint,
    pub NumSamples: ::std::os::raw::c_uint,
    pub Off: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_JLINKARM_TRACE_REGION_PROPS() {
    assert_eq!(
        ::std::mem::size_of::<JLINKARM_TRACE_REGION_PROPS>(),
        16usize,
        concat!("Size of: ", stringify!(JLINKARM_TRACE_REGION_PROPS))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINKARM_TRACE_REGION_PROPS>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINKARM_TRACE_REGION_PROPS))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_TRACE_REGION_PROPS>())).SizeofStruct as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_TRACE_REGION_PROPS),
            "::",
            stringify!(SizeofStruct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_TRACE_REGION_PROPS>())).RegionIndex as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_TRACE_REGION_PROPS),
            "::",
            stringify!(RegionIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_TRACE_REGION_PROPS>())).NumSamples as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_TRACE_REGION_PROPS),
            "::",
            stringify!(NumSamples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_TRACE_REGION_PROPS>())).Off as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_TRACE_REGION_PROPS),
            "::",
            stringify!(Off)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINKARM_TRACE_REGION_PROPS_EX {
    pub SizeofStruct: ::std::os::raw::c_uint,
    pub RegionIndex: ::std::os::raw::c_uint,
    pub NumSamples: ::std::os::raw::c_uint,
    pub Off: ::std::os::raw::c_uint,
    pub RegionCnt: ::std::os::raw::c_uint,
    pub Dummy: ::std::os::raw::c_uint,
    pub TimeStamp: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_JLINKARM_TRACE_REGION_PROPS_EX() {
    assert_eq!(
        ::std::mem::size_of::<JLINKARM_TRACE_REGION_PROPS_EX>(),
        32usize,
        concat!("Size of: ", stringify!(JLINKARM_TRACE_REGION_PROPS_EX))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINKARM_TRACE_REGION_PROPS_EX>(),
        8usize,
        concat!("Alignment of ", stringify!(JLINKARM_TRACE_REGION_PROPS_EX))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_TRACE_REGION_PROPS_EX>())).SizeofStruct as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_TRACE_REGION_PROPS_EX),
            "::",
            stringify!(SizeofStruct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_TRACE_REGION_PROPS_EX>())).RegionIndex as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_TRACE_REGION_PROPS_EX),
            "::",
            stringify!(RegionIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_TRACE_REGION_PROPS_EX>())).NumSamples as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_TRACE_REGION_PROPS_EX),
            "::",
            stringify!(NumSamples)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_TRACE_REGION_PROPS_EX>())).Off as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_TRACE_REGION_PROPS_EX),
            "::",
            stringify!(Off)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_TRACE_REGION_PROPS_EX>())).RegionCnt as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_TRACE_REGION_PROPS_EX),
            "::",
            stringify!(RegionCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_TRACE_REGION_PROPS_EX>())).Dummy as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_TRACE_REGION_PROPS_EX),
            "::",
            stringify!(Dummy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_TRACE_REGION_PROPS_EX>())).TimeStamp as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_TRACE_REGION_PROPS_EX),
            "::",
            stringify!(TimeStamp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINKARM_SWO_START_INFO {
    pub SizeofStruct: ::std::os::raw::c_uint,
    pub Interface: ::std::os::raw::c_uint,
    pub Speed: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_JLINKARM_SWO_START_INFO() {
    assert_eq!(
        ::std::mem::size_of::<JLINKARM_SWO_START_INFO>(),
        12usize,
        concat!("Size of: ", stringify!(JLINKARM_SWO_START_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINKARM_SWO_START_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINKARM_SWO_START_INFO))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_SWO_START_INFO>())).SizeofStruct as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_SWO_START_INFO),
            "::",
            stringify!(SizeofStruct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_SWO_START_INFO>())).Interface as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_SWO_START_INFO),
            "::",
            stringify!(Interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_SWO_START_INFO>())).Speed as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_SWO_START_INFO),
            "::",
            stringify!(Speed)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINKARM_SWO_SPEED_INFO {
    pub SizeofStruct: ::std::os::raw::c_uint,
    pub Interface: ::std::os::raw::c_uint,
    pub BaseFreq: ::std::os::raw::c_uint,
    pub MinDiv: ::std::os::raw::c_uint,
    pub MaxDiv: ::std::os::raw::c_uint,
    pub MinPrescale: ::std::os::raw::c_uint,
    pub MaxPrescale: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_JLINKARM_SWO_SPEED_INFO() {
    assert_eq!(
        ::std::mem::size_of::<JLINKARM_SWO_SPEED_INFO>(),
        28usize,
        concat!("Size of: ", stringify!(JLINKARM_SWO_SPEED_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINKARM_SWO_SPEED_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINKARM_SWO_SPEED_INFO))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_SWO_SPEED_INFO>())).SizeofStruct as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_SWO_SPEED_INFO),
            "::",
            stringify!(SizeofStruct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_SWO_SPEED_INFO>())).Interface as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_SWO_SPEED_INFO),
            "::",
            stringify!(Interface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_SWO_SPEED_INFO>())).BaseFreq as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_SWO_SPEED_INFO),
            "::",
            stringify!(BaseFreq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_SWO_SPEED_INFO>())).MinDiv as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_SWO_SPEED_INFO),
            "::",
            stringify!(MinDiv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_SWO_SPEED_INFO>())).MaxDiv as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_SWO_SPEED_INFO),
            "::",
            stringify!(MaxDiv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_SWO_SPEED_INFO>())).MinPrescale as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_SWO_SPEED_INFO),
            "::",
            stringify!(MinPrescale)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_SWO_SPEED_INFO>())).MaxPrescale as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_SWO_SPEED_INFO),
            "::",
            stringify!(MaxPrescale)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_SPI_COMMAND_DESC {
    pub Command: ::std::os::raw::c_uint,
    pub pDataDown: *const ::std::os::raw::c_uchar,
    pub pDataUp: *mut ::std::os::raw::c_uchar,
    pub NumBits: ::std::os::raw::c_uint,
    pub Flags: ::std::os::raw::c_uint,
    pub pCmdArgs: *mut ::std::os::raw::c_uchar,
    pub NumBytesArgs: ::std::os::raw::c_uint,
    pub Result: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_JLINK_SPI_COMMAND_DESC() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_SPI_COMMAND_DESC>(),
        48usize,
        concat!("Size of: ", stringify!(JLINK_SPI_COMMAND_DESC))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_SPI_COMMAND_DESC>(),
        8usize,
        concat!("Alignment of ", stringify!(JLINK_SPI_COMMAND_DESC))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_SPI_COMMAND_DESC>())).Command as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_SPI_COMMAND_DESC),
            "::",
            stringify!(Command)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_SPI_COMMAND_DESC>())).pDataDown as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_SPI_COMMAND_DESC),
            "::",
            stringify!(pDataDown)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_SPI_COMMAND_DESC>())).pDataUp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_SPI_COMMAND_DESC),
            "::",
            stringify!(pDataUp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_SPI_COMMAND_DESC>())).NumBits as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_SPI_COMMAND_DESC),
            "::",
            stringify!(NumBits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_SPI_COMMAND_DESC>())).Flags as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_SPI_COMMAND_DESC),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_SPI_COMMAND_DESC>())).pCmdArgs as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_SPI_COMMAND_DESC),
            "::",
            stringify!(pCmdArgs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_SPI_COMMAND_DESC>())).NumBytesArgs as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_SPI_COMMAND_DESC),
            "::",
            stringify!(NumBytesArgs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_SPI_COMMAND_DESC>())).Result as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_SPI_COMMAND_DESC),
            "::",
            stringify!(Result)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_WRITE_MEM_DESC {
    pub Addr: ::std::os::raw::c_uint,
    pub NumBytes: ::std::os::raw::c_uint,
    pub pData: *mut ::std::os::raw::c_uchar,
    pub pStatus: *mut ::std::os::raw::c_uchar,
    pub AccessWidth: ::std::os::raw::c_uint,
    pub Flags: ::std::os::raw::c_uint,
    pub Result: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_JLINK_WRITE_MEM_DESC() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_WRITE_MEM_DESC>(),
        40usize,
        concat!("Size of: ", stringify!(JLINK_WRITE_MEM_DESC))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_WRITE_MEM_DESC>(),
        8usize,
        concat!("Alignment of ", stringify!(JLINK_WRITE_MEM_DESC))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_WRITE_MEM_DESC>())).Addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_WRITE_MEM_DESC),
            "::",
            stringify!(Addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_WRITE_MEM_DESC>())).NumBytes as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_WRITE_MEM_DESC),
            "::",
            stringify!(NumBytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_WRITE_MEM_DESC>())).pData as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_WRITE_MEM_DESC),
            "::",
            stringify!(pData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_WRITE_MEM_DESC>())).pStatus as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_WRITE_MEM_DESC),
            "::",
            stringify!(pStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_WRITE_MEM_DESC>())).AccessWidth as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_WRITE_MEM_DESC),
            "::",
            stringify!(AccessWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_WRITE_MEM_DESC>())).Flags as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_WRITE_MEM_DESC),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_WRITE_MEM_DESC>())).Result as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_WRITE_MEM_DESC),
            "::",
            stringify!(Result)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_CORESIGHT_APDP_ACC_DESC {
    pub Data: ::std::os::raw::c_uint,
    pub Mask: ::std::os::raw::c_uint,
    pub CompVal: ::std::os::raw::c_uint,
    pub Status: ::std::os::raw::c_int,
    pub TimeoutMsReadUntil: ::std::os::raw::c_int,
    pub RegIndex: ::std::os::raw::c_uchar,
    pub APnDP: ::std::os::raw::c_uchar,
    pub RnW: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_JLINK_CORESIGHT_APDP_ACC_DESC() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_CORESIGHT_APDP_ACC_DESC>(),
        24usize,
        concat!("Size of: ", stringify!(JLINK_CORESIGHT_APDP_ACC_DESC))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_CORESIGHT_APDP_ACC_DESC>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINK_CORESIGHT_APDP_ACC_DESC))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_CORESIGHT_APDP_ACC_DESC>())).Data as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_CORESIGHT_APDP_ACC_DESC),
            "::",
            stringify!(Data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_CORESIGHT_APDP_ACC_DESC>())).Mask as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_CORESIGHT_APDP_ACC_DESC),
            "::",
            stringify!(Mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_CORESIGHT_APDP_ACC_DESC>())).CompVal as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_CORESIGHT_APDP_ACC_DESC),
            "::",
            stringify!(CompVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_CORESIGHT_APDP_ACC_DESC>())).Status as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_CORESIGHT_APDP_ACC_DESC),
            "::",
            stringify!(Status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_CORESIGHT_APDP_ACC_DESC>())).TimeoutMsReadUntil as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_CORESIGHT_APDP_ACC_DESC),
            "::",
            stringify!(TimeoutMsReadUntil)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_CORESIGHT_APDP_ACC_DESC>())).RegIndex as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_CORESIGHT_APDP_ACC_DESC),
            "::",
            stringify!(RegIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_CORESIGHT_APDP_ACC_DESC>())).APnDP as *const _ as usize
        },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_CORESIGHT_APDP_ACC_DESC),
            "::",
            stringify!(APnDP)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_CORESIGHT_APDP_ACC_DESC>())).RnW as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_CORESIGHT_APDP_ACC_DESC),
            "::",
            stringify!(RnW)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_POWERTRACE_DATA_ITEM {
    pub RefValue: ::std::os::raw::c_uint,
    pub Data: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_JLINK_POWERTRACE_DATA_ITEM() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_POWERTRACE_DATA_ITEM>(),
        8usize,
        concat!("Size of: ", stringify!(JLINK_POWERTRACE_DATA_ITEM))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_POWERTRACE_DATA_ITEM>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINK_POWERTRACE_DATA_ITEM))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_POWERTRACE_DATA_ITEM>())).RefValue as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_POWERTRACE_DATA_ITEM),
            "::",
            stringify!(RefValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_POWERTRACE_DATA_ITEM>())).Data as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_POWERTRACE_DATA_ITEM),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_POWERTRACE_SETUP {
    pub SizeOfStruct: ::std::os::raw::c_int,
    pub ChannelMask: ::std::os::raw::c_uint,
    pub SampleFreq: ::std::os::raw::c_uint,
    pub RefSelect: ::std::os::raw::c_int,
    pub EnableCond: ::std::os::raw::c_int,
    pub Flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_JLINK_POWERTRACE_SETUP() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_POWERTRACE_SETUP>(),
        24usize,
        concat!("Size of: ", stringify!(JLINK_POWERTRACE_SETUP))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_POWERTRACE_SETUP>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINK_POWERTRACE_SETUP))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_POWERTRACE_SETUP>())).SizeOfStruct as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_POWERTRACE_SETUP),
            "::",
            stringify!(SizeOfStruct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_POWERTRACE_SETUP>())).ChannelMask as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_POWERTRACE_SETUP),
            "::",
            stringify!(ChannelMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_POWERTRACE_SETUP>())).SampleFreq as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_POWERTRACE_SETUP),
            "::",
            stringify!(SampleFreq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_POWERTRACE_SETUP>())).RefSelect as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_POWERTRACE_SETUP),
            "::",
            stringify!(RefSelect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_POWERTRACE_SETUP>())).EnableCond as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_POWERTRACE_SETUP),
            "::",
            stringify!(EnableCond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_POWERTRACE_SETUP>())).Flags as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_POWERTRACE_SETUP),
            "::",
            stringify!(Flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_POWERTRACE_CAPS {
    pub SizeOfStruct: ::std::os::raw::c_int,
    pub ChannelMask: ::std::os::raw::c_uint,
    pub Flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_JLINK_POWERTRACE_CAPS() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_POWERTRACE_CAPS>(),
        12usize,
        concat!("Size of: ", stringify!(JLINK_POWERTRACE_CAPS))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_POWERTRACE_CAPS>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINK_POWERTRACE_CAPS))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_POWERTRACE_CAPS>())).SizeOfStruct as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_POWERTRACE_CAPS),
            "::",
            stringify!(SizeOfStruct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_POWERTRACE_CAPS>())).ChannelMask as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_POWERTRACE_CAPS),
            "::",
            stringify!(ChannelMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_POWERTRACE_CAPS>())).Flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_POWERTRACE_CAPS),
            "::",
            stringify!(Flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_POWERTRACE_CHANNEL_CAPS_OUT {
    pub SizeOfStruct: ::std::os::raw::c_int,
    pub BaseFreq: ::std::os::raw::c_uint,
    pub MinDiv: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_JLINK_POWERTRACE_CHANNEL_CAPS_OUT() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_POWERTRACE_CHANNEL_CAPS_OUT>(),
        12usize,
        concat!("Size of: ", stringify!(JLINK_POWERTRACE_CHANNEL_CAPS_OUT))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_POWERTRACE_CHANNEL_CAPS_OUT>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(JLINK_POWERTRACE_CHANNEL_CAPS_OUT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_POWERTRACE_CHANNEL_CAPS_OUT>())).SizeOfStruct as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_POWERTRACE_CHANNEL_CAPS_OUT),
            "::",
            stringify!(SizeOfStruct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_POWERTRACE_CHANNEL_CAPS_OUT>())).BaseFreq as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_POWERTRACE_CHANNEL_CAPS_OUT),
            "::",
            stringify!(BaseFreq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_POWERTRACE_CHANNEL_CAPS_OUT>())).MinDiv as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_POWERTRACE_CHANNEL_CAPS_OUT),
            "::",
            stringify!(MinDiv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_POWERTRACE_CHANNEL_CAPS_IN {
    pub SizeOfStruct: ::std::os::raw::c_int,
    pub ChannelMask: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_JLINK_POWERTRACE_CHANNEL_CAPS_IN() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_POWERTRACE_CHANNEL_CAPS_IN>(),
        8usize,
        concat!("Size of: ", stringify!(JLINK_POWERTRACE_CHANNEL_CAPS_IN))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_POWERTRACE_CHANNEL_CAPS_IN>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(JLINK_POWERTRACE_CHANNEL_CAPS_IN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_POWERTRACE_CHANNEL_CAPS_IN>())).SizeOfStruct as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_POWERTRACE_CHANNEL_CAPS_IN),
            "::",
            stringify!(SizeOfStruct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_POWERTRACE_CHANNEL_CAPS_IN>())).ChannelMask as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_POWERTRACE_CHANNEL_CAPS_IN),
            "::",
            stringify!(ChannelMask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_RTTERMINAL_START {
    pub ConfigBlockAddress: ::std::os::raw::c_uint,
    pub Dummy0: ::std::os::raw::c_uint,
    pub Dummy1: ::std::os::raw::c_uint,
    pub Dummy2: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_JLINK_RTTERMINAL_START() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_RTTERMINAL_START>(),
        16usize,
        concat!("Size of: ", stringify!(JLINK_RTTERMINAL_START))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_RTTERMINAL_START>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINK_RTTERMINAL_START))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_RTTERMINAL_START>())).ConfigBlockAddress as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_RTTERMINAL_START),
            "::",
            stringify!(ConfigBlockAddress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_RTTERMINAL_START>())).Dummy0 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_RTTERMINAL_START),
            "::",
            stringify!(Dummy0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_RTTERMINAL_START>())).Dummy1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_RTTERMINAL_START),
            "::",
            stringify!(Dummy1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_RTTERMINAL_START>())).Dummy2 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_RTTERMINAL_START),
            "::",
            stringify!(Dummy2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_RTTERMINAL_STOP {
    pub InvalidateTargetCB: ::std::os::raw::c_uchar,
    pub acDummy: [::std::os::raw::c_uchar; 3usize],
    pub Dummy0: ::std::os::raw::c_uint,
    pub Dummy1: ::std::os::raw::c_uint,
    pub Dummy2: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_JLINK_RTTERMINAL_STOP() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_RTTERMINAL_STOP>(),
        16usize,
        concat!("Size of: ", stringify!(JLINK_RTTERMINAL_STOP))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_RTTERMINAL_STOP>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINK_RTTERMINAL_STOP))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_RTTERMINAL_STOP>())).InvalidateTargetCB as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_RTTERMINAL_STOP),
            "::",
            stringify!(InvalidateTargetCB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_RTTERMINAL_STOP>())).acDummy as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_RTTERMINAL_STOP),
            "::",
            stringify!(acDummy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_RTTERMINAL_STOP>())).Dummy0 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_RTTERMINAL_STOP),
            "::",
            stringify!(Dummy0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_RTTERMINAL_STOP>())).Dummy1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_RTTERMINAL_STOP),
            "::",
            stringify!(Dummy1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_RTTERMINAL_STOP>())).Dummy2 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_RTTERMINAL_STOP),
            "::",
            stringify!(Dummy2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_RTTERMINAL_BUFDESC {
    pub BufferIndex: ::std::os::raw::c_int,
    pub Direction: ::std::os::raw::c_uint,
    pub acName: [::std::os::raw::c_char; 32usize],
    pub SizeOfBuffer: ::std::os::raw::c_uint,
    pub Flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_JLINK_RTTERMINAL_BUFDESC() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_RTTERMINAL_BUFDESC>(),
        48usize,
        concat!("Size of: ", stringify!(JLINK_RTTERMINAL_BUFDESC))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_RTTERMINAL_BUFDESC>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINK_RTTERMINAL_BUFDESC))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_RTTERMINAL_BUFDESC>())).BufferIndex as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_RTTERMINAL_BUFDESC),
            "::",
            stringify!(BufferIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_RTTERMINAL_BUFDESC>())).Direction as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_RTTERMINAL_BUFDESC),
            "::",
            stringify!(Direction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_RTTERMINAL_BUFDESC>())).acName as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_RTTERMINAL_BUFDESC),
            "::",
            stringify!(acName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_RTTERMINAL_BUFDESC>())).SizeOfBuffer as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_RTTERMINAL_BUFDESC),
            "::",
            stringify!(SizeOfBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_RTTERMINAL_BUFDESC>())).Flags as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_RTTERMINAL_BUFDESC),
            "::",
            stringify!(Flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_RTTERMINAL_STATUS {
    pub NumBytesTransferred: ::std::os::raw::c_uint,
    pub NumBytesRead: ::std::os::raw::c_uint,
    pub HostOverflowCount: ::std::os::raw::c_int,
    pub IsRunning: ::std::os::raw::c_int,
    pub NumUpBuffers: ::std::os::raw::c_int,
    pub NumDownBuffers: ::std::os::raw::c_int,
    pub OverflowMask: ::std::os::raw::c_uint,
    pub Dummy1: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_JLINK_RTTERMINAL_STATUS() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_RTTERMINAL_STATUS>(),
        32usize,
        concat!("Size of: ", stringify!(JLINK_RTTERMINAL_STATUS))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_RTTERMINAL_STATUS>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINK_RTTERMINAL_STATUS))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_RTTERMINAL_STATUS>())).NumBytesTransferred as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_RTTERMINAL_STATUS),
            "::",
            stringify!(NumBytesTransferred)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_RTTERMINAL_STATUS>())).NumBytesRead as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_RTTERMINAL_STATUS),
            "::",
            stringify!(NumBytesRead)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_RTTERMINAL_STATUS>())).HostOverflowCount as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_RTTERMINAL_STATUS),
            "::",
            stringify!(HostOverflowCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_RTTERMINAL_STATUS>())).IsRunning as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_RTTERMINAL_STATUS),
            "::",
            stringify!(IsRunning)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_RTTERMINAL_STATUS>())).NumUpBuffers as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_RTTERMINAL_STATUS),
            "::",
            stringify!(NumUpBuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_RTTERMINAL_STATUS>())).NumDownBuffers as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_RTTERMINAL_STATUS),
            "::",
            stringify!(NumDownBuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_RTTERMINAL_STATUS>())).OverflowMask as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_RTTERMINAL_STATUS),
            "::",
            stringify!(OverflowMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_RTTERMINAL_STATUS>())).Dummy1 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_RTTERMINAL_STATUS),
            "::",
            stringify!(Dummy1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_HSS_MEM_BLOCK_DESC {
    pub Addr: ::std::os::raw::c_uint,
    pub NumBytes: ::std::os::raw::c_uint,
    pub Flags: ::std::os::raw::c_uint,
    pub Dummy: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_JLINK_HSS_MEM_BLOCK_DESC() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_HSS_MEM_BLOCK_DESC>(),
        16usize,
        concat!("Size of: ", stringify!(JLINK_HSS_MEM_BLOCK_DESC))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_HSS_MEM_BLOCK_DESC>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINK_HSS_MEM_BLOCK_DESC))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_HSS_MEM_BLOCK_DESC>())).Addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_HSS_MEM_BLOCK_DESC),
            "::",
            stringify!(Addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_HSS_MEM_BLOCK_DESC>())).NumBytes as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_HSS_MEM_BLOCK_DESC),
            "::",
            stringify!(NumBytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_HSS_MEM_BLOCK_DESC>())).Flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_HSS_MEM_BLOCK_DESC),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_HSS_MEM_BLOCK_DESC>())).Dummy as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_HSS_MEM_BLOCK_DESC),
            "::",
            stringify!(Dummy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_HSS_CAPS {
    pub MaxBlocks: ::std::os::raw::c_uint,
    pub MaxFreq: ::std::os::raw::c_uint,
    pub Caps: ::std::os::raw::c_uint,
    pub aDummy: [::std::os::raw::c_uint; 5usize],
}
#[test]
fn bindgen_test_layout_JLINK_HSS_CAPS() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_HSS_CAPS>(),
        32usize,
        concat!("Size of: ", stringify!(JLINK_HSS_CAPS))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_HSS_CAPS>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINK_HSS_CAPS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_HSS_CAPS>())).MaxBlocks as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_HSS_CAPS),
            "::",
            stringify!(MaxBlocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_HSS_CAPS>())).MaxFreq as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_HSS_CAPS),
            "::",
            stringify!(MaxFreq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_HSS_CAPS>())).Caps as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_HSS_CAPS),
            "::",
            stringify!(Caps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_HSS_CAPS>())).aDummy as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_HSS_CAPS),
            "::",
            stringify!(aDummy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_EMU_GPIO_DESC {
    pub acName: [::std::os::raw::c_char; 32usize],
    pub Caps: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_JLINK_EMU_GPIO_DESC() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_EMU_GPIO_DESC>(),
        36usize,
        concat!("Size of: ", stringify!(JLINK_EMU_GPIO_DESC))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_EMU_GPIO_DESC>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINK_EMU_GPIO_DESC))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_EMU_GPIO_DESC>())).acName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_EMU_GPIO_DESC),
            "::",
            stringify!(acName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_EMU_GPIO_DESC>())).Caps as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_EMU_GPIO_DESC),
            "::",
            stringify!(Caps)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINKARM_EMU_PCODE_STATUS_INFO {
    pub PCodeStat: ::std::os::raw::c_uint,
    pub S32_PC: ::std::os::raw::c_uint,
    pub S32_R0: ::std::os::raw::c_uint,
    pub S32_SP: ::std::os::raw::c_uint,
    pub S32_StatusReg: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_JLINKARM_EMU_PCODE_STATUS_INFO() {
    assert_eq!(
        ::std::mem::size_of::<JLINKARM_EMU_PCODE_STATUS_INFO>(),
        20usize,
        concat!("Size of: ", stringify!(JLINKARM_EMU_PCODE_STATUS_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINKARM_EMU_PCODE_STATUS_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINKARM_EMU_PCODE_STATUS_INFO))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_EMU_PCODE_STATUS_INFO>())).PCodeStat as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_EMU_PCODE_STATUS_INFO),
            "::",
            stringify!(PCodeStat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_EMU_PCODE_STATUS_INFO>())).S32_PC as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_EMU_PCODE_STATUS_INFO),
            "::",
            stringify!(S32_PC)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_EMU_PCODE_STATUS_INFO>())).S32_R0 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_EMU_PCODE_STATUS_INFO),
            "::",
            stringify!(S32_R0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_EMU_PCODE_STATUS_INFO>())).S32_SP as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_EMU_PCODE_STATUS_INFO),
            "::",
            stringify!(S32_SP)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_EMU_PCODE_STATUS_INFO>())).S32_StatusReg as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_EMU_PCODE_STATUS_INFO),
            "::",
            stringify!(S32_StatusReg)
        )
    );
}
pub const JLINKARM_FLASH_EVENT_JLINKARM_FLASH_EVENT_ERASE: JLINKARM_FLASH_EVENT = 0;
pub const JLINKARM_FLASH_EVENT_JLINKARM_FLASH_EVENT_PROGRAM: JLINKARM_FLASH_EVENT = 1;
pub const JLINKARM_FLASH_EVENT_JLINKARM_FLASH_EVENT_VERIFY: JLINKARM_FLASH_EVENT = 2;
pub type JLINKARM_FLASH_EVENT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINKARM_FLASH_NOTIFY_INFO {
    pub SizeofStruct: ::std::os::raw::c_uint,
    pub Addr: ::std::os::raw::c_uint,
    pub NumBytesTotal: ::std::os::raw::c_uint,
    pub NumBytesCurrent: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_JLINKARM_FLASH_NOTIFY_INFO() {
    assert_eq!(
        ::std::mem::size_of::<JLINKARM_FLASH_NOTIFY_INFO>(),
        16usize,
        concat!("Size of: ", stringify!(JLINKARM_FLASH_NOTIFY_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINKARM_FLASH_NOTIFY_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINKARM_FLASH_NOTIFY_INFO))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_FLASH_NOTIFY_INFO>())).SizeofStruct as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_FLASH_NOTIFY_INFO),
            "::",
            stringify!(SizeofStruct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_FLASH_NOTIFY_INFO>())).Addr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_FLASH_NOTIFY_INFO),
            "::",
            stringify!(Addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_FLASH_NOTIFY_INFO>())).NumBytesTotal as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_FLASH_NOTIFY_INFO),
            "::",
            stringify!(NumBytesTotal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINKARM_FLASH_NOTIFY_INFO>())).NumBytesCurrent as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_FLASH_NOTIFY_INFO),
            "::",
            stringify!(NumBytesCurrent)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_MEM_ZONE_INFO {
    pub sName: *const ::std::os::raw::c_char,
    pub sDesc: *const ::std::os::raw::c_char,
    pub VirtAddr: ::std::os::raw::c_ulonglong,
    pub abDummy: [::std::os::raw::c_uchar; 16usize],
}
#[test]
fn bindgen_test_layout_JLINK_MEM_ZONE_INFO() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_MEM_ZONE_INFO>(),
        40usize,
        concat!("Size of: ", stringify!(JLINK_MEM_ZONE_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_MEM_ZONE_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(JLINK_MEM_ZONE_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_MEM_ZONE_INFO>())).sName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_MEM_ZONE_INFO),
            "::",
            stringify!(sName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_MEM_ZONE_INFO>())).sDesc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_MEM_ZONE_INFO),
            "::",
            stringify!(sDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_MEM_ZONE_INFO>())).VirtAddr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_MEM_ZONE_INFO),
            "::",
            stringify!(VirtAddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_MEM_ZONE_INFO>())).abDummy as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_MEM_ZONE_INFO),
            "::",
            stringify!(abDummy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_DISASSEMBLY_INFO {
    pub SizeOfStruct: ::std::os::raw::c_uint,
    pub Mode: ::std::os::raw::c_uchar,
    pub Condition: ::std::os::raw::c_uchar,
    pub aDummy: [::std::os::raw::c_uchar; 2usize],
}
#[test]
fn bindgen_test_layout_JLINK_DISASSEMBLY_INFO() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_DISASSEMBLY_INFO>(),
        8usize,
        concat!("Size of: ", stringify!(JLINK_DISASSEMBLY_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_DISASSEMBLY_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINK_DISASSEMBLY_INFO))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_DISASSEMBLY_INFO>())).SizeOfStruct as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_DISASSEMBLY_INFO),
            "::",
            stringify!(SizeOfStruct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_DISASSEMBLY_INFO>())).Mode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_DISASSEMBLY_INFO),
            "::",
            stringify!(Mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_DISASSEMBLY_INFO>())).Condition as *const _ as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_DISASSEMBLY_INFO),
            "::",
            stringify!(Condition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINK_DISASSEMBLY_INFO>())).aDummy as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_DISASSEMBLY_INFO),
            "::",
            stringify!(aDummy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_DISASSEMBLY_INST_INFO {
    pub Size: ::std::os::raw::c_uchar,
    pub IsBranch: ::std::os::raw::c_uchar,
    pub IsCall: ::std::os::raw::c_uchar,
    pub IsMemAccess: ::std::os::raw::c_uchar,
    pub IsFixedAddr: ::std::os::raw::c_uchar,
    pub IsConditional: ::std::os::raw::c_uchar,
    pub ITBlock: ::std::os::raw::c_uchar,
    pub abAddr: [::std::os::raw::c_uchar; 8usize],
    pub aDummy: [::std::os::raw::c_uchar; 1usize],
}
#[test]
fn bindgen_test_layout_JLINK_DISASSEMBLY_INST_INFO() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_DISASSEMBLY_INST_INFO>(),
        16usize,
        concat!("Size of: ", stringify!(JLINK_DISASSEMBLY_INST_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_DISASSEMBLY_INST_INFO>(),
        1usize,
        concat!("Alignment of ", stringify!(JLINK_DISASSEMBLY_INST_INFO))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_DISASSEMBLY_INST_INFO>())).Size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_DISASSEMBLY_INST_INFO),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_DISASSEMBLY_INST_INFO>())).IsBranch as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_DISASSEMBLY_INST_INFO),
            "::",
            stringify!(IsBranch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_DISASSEMBLY_INST_INFO>())).IsCall as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_DISASSEMBLY_INST_INFO),
            "::",
            stringify!(IsCall)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_DISASSEMBLY_INST_INFO>())).IsMemAccess as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_DISASSEMBLY_INST_INFO),
            "::",
            stringify!(IsMemAccess)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_DISASSEMBLY_INST_INFO>())).IsFixedAddr as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_DISASSEMBLY_INST_INFO),
            "::",
            stringify!(IsFixedAddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_DISASSEMBLY_INST_INFO>())).IsConditional as *const _
                as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_DISASSEMBLY_INST_INFO),
            "::",
            stringify!(IsConditional)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_DISASSEMBLY_INST_INFO>())).ITBlock as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_DISASSEMBLY_INST_INFO),
            "::",
            stringify!(ITBlock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_DISASSEMBLY_INST_INFO>())).abAddr as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_DISASSEMBLY_INST_INFO),
            "::",
            stringify!(abAddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_DISASSEMBLY_INST_INFO>())).aDummy as *const _ as usize
        },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_DISASSEMBLY_INST_INFO),
            "::",
            stringify!(aDummy)
        )
    );
}
pub type JLINK_DISASSEMBLY_FUNC_GET_INST_INFO = ::std::option::Option<
    unsafe extern "C" fn(
        pInfoOut: *mut JLINK_DISASSEMBLY_INST_INFO,
        pData: *const ::std::os::raw::c_uchar,
        NumBytes: ::std::os::raw::c_uint,
        CPUMode: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int,
>;
pub type JLINK_DISASSEMBLY_FUNC_DISASSEMBLE_BUFFER = ::std::option::Option<
    unsafe extern "C" fn(
        pInst: *mut ::std::os::raw::c_char,
        InstSize: ::std::os::raw::c_uint,
        pBuffer: *const ::std::os::raw::c_void,
        BufferSize: ::std::os::raw::c_uint,
        Addr: ::std::os::raw::c_uint,
        CPUMode: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_RAWTRACE_BIST_ERR_BUF_DESC {
    pub FailAddr: ::std::os::raw::c_uint,
    pub DataExpected: ::std::os::raw::c_uint,
    pub DataRead: ::std::os::raw::c_uint,
    pub DataReRead: ::std::os::raw::c_uint,
    pub aReserved: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout_JLINK_RAWTRACE_BIST_ERR_BUF_DESC() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_RAWTRACE_BIST_ERR_BUF_DESC>(),
        32usize,
        concat!("Size of: ", stringify!(JLINK_RAWTRACE_BIST_ERR_BUF_DESC))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_RAWTRACE_BIST_ERR_BUF_DESC>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(JLINK_RAWTRACE_BIST_ERR_BUF_DESC)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_RAWTRACE_BIST_ERR_BUF_DESC>())).FailAddr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_RAWTRACE_BIST_ERR_BUF_DESC),
            "::",
            stringify!(FailAddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_RAWTRACE_BIST_ERR_BUF_DESC>())).DataExpected as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_RAWTRACE_BIST_ERR_BUF_DESC),
            "::",
            stringify!(DataExpected)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_RAWTRACE_BIST_ERR_BUF_DESC>())).DataRead as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_RAWTRACE_BIST_ERR_BUF_DESC),
            "::",
            stringify!(DataRead)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_RAWTRACE_BIST_ERR_BUF_DESC>())).DataReRead as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_RAWTRACE_BIST_ERR_BUF_DESC),
            "::",
            stringify!(DataReRead)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_RAWTRACE_BIST_ERR_BUF_DESC>())).aReserved as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_RAWTRACE_BIST_ERR_BUF_DESC),
            "::",
            stringify!(aReserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_EMU_TARGET_IMG_AREA_INFO {
    pub Size: ::std::os::raw::c_uint,
    pub SectorSizeShift: ::std::os::raw::c_uchar,
    pub MinAlignShift: ::std::os::raw::c_uchar,
    pub Dummy0: ::std::os::raw::c_uchar,
    pub Dummy1: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_JLINK_EMU_TARGET_IMG_AREA_INFO() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_EMU_TARGET_IMG_AREA_INFO>(),
        8usize,
        concat!("Size of: ", stringify!(JLINK_EMU_TARGET_IMG_AREA_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_EMU_TARGET_IMG_AREA_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINK_EMU_TARGET_IMG_AREA_INFO))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_EMU_TARGET_IMG_AREA_INFO>())).Size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_EMU_TARGET_IMG_AREA_INFO),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_EMU_TARGET_IMG_AREA_INFO>())).SectorSizeShift as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_EMU_TARGET_IMG_AREA_INFO),
            "::",
            stringify!(SectorSizeShift)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_EMU_TARGET_IMG_AREA_INFO>())).MinAlignShift as *const _
                as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_EMU_TARGET_IMG_AREA_INFO),
            "::",
            stringify!(MinAlignShift)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_EMU_TARGET_IMG_AREA_INFO>())).Dummy0 as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_EMU_TARGET_IMG_AREA_INFO),
            "::",
            stringify!(Dummy0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_EMU_TARGET_IMG_AREA_INFO>())).Dummy1 as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_EMU_TARGET_IMG_AREA_INFO),
            "::",
            stringify!(Dummy1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_STRACE_TIMESTAMP_INFO {
    pub Time: ::std::os::raw::c_ulonglong,
    pub Index: ::std::os::raw::c_uint,
    pub Flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_JLINK_STRACE_TIMESTAMP_INFO() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_STRACE_TIMESTAMP_INFO>(),
        16usize,
        concat!("Size of: ", stringify!(JLINK_STRACE_TIMESTAMP_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_STRACE_TIMESTAMP_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(JLINK_STRACE_TIMESTAMP_INFO))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_STRACE_TIMESTAMP_INFO>())).Time as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_STRACE_TIMESTAMP_INFO),
            "::",
            stringify!(Time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_STRACE_TIMESTAMP_INFO>())).Index as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_STRACE_TIMESTAMP_INFO),
            "::",
            stringify!(Index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_STRACE_TIMESTAMP_INFO>())).Flags as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_STRACE_TIMESTAMP_INFO),
            "::",
            stringify!(Flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINK_EMU_FILE_VOLUME_INFO {
    pub SizeofStruct: ::std::os::raw::c_uint,
    pub VolumeSizeLo: ::std::os::raw::c_uint,
    pub VolumeSizeHi: ::std::os::raw::c_uint,
    pub NumBytesUsedLo: ::std::os::raw::c_uint,
    pub NumBytesUsedHi: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_JLINK_EMU_FILE_VOLUME_INFO() {
    assert_eq!(
        ::std::mem::size_of::<JLINK_EMU_FILE_VOLUME_INFO>(),
        20usize,
        concat!("Size of: ", stringify!(JLINK_EMU_FILE_VOLUME_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINK_EMU_FILE_VOLUME_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(JLINK_EMU_FILE_VOLUME_INFO))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_EMU_FILE_VOLUME_INFO>())).SizeofStruct as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_EMU_FILE_VOLUME_INFO),
            "::",
            stringify!(SizeofStruct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_EMU_FILE_VOLUME_INFO>())).VolumeSizeLo as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_EMU_FILE_VOLUME_INFO),
            "::",
            stringify!(VolumeSizeLo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_EMU_FILE_VOLUME_INFO>())).VolumeSizeHi as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_EMU_FILE_VOLUME_INFO),
            "::",
            stringify!(VolumeSizeHi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_EMU_FILE_VOLUME_INFO>())).NumBytesUsedLo as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_EMU_FILE_VOLUME_INFO),
            "::",
            stringify!(NumBytesUsedLo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JLINK_EMU_FILE_VOLUME_INFO>())).NumBytesUsedHi as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINK_EMU_FILE_VOLUME_INFO),
            "::",
            stringify!(NumBytesUsedHi)
        )
    );
}
pub type BANK_HANDLE = ::std::os::raw::c_uint;
pub type DATA_FILE_HANDLE = ::std::os::raw::c_uint;
pub type JLINK_FLASH_PROGRESS_CB_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        sAction: *const ::std::os::raw::c_char,
        sProg: *const ::std::os::raw::c_char,
        Percentage: ::std::os::raw::c_int,
    ),
>;
pub type JLINK_LOG =
    ::std::option::Option<unsafe extern "C" fn(sErr: *const ::std::os::raw::c_char)>;
pub type JLINKARM_LOG =
    ::std::option::Option<unsafe extern "C" fn(sErr: *const ::std::os::raw::c_char)>;
pub type JLINKARM_FLASH_NOTIFY_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        Event: JLINKARM_FLASH_EVENT,
        pNotifyInfo: *const JLINKARM_FLASH_NOTIFY_INFO,
    ),
>;
pub type JLINKARM_WAIT_FUNC = ::std::option::Option<
    unsafe extern "C" fn(pContext: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type JLINK_HOOK_DIALOG_UNSECURE = ::std::option::Option<
    unsafe extern "C" fn(
        sTitle: *const ::std::os::raw::c_char,
        sMsg: *const ::std::os::raw::c_char,
        Flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
pub type JLINK_HOOK_DIALOG_UNLOCK_IDCODE = ::std::option::Option<
    unsafe extern "C" fn(
        sTitle: *const ::std::os::raw::c_char,
        sMsg: *const ::std::os::raw::c_char,
        Flags: ::std::os::raw::c_uint,
        pIDCODE: *mut ::std::os::raw::c_void,
        MaxNumBytesIDCODE: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_SET_HOOK_DIALOG_UNLOCK_IDCODE: JLINK_FUNC_INDEX = 0;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_SPI_TRANSFER_MULTIPLE: JLINK_FUNC_INDEX = 1;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_PIN_OVERRIDE: JLINK_FUNC_INDEX = 2;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_PIN_OVERRIDE_GET_PIN_CAPS: JLINK_FUNC_INDEX = 3;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_MRU_GETLIST: JLINK_FUNC_INDEX = 4;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_RESERVED3: JLINK_FUNC_INDEX = 5;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_RESERVED4: JLINK_FUNC_INDEX = 6;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_RESERVED5: JLINK_FUNC_INDEX = 7;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_GET_SESSION_ID: JLINK_FUNC_INDEX = 8;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_CORESIGHT_TRIGGER_READ_APDP_REG: JLINK_FUNC_INDEX = 9;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_CAN_ACC_MEM_WHILE_RUNNING: JLINK_FUNC_INDEX = 10;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_UPDATE_BTL: JLINK_FUNC_INDEX = 11;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_GET_CURRENT_ENDIANESS: JLINK_FUNC_INDEX = 12;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_ALGODB_GET_PALGO_INFO: JLINK_FUNC_INDEX = 13;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_ALGODB_GET_PALGO_INFO_CFI: JLINK_FUNC_INDEX = 14;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_ALGODB_GET_ALGO_NO: JLINK_FUNC_INDEX = 15;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_PCODE_SET_ENTRY_FUNC: JLINK_FUNC_INDEX = 16;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_PCODE_DOWNLOAD: JLINK_FUNC_INDEX = 17;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_PCODE_EXEC_EX: JLINK_FUNC_INDEX = 18;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_START_MERGE_COMMANDS: JLINK_FUNC_INDEX = 19;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_END_MERGE_COMMANDS: JLINK_FUNC_INDEX = 20;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_RAWTRACE_BIST_STARTSTOP: JLINK_FUNC_INDEX = 21;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_RAWTRACE_BIST_READ_ERR_STATS: JLINK_FUNC_INDEX = 22;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_GET_PF_GET_INST_INFO: JLINK_FUNC_INDEX = 23;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_CORESIGHT_ACC_APDP_REG_MUL: JLINK_FUNC_INDEX = 24;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_PCODE_DATA_DOWNLOAD: JLINK_FUNC_INDEX = 25;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_PCODE_EXEC_EX2: JLINK_FUNC_INDEX = 26;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_PCODE_FREE: JLINK_FUNC_INDEX = 27;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_EMU_COMMANDLINE_WRITE_READ: JLINK_FUNC_INDEX = 28;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_GET_PF_DISASSEMBLE_BUFFER: JLINK_FUNC_INDEX = 29;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_EMU_GET_TARGET_IMG_AREA_INFO: JLINK_FUNC_INDEX = 30;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_EMU_READ_TARGET_IMG_AREA: JLINK_FUNC_INDEX = 31;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_EMU_WRITE_TARGET_IMG_AREA: JLINK_FUNC_INDEX = 32;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_EMU_GET_CURR_CONN_INFO: JLINK_FUNC_INDEX = 33;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_GET_PF_EXP_DEVICE_LIST_XML: JLINK_FUNC_INDEX = 34;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_SCRIPTFILE_EXEC_FUNC: JLINK_FUNC_INDEX = 35;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_EMU_ADD_FW_IMAGES: JLINK_FUNC_INDEX = 36;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_READ_CSR: JLINK_FUNC_INDEX = 37;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_WRITE_CSR: JLINK_FUNC_INDEX = 38;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_EMU_FILE_GET_VOLUME_INFO: JLINK_FUNC_INDEX = 39;
pub const JLINK_FUNC_INDEX_JLINK_IFUNC_ERASE: JLINK_FUNC_INDEX = 40;
pub const JLINK_FUNC_INDEX_JLINK_NUM_FUNC_INDEXES: JLINK_FUNC_INDEX = 41;
pub type JLINK_FUNC_INDEX = ::std::os::raw::c_uint;
pub type JLINK_FUNC_SET_HOOK_DIALOG_UNLOCK_IDCODE = ::std::option::Option<
    unsafe extern "C" fn(pfHook: JLINK_HOOK_DIALOG_UNLOCK_IDCODE) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_SPI_TRANSFER_MULTIPLE = ::std::option::Option<
    unsafe extern "C" fn(
        paDesc: *mut JLINK_SPI_COMMAND_DESC,
        NumCommands: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_MRU_GETLIST = ::std::option::Option<
    unsafe extern "C" fn(
        Group: ::std::os::raw::c_uint,
        sList: *mut ::std::os::raw::c_char,
        BufferSize: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_PIN_OVERRIDE = ::std::option::Option<
    unsafe extern "C" fn(
        paMode: *const ::std::os::raw::c_uint,
        paState: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_PIN_OVERRIDE_GET_PIN_CAPS = ::std::option::Option<
    unsafe extern "C" fn(paCaps: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_GET_SESSION_ID =
    ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
pub type JLINK_FUNC_CORESIGHT_TRIGGER_READ_APDP_REG = ::std::option::Option<
    unsafe extern "C" fn(
        RegIndex: ::std::os::raw::c_uchar,
        APnDP: ::std::os::raw::c_uchar,
        pData: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_CAN_ACC_MEM_WHILE_RUNNING =
    ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
pub type JLINK_FUNC_UPDATE_BTL =
    ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
pub type JLINK_FUNC_GET_CURRENT_ENDIANESS =
    ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
pub type JLINK_FUNC_ALGODB_GET_PALGO_INFO = ::std::option::Option<
    unsafe extern "C" fn(
        AlgoNo: ::std::os::raw::c_uint,
        Variant: ::std::os::raw::c_uint,
        ppAlgoInfo: *mut *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_ALGODB_GET_PALGO_INFO_CFI = ::std::option::Option<
    unsafe extern "C" fn(
        AlgoNo: ::std::os::raw::c_uint,
        Variant: ::std::os::raw::c_uint,
        NumChips: ::std::os::raw::c_uint,
        NumBits: ::std::os::raw::c_uint,
        CoreType: ::std::os::raw::c_uint,
        ppAlgoInfo: *mut *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_ALGODB_GET_ALGO_NO = ::std::option::Option<
    unsafe extern "C" fn(
        pAlgoInfo: *const ::std::os::raw::c_void,
        pAlgoNo: *mut ::std::os::raw::c_uint,
        pVariant: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_PCODE_SET_ENTRY = ::std::option::Option<
    unsafe extern "C" fn(
        sEntryFunc: *const ::std::os::raw::c_char,
        pPC: *mut ::std::os::raw::c_uint,
        pSP: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_PCODE_DOWNLOAD = ::std::option::Option<
    unsafe extern "C" fn(
        pPCode: *mut ::std::os::raw::c_uchar,
        NumBytes: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_PCODE_DATA_DOWNLOAD = ::std::option::Option<
    unsafe extern "C" fn(
        pData: *mut ::std::os::raw::c_uchar,
        NumBytes: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_PCODE_EXEC_EX = ::std::option::Option<
    unsafe extern "C" fn(
        sEntryFunc: *const ::std::os::raw::c_char,
        pPCodeStat: *mut JLINKARM_EMU_PCODE_STATUS_INFO,
    ) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_START_MERGE_COMMANDS =
    ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
pub type JLINK_FUNC_END_MERGE_COMMANDS =
    ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
pub type JLINK_FUNC_RAWTRACE_BIST_STARTSTOP = ::std::option::Option<
    unsafe extern "C" fn(StartBIST: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_RAWTRACE_BIST_READ_ERR_STATS = ::std::option::Option<
    unsafe extern "C" fn(
        paBuffer: *mut JLINK_RAWTRACE_BIST_ERR_BUF_DESC,
        MaxNumItems: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_GET_PF_GET_INST_INFO = ::std::option::Option<
    unsafe extern "C" fn(
        Core: ::std::os::raw::c_uint,
        ppfFunc: *mut JLINK_DISASSEMBLY_FUNC_GET_INST_INFO,
    ) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_ACC_APDP_REG_MUL = ::std::option::Option<
    unsafe extern "C" fn(
        paDesc: *mut JLINK_CORESIGHT_APDP_ACC_DESC,
        NumEntries: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_PCODE_EXEC_EX2 = ::std::option::Option<
    unsafe extern "C" fn(
        sEntryFunc: *const ::std::os::raw::c_char,
        pPCodeStat: *mut JLINKARM_EMU_PCODE_STATUS_INFO,
        pParams: *mut ::std::os::raw::c_uint,
        ParamCnt: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_PCODE_FREE =
    ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
pub type JLINK_FUNC_EMU_COMMANDLINE_WRITE_READ = ::std::option::Option<
    unsafe extern "C" fn(
        pDataWrite: *const ::std::os::raw::c_void,
        NumBytesToWrite: ::std::os::raw::c_uint,
        pDataRead: *mut ::std::os::raw::c_void,
        MaxNumBytesToRead: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_GET_PF_DISASSEMBLE_BUFFER = ::std::option::Option<
    unsafe extern "C" fn(
        Core: ::std::os::raw::c_uint,
        ppfFunc: *mut JLINK_DISASSEMBLY_FUNC_DISASSEMBLE_BUFFER,
    ) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_EMU_GET_TARGET_IMG_AREA_INFO = ::std::option::Option<
    unsafe extern "C" fn(pInfo: *mut JLINK_EMU_TARGET_IMG_AREA_INFO) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_EMU_READ_TARGET_IMG_AREA = ::std::option::Option<
    unsafe extern "C" fn(
        Off: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_EMU_WRITE_TARGET_IMG_AREA = ::std::option::Option<
    unsafe extern "C" fn(
        Off: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
        pData: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_EMU_GET_CURR_CONN_INFO = ::std::option::Option<
    unsafe extern "C" fn(pInfo: *mut JLINK_EMU_CURR_CONNECT_INFO) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_GET_PF_EXP_DEVICE_LIST_XML = ::std::option::Option<
    unsafe extern "C" fn(sPath: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_SCRIPTFILE_EXEC_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        sFunc: *const ::std::os::raw::c_char,
        pRetVal: *mut ::std::os::raw::c_longlong,
        paParams: *mut ::std::os::raw::c_uint,
        NumParams: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_ADD_FW_IMAGES = ::std::option::Option<
    unsafe extern "C" fn(
        paFWImg: *const ::std::os::raw::c_void,
        NumImages: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_READ_CSR = ::std::option::Option<
    unsafe extern "C" fn(
        RegIndex: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_ulonglong,
        RegSize: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_WRITE_CSR = ::std::option::Option<
    unsafe extern "C" fn(
        RegIndex: ::std::os::raw::c_uint,
        Data: ::std::os::raw::c_ulonglong,
        RegSize: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_EMU_FILE_GET_VOLUME_INFO = ::std::option::Option<
    unsafe extern "C" fn(pInfo: *mut JLINK_EMU_FILE_VOLUME_INFO) -> ::std::os::raw::c_int,
>;
pub type JLINK_FUNC_ERASE = ::std::option::Option<
    unsafe extern "C" fn(
        SAddr: ::std::os::raw::c_ulonglong,
        EAddr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int,
>;
pub type JLINKARM_BP_TYPE = ::std::os::raw::c_uint;
pub const JLINK_EFM8_REG_JLINK_EFM8_R0_B0: JLINK_EFM8_REG = 0;
pub const JLINK_EFM8_REG_JLINK_EFM8_R1_B0: JLINK_EFM8_REG = 1;
pub const JLINK_EFM8_REG_JLINK_EFM8_R2_B0: JLINK_EFM8_REG = 2;
pub const JLINK_EFM8_REG_JLINK_EFM8_R3_B0: JLINK_EFM8_REG = 3;
pub const JLINK_EFM8_REG_JLINK_EFM8_R4_B0: JLINK_EFM8_REG = 4;
pub const JLINK_EFM8_REG_JLINK_EFM8_R5_B0: JLINK_EFM8_REG = 5;
pub const JLINK_EFM8_REG_JLINK_EFM8_R6_B0: JLINK_EFM8_REG = 6;
pub const JLINK_EFM8_REG_JLINK_EFM8_R7_B0: JLINK_EFM8_REG = 7;
pub const JLINK_EFM8_REG_JLINK_EFM8_R0_B1: JLINK_EFM8_REG = 8;
pub const JLINK_EFM8_REG_JLINK_EFM8_R1_B1: JLINK_EFM8_REG = 9;
pub const JLINK_EFM8_REG_JLINK_EFM8_R2_B1: JLINK_EFM8_REG = 10;
pub const JLINK_EFM8_REG_JLINK_EFM8_R3_B1: JLINK_EFM8_REG = 11;
pub const JLINK_EFM8_REG_JLINK_EFM8_R4_B1: JLINK_EFM8_REG = 12;
pub const JLINK_EFM8_REG_JLINK_EFM8_R5_B1: JLINK_EFM8_REG = 13;
pub const JLINK_EFM8_REG_JLINK_EFM8_R6_B1: JLINK_EFM8_REG = 14;
pub const JLINK_EFM8_REG_JLINK_EFM8_R7_B1: JLINK_EFM8_REG = 15;
pub const JLINK_EFM8_REG_JLINK_EFM8_R0_B2: JLINK_EFM8_REG = 16;
pub const JLINK_EFM8_REG_JLINK_EFM8_R1_B2: JLINK_EFM8_REG = 17;
pub const JLINK_EFM8_REG_JLINK_EFM8_R2_B2: JLINK_EFM8_REG = 18;
pub const JLINK_EFM8_REG_JLINK_EFM8_R3_B2: JLINK_EFM8_REG = 19;
pub const JLINK_EFM8_REG_JLINK_EFM8_R4_B2: JLINK_EFM8_REG = 20;
pub const JLINK_EFM8_REG_JLINK_EFM8_R5_B2: JLINK_EFM8_REG = 21;
pub const JLINK_EFM8_REG_JLINK_EFM8_R6_B2: JLINK_EFM8_REG = 22;
pub const JLINK_EFM8_REG_JLINK_EFM8_R7_B2: JLINK_EFM8_REG = 23;
pub const JLINK_EFM8_REG_JLINK_EFM8_R0_B3: JLINK_EFM8_REG = 24;
pub const JLINK_EFM8_REG_JLINK_EFM8_R1_B3: JLINK_EFM8_REG = 25;
pub const JLINK_EFM8_REG_JLINK_EFM8_R2_B3: JLINK_EFM8_REG = 26;
pub const JLINK_EFM8_REG_JLINK_EFM8_R3_B3: JLINK_EFM8_REG = 27;
pub const JLINK_EFM8_REG_JLINK_EFM8_R4_B3: JLINK_EFM8_REG = 28;
pub const JLINK_EFM8_REG_JLINK_EFM8_R5_B3: JLINK_EFM8_REG = 29;
pub const JLINK_EFM8_REG_JLINK_EFM8_R6_B3: JLINK_EFM8_REG = 30;
pub const JLINK_EFM8_REG_JLINK_EFM8_R7_B3: JLINK_EFM8_REG = 31;
pub const JLINK_EFM8_REG_JLINK_EFM8_PC: JLINK_EFM8_REG = 32;
pub const JLINK_EFM8_REG_JLINK_EFM8_A: JLINK_EFM8_REG = 33;
pub const JLINK_EFM8_REG_JLINK_EFM8_B: JLINK_EFM8_REG = 34;
pub const JLINK_EFM8_REG_JLINK_EFM8_DPTR: JLINK_EFM8_REG = 35;
pub const JLINK_EFM8_REG_JLINK_EFM8_SP: JLINK_EFM8_REG = 36;
pub const JLINK_EFM8_REG_JLINK_EFM8_PSW: JLINK_EFM8_REG = 37;
pub const JLINK_EFM8_REG_JLINK_EFM8_R0: JLINK_EFM8_REG = 38;
pub const JLINK_EFM8_REG_JLINK_EFM8_R1: JLINK_EFM8_REG = 39;
pub const JLINK_EFM8_REG_JLINK_EFM8_R2: JLINK_EFM8_REG = 40;
pub const JLINK_EFM8_REG_JLINK_EFM8_R3: JLINK_EFM8_REG = 41;
pub const JLINK_EFM8_REG_JLINK_EFM8_R4: JLINK_EFM8_REG = 42;
pub const JLINK_EFM8_REG_JLINK_EFM8_R5: JLINK_EFM8_REG = 43;
pub const JLINK_EFM8_REG_JLINK_EFM8_R6: JLINK_EFM8_REG = 44;
pub const JLINK_EFM8_REG_JLINK_EFM8_R7: JLINK_EFM8_REG = 45;
pub type JLINK_EFM8_REG = ::std::os::raw::c_uint;
pub type FLASH_AREA_INFO = JLINK_FLASH_AREA_INFO;
pub type RAM_AREA_INFO = JLINK_RAM_AREA_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JLINKARM_READ_DESC {
    pub Addr: ::std::os::raw::c_ulonglong,
    pub NumBytes: ::std::os::raw::c_uint,
    pub Flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_JLINKARM_READ_DESC() {
    assert_eq!(
        ::std::mem::size_of::<JLINKARM_READ_DESC>(),
        16usize,
        concat!("Size of: ", stringify!(JLINKARM_READ_DESC))
    );
    assert_eq!(
        ::std::mem::align_of::<JLINKARM_READ_DESC>(),
        8usize,
        concat!("Alignment of ", stringify!(JLINKARM_READ_DESC))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_READ_DESC>())).Addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_READ_DESC),
            "::",
            stringify!(Addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_READ_DESC>())).NumBytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_READ_DESC),
            "::",
            stringify!(NumBytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JLINKARM_READ_DESC>())).Flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JLINKARM_READ_DESC),
            "::",
            stringify!(Flags)
        )
    );
}
extern crate libloading;
pub struct JLink {
    __library: ::libloading::Library,
    pub JLINK_Configure: Result<
        unsafe extern "C" fn(pConfig: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_DownloadFile: Result<
        unsafe extern "C" fn(
            sFileName: *const ::std::os::raw::c_char,
            Addr: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_GetAvailableLicense: Result<
        unsafe extern "C" fn(
            pBuffer: *mut ::std::os::raw::c_char,
            BufferSize: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_GetPCode: Result<
        unsafe extern "C" fn(
            PCodeIndex: ::std::os::raw::c_int,
            pNumBytes: *mut ::std::os::raw::c_uint,
        ) -> *const ::std::os::raw::c_uchar,
        ::libloading::Error,
    >,
    pub JLINK_GetMemZones: Result<
        unsafe extern "C" fn(
            paZoneInfo: *mut JLINK_MEM_ZONE_INFO,
            MaxNumZones: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_PrintConfig: Result<
        unsafe extern "C" fn(
            pConfig: *const ::std::os::raw::c_char,
            Mask: ::std::os::raw::c_uint,
            pBuffer: *mut ::std::os::raw::c_char,
            BufferSize: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_EraseChip:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_SPI_Transfer: Result<
        unsafe extern "C" fn(
            pDataDown: *const ::std::os::raw::c_uchar,
            pDataUp: *mut ::std::os::raw::c_uchar,
            NumBits: ::std::os::raw::c_uint,
            Flags: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_GetpFunc: Result<
        unsafe extern "C" fn(FuncIndex: JLINK_FUNC_INDEX) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub JLINK_SetHookUnsecureDialog: Result<
        unsafe extern "C" fn(pfHook: JLINK_HOOK_DIALOG_UNSECURE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ReadMemZonedEx: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_void,
            Flags: ::std::os::raw::c_uint,
            sZone: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ReadMemZonedU32: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            NumItems: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_uint,
            pStatus: *mut ::std::os::raw::c_uchar,
            sZone: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ReadMemZonedU16: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            NumItems: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_ushort,
            pStatus: *mut ::std::os::raw::c_uchar,
            sZone: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteMemZonedEx: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
            p: *const ::std::os::raw::c_void,
            Flags: ::std::os::raw::c_uint,
            sZone: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteZonedU32: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            Data: ::std::os::raw::c_uint,
            sZone: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteZonedU16: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            Data: ::std::os::raw::c_ushort,
            sZone: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_DIALOG_Configure: Result<
        unsafe extern "C" fn(
            pConfigIn: *const ::std::os::raw::c_char,
            pConfigOut: *mut ::std::os::raw::c_char,
            BufferSize: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_DIALOG_ConfigureEx: Result<
        unsafe extern "C" fn(
            hParent: *mut ::std::os::raw::c_void,
            Mask: ::std::os::raw::c_uint,
            pConfigIn: *const ::std::os::raw::c_char,
            pConfigOut: *mut ::std::os::raw::c_char,
            BufferSize: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_EMU_GPIO_GetProps: Result<
        unsafe extern "C" fn(
            paDesc: *mut JLINK_EMU_GPIO_DESC,
            MaxNumDesc: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_EMU_GPIO_GetState: Result<
        unsafe extern "C" fn(
            paIndex: *const ::std::os::raw::c_uchar,
            paResult: *mut ::std::os::raw::c_uchar,
            NumPorts: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_EMU_GPIO_SetState: Result<
        unsafe extern "C" fn(
            paIndex: *const ::std::os::raw::c_uchar,
            paState: *const ::std::os::raw::c_uchar,
            paResult: *mut ::std::os::raw::c_uchar,
            NumPorts: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_EMU_AddLicense: Result<
        unsafe extern "C" fn(sLic: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_EMU_EraseLicenses:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_EMU_GetLicenses: Result<
        unsafe extern "C" fn(
            pBuffer: *mut ::std::os::raw::c_char,
            BufferSize: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_HSS_GetCaps: Result<
        unsafe extern "C" fn(pCaps: *mut JLINK_HSS_CAPS) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_HSS_Start: Result<
        unsafe extern "C" fn(
            paDesc: *mut JLINK_HSS_MEM_BLOCK_DESC,
            NumBlocks: ::std::os::raw::c_int,
            Period_us: ::std::os::raw::c_int,
            Flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_HSS_Stop:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_HSS_Read: Result<
        unsafe extern "C" fn(
            pBuffer: *mut ::std::os::raw::c_void,
            BufferSize: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_POWERTRACE_Control: Result<
        unsafe extern "C" fn(
            Cmd: ::std::os::raw::c_uint,
            pIn: *mut ::std::os::raw::c_void,
            pOut: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_POWERTRACE_Read: Result<
        unsafe extern "C" fn(
            paData: *mut JLINK_POWERTRACE_DATA_ITEM,
            NumItems: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_RTTERMINAL_Control: Result<
        unsafe extern "C" fn(
            Cmd: ::std::os::raw::c_uint,
            p: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_RTTERMINAL_Read: Result<
        unsafe extern "C" fn(
            BufferIndex: ::std::os::raw::c_uint,
            sBuffer: *mut ::std::os::raw::c_char,
            BufferSize: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_RTTERMINAL_Write: Result<
        unsafe extern "C" fn(
            BufferIndex: ::std::os::raw::c_uint,
            sBuffer: *const ::std::os::raw::c_char,
            BufferSize: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_STRACE_Config: Result<
        unsafe extern "C" fn(sConfig: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_STRACE_Control: Result<
        unsafe extern "C" fn(
            Cmd: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_STRACE_Read: Result<
        unsafe extern "C" fn(
            paItem: *mut ::std::os::raw::c_uint,
            NumItems: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_STRACE_ReadEx: Result<
        unsafe extern "C" fn(
            paItem: *mut ::std::os::raw::c_uint,
            NumItems: ::std::os::raw::c_uint,
            paTSInfo: *mut JLINK_STRACE_TIMESTAMP_INFO,
            pNumTSInfos: *mut ::std::os::raw::c_int,
            Flags: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_STRACE_GetInstStats: Result<
        unsafe extern "C" fn(
            paItem: *mut ::std::os::raw::c_void,
            Addr: ::std::os::raw::c_uint,
            NumItems: ::std::os::raw::c_uint,
            SizeOfStruct: ::std::os::raw::c_uint,
            Type: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_STRACE_Start:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_STRACE_Stop:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_SWD_GetData: Result<
        unsafe extern "C" fn(
            pOut: *mut ::std::os::raw::c_uchar,
            BitPos: ::std::os::raw::c_int,
            NumBits: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub JLINK_SWD_GetU8: Result<
        unsafe extern "C" fn(BitPos: ::std::os::raw::c_int) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINK_SWD_GetU16: Result<
        unsafe extern "C" fn(BitPos: ::std::os::raw::c_int) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINK_SWD_GetU32: Result<
        unsafe extern "C" fn(BitPos: ::std::os::raw::c_int) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINK_SWD_StoreGetRaw: Result<
        unsafe extern "C" fn(
            pDir: *const ::std::os::raw::c_uchar,
            pIn: *const ::std::os::raw::c_uchar,
            pOut: *mut ::std::os::raw::c_uchar,
            NumBits: ::std::os::raw::c_uint,
        ),
        ::libloading::Error,
    >,
    pub JLINK_SWD_StoreRaw: Result<
        unsafe extern "C" fn(
            pDir: *const ::std::os::raw::c_uchar,
            pIn: *const ::std::os::raw::c_uchar,
            NumBits: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_SWD_SyncBits: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINK_SWD_SyncBytes: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINK_SetFlashProgProgressCallback: Result<
        unsafe extern "C" fn(pfOnFlashProgess: JLINK_FLASH_PROGRESS_CB_FUNC),
        ::libloading::Error,
    >,
    pub JLINKARM_AddMirrorArea:
        Result<unsafe extern "C" fn(Addr: ::std::os::raw::c_uint), ::libloading::Error>,
    pub JLINK_AddMirrorArea:
        Result<unsafe extern "C" fn(Addr: ::std::os::raw::c_uint), ::libloading::Error>,
    pub JLINKARM_AddMirrorAreaEx: Result<
        unsafe extern "C" fn(Addr: ::std::os::raw::c_uint, Size: ::std::os::raw::c_uint),
        ::libloading::Error,
    >,
    pub JLINK_AddMirrorAreaEx: Result<
        unsafe extern "C" fn(Addr: ::std::os::raw::c_uint, Size: ::std::os::raw::c_uint),
        ::libloading::Error,
    >,
    pub JLINKARM_BeginDownload:
        Result<unsafe extern "C" fn(Flags: ::std::os::raw::c_uint), ::libloading::Error>,
    pub JLINK_BeginDownload:
        Result<unsafe extern "C" fn(Flags: ::std::os::raw::c_uint), ::libloading::Error>,
    pub JLINKARM_Clock:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_uchar, ::libloading::Error>,
    pub JLINK_Clock: Result<unsafe extern "C" fn() -> ::std::os::raw::c_uchar, ::libloading::Error>,
    pub JLINKARM_Close: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINK_Close: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINKARM_ClrBP: Result<
        unsafe extern "C" fn(BPIndex: ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ClrBP:
        Result<unsafe extern "C" fn(BPIndex: ::std::os::raw::c_uint), ::libloading::Error>,
    pub JLINKARM_ClrBPEx: Result<
        unsafe extern "C" fn(BPHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ClrBPEx: Result<
        unsafe extern "C" fn(BPHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_ClrDataEvent: Result<
        unsafe extern "C" fn(Handle: ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ClrDataEvent: Result<
        unsafe extern "C" fn(Handle: ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_ClrError: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINK_ClrError: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINKARM_ClrRESET: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINK_ClrRESET: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINKARM_ClrTCK:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_ClrTCK: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINKARM_ClrTDI: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINK_ClrTDI: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINKARM_ClrTMS: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINK_ClrTMS: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINKARM_ClrExecTime: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINK_ClrExecTime: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINKARM_ClrTRST: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINK_ClrTRST: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINKARM_ClrWP: Result<
        unsafe extern "C" fn(WPHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ClrWP: Result<
        unsafe extern "C" fn(WPHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_Communicate: Result<
        unsafe extern "C" fn(
            pWrite: *const ::std::os::raw::c_void,
            WrSize: ::std::os::raw::c_int,
            pRead: *mut ::std::os::raw::c_void,
            RdSize: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_Communicate: Result<
        unsafe extern "C" fn(
            pWrite: *const ::std::os::raw::c_void,
            WrSize: ::std::os::raw::c_int,
            pRead: *mut ::std::os::raw::c_void,
            RdSize: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_CommunicateEx: Result<
        unsafe extern "C" fn(
            pWrite: *const ::std::os::raw::c_void,
            WrSize: ::std::os::raw::c_int,
            pRead: *mut ::std::os::raw::c_void,
            RdSize: ::std::os::raw::c_int,
            IsCommand: ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_ConfigJTAG: Result<
        unsafe extern "C" fn(IRPre: ::std::os::raw::c_int, DRPre: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub JLINK_ConfigJTAG: Result<
        unsafe extern "C" fn(IRPre: ::std::os::raw::c_int, DRPre: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub JLINKARM_Connect:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_Connect: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINKARM_Core2CoreName: Result<
        unsafe extern "C" fn(
            Core: ::std::os::raw::c_uint,
            pBuffer: *mut ::std::os::raw::c_char,
            BufferSize: ::std::os::raw::c_uint,
        ),
        ::libloading::Error,
    >,
    pub JLINKARM_DisassembleInst: Result<
        unsafe extern "C" fn(
            pBuffer: *mut ::std::os::raw::c_char,
            BufferSize: ::std::os::raw::c_uint,
            Addr: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_DisassembleInstEx: Result<
        unsafe extern "C" fn(
            pBuffer: *mut ::std::os::raw::c_char,
            BufferSize: ::std::os::raw::c_uint,
            Addr: ::std::os::raw::c_uint,
            pInfo: *const JLINK_DISASSEMBLY_INFO,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_DownloadECode: Result<
        unsafe extern "C" fn(
            pECode: *const ::std::os::raw::c_uchar,
            NumBytes: ::std::os::raw::c_uint,
        ),
        ::libloading::Error,
    >,
    pub JLINK_DownloadECode: Result<
        unsafe extern "C" fn(
            pECode: *const ::std::os::raw::c_uchar,
            NumBytes: ::std::os::raw::c_uint,
        ),
        ::libloading::Error,
    >,
    pub JLINKARM_EnableCheckModeAfterWrite: Result<
        unsafe extern "C" fn(OnOff: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_EnableCheckModeAfterWrite: Result<
        unsafe extern "C" fn(OnOff: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_EnableFlashCache:
        Result<unsafe extern "C" fn(Enable: ::std::os::raw::c_char), ::libloading::Error>,
    pub JLINK_EnableFlashCache:
        Result<unsafe extern "C" fn(Enable: ::std::os::raw::c_char), ::libloading::Error>,
    pub JLINKARM_EnableLog: Result<unsafe extern "C" fn(pfLog: JLINKARM_LOG), ::libloading::Error>,
    pub JLINK_EnableLog: Result<unsafe extern "C" fn(pfLog: JLINK_LOG), ::libloading::Error>,
    pub JLINKARM_EnablePerformanceCnt: Result<
        unsafe extern "C" fn(Index: ::std::os::raw::c_uint, OnOff: ::std::os::raw::c_uint),
        ::libloading::Error,
    >,
    pub JLINK_EnablePerformanceCnt: Result<
        unsafe extern "C" fn(Index: ::std::os::raw::c_uint, OnOff: ::std::os::raw::c_uint),
        ::libloading::Error,
    >,
    pub JLINKARM_EnableSoftBPs:
        Result<unsafe extern "C" fn(Enable: ::std::os::raw::c_char), ::libloading::Error>,
    pub JLINK_EnableSoftBPs:
        Result<unsafe extern "C" fn(Enable: ::std::os::raw::c_char), ::libloading::Error>,
    pub JLINKARM_EndDownload:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_EndDownload:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINKARM_ExecCommand: Result<
        unsafe extern "C" fn(
            pIn: *const ::std::os::raw::c_char,
            pOut: *mut ::std::os::raw::c_char,
            BufferSize: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ExecCommand: Result<
        unsafe extern "C" fn(
            pIn: *const ::std::os::raw::c_char,
            pOut: *mut ::std::os::raw::c_char,
            BufferSize: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_ExecECode: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINK_ExecECode: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINKARM_FindBP: Result<
        unsafe extern "C" fn(Addr: ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_FindBP: Result<
        unsafe extern "C" fn(Addr: ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_FreeMem: Result<
        unsafe extern "C" fn(pMem: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_GetBPInfo: Result<
        unsafe extern "C" fn(BPHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINKARM_GetBPInfoEx: Result<
        unsafe extern "C" fn(
            iBP: ::std::os::raw::c_int,
            pInfo: *mut JLINKARM_BP_INFO,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_GetBPInfoEx: Result<
        unsafe extern "C" fn(
            iBP: ::std::os::raw::c_int,
            pInfo: *mut JLINKARM_BP_INFO,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_GetCompileDateTime:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub JLINK_GetCompileDateTime:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub JLINKARM_GetConfigData: Result<
        unsafe extern "C" fn(
            pIRPre: *mut ::std::os::raw::c_int,
            pDRPre: *mut ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub JLINK_GetConfigData: Result<
        unsafe extern "C" fn(
            pIRPre: *mut ::std::os::raw::c_int,
            pDRPre: *mut ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub JLINKARM_GetDebugInfo: Result<
        unsafe extern "C" fn(
            Index: ::std::os::raw::c_uint,
            pInfo: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_GetDebugInfo: Result<
        unsafe extern "C" fn(
            Index: ::std::os::raw::c_uint,
            pInfo: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_GetDeviceFamily:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_GetDeviceFamily:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINKARM_GetDLLVersion:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_uint, ::libloading::Error>,
    pub JLINK_GetDLLVersion:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_uint, ::libloading::Error>,
    pub JLINKARM_GetEmbeddedFWString: Result<
        unsafe extern "C" fn(
            sFWId: *const ::std::os::raw::c_char,
            pBuffer: *mut ::std::os::raw::c_char,
            BufferSize: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_GetEmbeddedFWString: Result<
        unsafe extern "C" fn(
            sFWId: *const ::std::os::raw::c_char,
            pBuffer: *mut ::std::os::raw::c_char,
            BufferSize: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_GetEmuCaps:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_uint, ::libloading::Error>,
    pub JLINK_GetEmuCaps:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_uint, ::libloading::Error>,
    pub JLINKARM_GetEmuCapsEx: Result<
        unsafe extern "C" fn(
            pCaps: *mut ::std::os::raw::c_uchar,
            BufferSize: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub JLINK_GetEmuCapsEx: Result<
        unsafe extern "C" fn(
            pCaps: *mut ::std::os::raw::c_uchar,
            BufferSize: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub JLINKARM_GetExecTime: Result<
        unsafe extern "C" fn(
            pExecTimeLow: *mut ::std::os::raw::c_uint,
            pExecTimeHigh: *mut ::std::os::raw::c_uint,
        ),
        ::libloading::Error,
    >,
    pub JLINK_GetExecTime: Result<
        unsafe extern "C" fn(
            pExecTimeLow: *mut ::std::os::raw::c_uint,
            pExecTimeHigh: *mut ::std::os::raw::c_uint,
        ),
        ::libloading::Error,
    >,
    pub JLINKARM_GetFeatureString:
        Result<unsafe extern "C" fn(pOut: *mut ::std::os::raw::c_char), ::libloading::Error>,
    pub JLINK_GetFeatureString:
        Result<unsafe extern "C" fn(pOut: *mut ::std::os::raw::c_char), ::libloading::Error>,
    pub JLINKARM_GetFirmwareString: Result<
        unsafe extern "C" fn(s: *mut ::std::os::raw::c_char, BufferSize: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub JLINK_GetFirmwareString: Result<
        unsafe extern "C" fn(s: *mut ::std::os::raw::c_char, BufferSize: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub JLINKARM_GetHardwareVersion:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_GetHardwareVersion:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINKARM_GetHWInfo: Result<
        unsafe extern "C" fn(
            BitMask: ::std::os::raw::c_uint,
            pHWInfo: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_GetHWInfo: Result<
        unsafe extern "C" fn(
            BitMask: ::std::os::raw::c_uint,
            pHWInfo: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_GetHWStatus: Result<
        unsafe extern "C" fn(pStat: *mut JLINKARM_HW_STATUS) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_GetHWStatus: Result<
        unsafe extern "C" fn(pStat: *mut JLINKARM_HW_STATUS) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_GetId:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_uint, ::libloading::Error>,
    pub JLINK_GetId: Result<unsafe extern "C" fn() -> ::std::os::raw::c_uint, ::libloading::Error>,
    pub JLINKARM_GetIdData:
        Result<unsafe extern "C" fn(pIdData: *mut JTAG_ID_DATA), ::libloading::Error>,
    pub JLINK_GetIdData:
        Result<unsafe extern "C" fn(pIdData: *mut JTAG_ID_DATA), ::libloading::Error>,
    pub JLINKARM_GetIRLen:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_GetIRLen:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINKARM_GetMOEs: Result<
        unsafe extern "C" fn(
            pInfo: *mut JLINKARM_MOE_INFO,
            MaxNumMOEs: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_GetMOEs: Result<
        unsafe extern "C" fn(
            pInfo: *mut JLINKARM_MOE_INFO,
            MaxNumMOEs: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_GetNumBPs:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_uint, ::libloading::Error>,
    pub JLINK_GetNumBPs:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_uint, ::libloading::Error>,
    pub JLINKARM_GetNumBPUnits: Result<
        unsafe extern "C" fn(Type: ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_GetNumBPUnits: Result<
        unsafe extern "C" fn(Type: ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_GetNumWPs:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_uint, ::libloading::Error>,
    pub JLINK_GetNumWPs:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_uint, ::libloading::Error>,
    pub JLINKARM_GetNumWPUnits:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_GetNumWPUnits:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINKARM_GetOEMString: Result<
        unsafe extern "C" fn(pOut: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub JLINK_GetOEMString: Result<
        unsafe extern "C" fn(pOut: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub JLINKARM_GetPerformanceCnt: Result<
        unsafe extern "C" fn(Index: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINK_GetPerformanceCnt: Result<
        unsafe extern "C" fn(Index: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINKARM_GetpSharedMem:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void, ::libloading::Error>,
    pub JLINK_GetpSharedMem:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void, ::libloading::Error>,
    pub JLINKARM_GetRegisterList: Result<
        unsafe extern "C" fn(
            paList: *mut ::std::os::raw::c_uint,
            MaxNumItems: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_GetRegisterList: Result<
        unsafe extern "C" fn(
            paList: *mut ::std::os::raw::c_uint,
            MaxNumItems: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_GetRegisterName: Result<
        unsafe extern "C" fn(RegIndex: ::std::os::raw::c_uint) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub JLINK_GetRegisterName: Result<
        unsafe extern "C" fn(RegIndex: ::std::os::raw::c_uint) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub JLINKARM_GetResetTypeDesc: Result<
        unsafe extern "C" fn(
            ResetType: ::std::os::raw::c_int,
            psResetName: *mut *const ::std::os::raw::c_char,
            psResetDesc: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_GetResetTypeDesc: Result<
        unsafe extern "C" fn(
            ResetType: ::std::os::raw::c_int,
            psResetName: *mut *const ::std::os::raw::c_char,
            psResetDesc: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_GetScanLen:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_GetScanLen:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINKARM_GetSelDevice:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_ushort, ::libloading::Error>,
    pub JLINK_GetSelDevice:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_ushort, ::libloading::Error>,
    pub JLINKARM_GetSN:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_GetSN: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINKARM_GetSpeed:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_ushort, ::libloading::Error>,
    pub JLINK_GetSpeed:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_ushort, ::libloading::Error>,
    pub JLINKARM_GetSpeedInfo:
        Result<unsafe extern "C" fn(pSpeedInfo: *mut JLINKARM_SPEED_INFO), ::libloading::Error>,
    pub JLINK_GetSpeedInfo:
        Result<unsafe extern "C" fn(pSpeedInfo: *mut JLINKARM_SPEED_INFO), ::libloading::Error>,
    pub JLINKARM_GetWPInfoEx: Result<
        unsafe extern "C" fn(
            iWP: ::std::os::raw::c_int,
            pInfo: *mut JLINKARM_WP_INFO,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_GetWPInfoEx: Result<
        unsafe extern "C" fn(
            iWP: ::std::os::raw::c_int,
            pInfo: *mut JLINKARM_WP_INFO,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_Go: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINK_Go: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINKARM_GoAllowSim:
        Result<unsafe extern "C" fn(NumInsts: ::std::os::raw::c_uint), ::libloading::Error>,
    pub JLINK_GoAllowSim:
        Result<unsafe extern "C" fn(NumInsts: ::std::os::raw::c_uint), ::libloading::Error>,
    pub JLINKARM_GoEx: Result<
        unsafe extern "C" fn(MaxEmulInsts: ::std::os::raw::c_uint, Flags: ::std::os::raw::c_uint),
        ::libloading::Error,
    >,
    pub JLINK_GoEx: Result<
        unsafe extern "C" fn(MaxEmulInsts: ::std::os::raw::c_uint, Flags: ::std::os::raw::c_uint),
        ::libloading::Error,
    >,
    pub JLINKARM_GoHalt: Result<
        unsafe extern "C" fn(NumClocks: ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_GoHalt: Result<
        unsafe extern "C" fn(NumClocks: ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_GoIntDis: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINK_GoIntDis: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINKARM_Halt:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_char, ::libloading::Error>,
    pub JLINK_Halt: Result<unsafe extern "C" fn() -> ::std::os::raw::c_char, ::libloading::Error>,
    pub JLINKARM_HasError:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_HasError:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINKARM_IsConnected:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_char, ::libloading::Error>,
    pub JLINK_IsConnected:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_char, ::libloading::Error>,
    pub JLINKARM_IsHalted:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_char, ::libloading::Error>,
    pub JLINK_IsHalted:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_char, ::libloading::Error>,
    pub JLINKARM_IsOpen:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_char, ::libloading::Error>,
    pub JLINK_IsOpen: Result<unsafe extern "C" fn() -> ::std::os::raw::c_char, ::libloading::Error>,
    pub JLINKARM_Lock: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINK_Lock: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINKARM_MeasureCPUSpeed: Result<
        unsafe extern "C" fn(
            RAMAddr: ::std::os::raw::c_uint,
            PreserveMem: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_MeasureCPUSpeed: Result<
        unsafe extern "C" fn(
            RAMAddr: ::std::os::raw::c_uint,
            PreserveMem: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_MeasureCPUSpeedEx: Result<
        unsafe extern "C" fn(
            RAMAddr: ::std::os::raw::c_uint,
            PreserveMem: ::std::os::raw::c_int,
            AllowFail: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_MeasureCPUSpeedEx: Result<
        unsafe extern "C" fn(
            RAMAddr: ::std::os::raw::c_uint,
            PreserveMem: ::std::os::raw::c_int,
            AllowFail: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_MeasureRTCKReactTime: Result<
        unsafe extern "C" fn(pReactInfo: *mut JLINKARM_RTCK_REACT_INFO) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_MeasureRTCKReactTime: Result<
        unsafe extern "C" fn(pReactInfo: *mut JLINKARM_RTCK_REACT_INFO) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_MeasureSCLen: Result<
        unsafe extern "C" fn(ScanChain: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_MeasureSCLen: Result<
        unsafe extern "C" fn(ScanChain: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_Open:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub JLINK_Open:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub JLINKARM_OpenEx: Result<
        unsafe extern "C" fn(
            pfLog: JLINKARM_LOG,
            pfErrorOut: JLINKARM_LOG,
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub JLINK_OpenEx: Result<
        unsafe extern "C" fn(
            pfLog: JLINK_LOG,
            pfErrorOut: JLINK_LOG,
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub JLINKARM_ReadCodeMem: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ReadCodeMem: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_ReadConfigReg: Result<
        unsafe extern "C" fn(
            RegIndex: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ReadConfigReg: Result<
        unsafe extern "C" fn(
            RegIndex: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_ReadControlReg: Result<
        unsafe extern "C" fn(
            RegIndex: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ReadControlReg: Result<
        unsafe extern "C" fn(
            RegIndex: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_ReadDCC: Result<
        unsafe extern "C" fn(
            pData: *mut ::std::os::raw::c_uint,
            NumItems: ::std::os::raw::c_uint,
            TimeOut: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ReadDCC: Result<
        unsafe extern "C" fn(
            pData: *mut ::std::os::raw::c_uint,
            NumItems: ::std::os::raw::c_uint,
            TimeOut: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_ReadDCCFast: Result<
        unsafe extern "C" fn(pData: *mut ::std::os::raw::c_uint, NumItems: ::std::os::raw::c_uint),
        ::libloading::Error,
    >,
    pub JLINK_ReadDCCFast: Result<
        unsafe extern "C" fn(pData: *mut ::std::os::raw::c_uint, NumItems: ::std::os::raw::c_uint),
        ::libloading::Error,
    >,
    pub JLINKARM_ReadTerminal: Result<
        unsafe extern "C" fn(
            pBuffer: *mut ::std::os::raw::c_uchar,
            BufferSize: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ReadTerminal: Result<
        unsafe extern "C" fn(
            pBuffer: *mut ::std::os::raw::c_uchar,
            BufferSize: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_ReadDebugPort: Result<
        unsafe extern "C" fn(
            RegIndex: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ReadDebugPort: Result<
        unsafe extern "C" fn(
            RegIndex: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_ReadDebugReg: Result<
        unsafe extern "C" fn(
            RegIndex: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ReadDebugReg: Result<
        unsafe extern "C" fn(
            RegIndex: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_ReadEmu: Result<
        unsafe extern "C" fn(
            p: *mut ::std::os::raw::c_void,
            NumBytes: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ReadEmu: Result<
        unsafe extern "C" fn(
            p: *mut ::std::os::raw::c_void,
            NumBytes: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_ReadEmuConfigMem: Result<
        unsafe extern "C" fn(
            p: *mut ::std::os::raw::c_uchar,
            Off: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ReadEmuConfigMem: Result<
        unsafe extern "C" fn(
            p: *mut ::std::os::raw::c_uchar,
            Off: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_ReadICEReg: Result<
        unsafe extern "C" fn(RegIndex: ::std::os::raw::c_int) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINK_ReadICEReg: Result<
        unsafe extern "C" fn(RegIndex: ::std::os::raw::c_int) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINKARM_ReadMem: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ReadMem: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_ReadMemEx: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_void,
            Flags: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ReadMemEx: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_void,
            AccessWidth: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_ReadMemHW: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            Count: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ReadMemHW: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            Count: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_ReadMemIndirect: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ReadMemIndirect: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_ReadMemU8: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            NumItems: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_uchar,
            pStatus: *mut ::std::os::raw::c_uchar,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ReadMemU8: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            NumItems: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_uchar,
            pStatus: *mut ::std::os::raw::c_uchar,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_ReadMemU16: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            NumItems: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_ushort,
            pStatus: *mut ::std::os::raw::c_uchar,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ReadMemU16: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            NumItems: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_ushort,
            pStatus: *mut ::std::os::raw::c_uchar,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_ReadMemU32: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            NumItems: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_uint,
            pStatus: *mut ::std::os::raw::c_uchar,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ReadMemU32: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            NumItems: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_uint,
            pStatus: *mut ::std::os::raw::c_uchar,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_ReadMemU64: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            NumItems: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_ulonglong,
            pStatus: *mut ::std::os::raw::c_uchar,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ReadMemU64: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            NumItems: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_ulonglong,
            pStatus: *mut ::std::os::raw::c_uchar,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_ReadReg: Result<
        unsafe extern "C" fn(RegIndex: ARM_REG) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINK_ReadReg: Result<
        unsafe extern "C" fn(RegIndex: ARM_REG) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINKARM_ReadRegs: Result<
        unsafe extern "C" fn(
            paRegIndex: *const ::std::os::raw::c_uint,
            paData: *mut ::std::os::raw::c_uint,
            paStatus: *mut ::std::os::raw::c_uchar,
            NumRegs: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ReadRegs: Result<
        unsafe extern "C" fn(
            paRegIndex: *const ::std::os::raw::c_uint,
            paData: *mut ::std::os::raw::c_uint,
            paStatus: *mut ::std::os::raw::c_uchar,
            NumRegs: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_Reset:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_Reset: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINKARM_ResetNoHalt: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINK_ResetNoHalt: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINKARM_ResetPullsRESET:
        Result<unsafe extern "C" fn(OnOff: ::std::os::raw::c_uchar), ::libloading::Error>,
    pub JLINK_ResetPullsRESET:
        Result<unsafe extern "C" fn(OnOff: ::std::os::raw::c_uchar), ::libloading::Error>,
    pub JLINKARM_ResetPullsTRST:
        Result<unsafe extern "C" fn(OnOff: ::std::os::raw::c_uchar), ::libloading::Error>,
    pub JLINK_ResetPullsTRST:
        Result<unsafe extern "C" fn(OnOff: ::std::os::raw::c_uchar), ::libloading::Error>,
    pub JLINKARM_ResetTRST: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINK_ResetTRST: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINKARM_SelectDeviceFamily:
        Result<unsafe extern "C" fn(DeviceFamily: ::std::os::raw::c_int), ::libloading::Error>,
    pub JLINK_SelectDeviceFamily:
        Result<unsafe extern "C" fn(DeviceFamily: ::std::os::raw::c_int), ::libloading::Error>,
    pub JLINKARM_SelectIP: Result<
        unsafe extern "C" fn(
            sHost: *const ::std::os::raw::c_char,
            Port: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub JLINK_SelectIP: Result<
        unsafe extern "C" fn(
            sHost: *const ::std::os::raw::c_char,
            Port: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub JLINKARM_SelectTraceSource:
        Result<unsafe extern "C" fn(Source: ::std::os::raw::c_int), ::libloading::Error>,
    pub JLINK_SelectTraceSource:
        Result<unsafe extern "C" fn(Source: ::std::os::raw::c_int), ::libloading::Error>,
    pub JLINKARM_SelectUSB: Result<
        unsafe extern "C" fn(Port: ::std::os::raw::c_int) -> ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub JLINK_SelectUSB: Result<
        unsafe extern "C" fn(Port: ::std::os::raw::c_int) -> ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub JLINKARM_SetBP: Result<
        unsafe extern "C" fn(
            BPIndex: ::std::os::raw::c_uint,
            Addr: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_SetBP: Result<
        unsafe extern "C" fn(BPIndex: ::std::os::raw::c_uint, Addr: ::std::os::raw::c_uint),
        ::libloading::Error,
    >,
    pub JLINKARM_SetBPEx: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            TypeFlags: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_SetBPEx: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            Type: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_SetCoreIndex: Result<
        unsafe extern "C" fn(CoreIndex: ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_SetDataEvent: Result<
        unsafe extern "C" fn(
            pEvent: *mut JLINKARM_DATA_EVENT,
            pHandle: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_SetDataEvent: Result<
        unsafe extern "C" fn(
            pEvent: *mut JLINKARM_DATA_EVENT,
            pHandle: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_SetDebugUnitBlockMask: Result<
        unsafe extern "C" fn(Type: ::std::os::raw::c_int, Mask: ::std::os::raw::c_uint),
        ::libloading::Error,
    >,
    pub JLINK_SetDebugUnitBlockMask: Result<
        unsafe extern "C" fn(Type: ::std::os::raw::c_int, Mask: ::std::os::raw::c_uint),
        ::libloading::Error,
    >,
    pub JLINKARM_SetEndian: Result<
        unsafe extern "C" fn(v: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_SetEndian: Result<
        unsafe extern "C" fn(v: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_SetErrorOutHandler:
        Result<unsafe extern "C" fn(pfErrorOut: JLINKARM_LOG), ::libloading::Error>,
    pub JLINK_SetErrorOutHandler:
        Result<unsafe extern "C" fn(pfErrorOut: JLINK_LOG), ::libloading::Error>,
    pub JLINKARM_SetInitRegsOnReset: Result<
        unsafe extern "C" fn(v: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_SetInitRegsOnReset: Result<
        unsafe extern "C" fn(v: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_SetLogFile:
        Result<unsafe extern "C" fn(sFilename: *const ::std::os::raw::c_char), ::libloading::Error>,
    pub JLINK_SetLogFile:
        Result<unsafe extern "C" fn(sFilename: *const ::std::os::raw::c_char), ::libloading::Error>,
    pub JLINKARM_SetMaxSpeed: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINK_SetMaxSpeed: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINKARM_SetRESET: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINK_SetRESET: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINKARM_SetResetDelay:
        Result<unsafe extern "C" fn(ms: ::std::os::raw::c_int), ::libloading::Error>,
    pub JLINK_SetResetDelay:
        Result<unsafe extern "C" fn(ms: ::std::os::raw::c_int), ::libloading::Error>,
    pub JLINKARM_SetResetPara: Result<
        unsafe extern "C" fn(Value: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_SetResetPara: Result<
        unsafe extern "C" fn(Value: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_SetResetType: Result<
        unsafe extern "C" fn(ResetType: JLINKARM_RESET_TYPE) -> JLINKARM_RESET_TYPE,
        ::libloading::Error,
    >,
    pub JLINK_SetResetType: Result<
        unsafe extern "C" fn(ResetType: JLINKARM_RESET_TYPE) -> JLINKARM_RESET_TYPE,
        ::libloading::Error,
    >,
    pub JLINKARM_SetSpeed:
        Result<unsafe extern "C" fn(Speed: ::std::os::raw::c_uint), ::libloading::Error>,
    pub JLINK_SetSpeed:
        Result<unsafe extern "C" fn(Speed: ::std::os::raw::c_uint), ::libloading::Error>,
    pub JLINKARM_SetTCK:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_SetTCK: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINKARM_SetTDI: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINK_SetTDI: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINKARM_SetTMS: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINK_SetTMS: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINKARM_SetTRST: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINK_SetTRST: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINKARM_SetWaitFunction: Result<
        unsafe extern "C" fn(pfWait: JLINKARM_WAIT_FUNC, pContext: *mut ::std::os::raw::c_void),
        ::libloading::Error,
    >,
    pub JLINK_SetWaitFunction: Result<
        unsafe extern "C" fn(pfWait: JLINKARM_WAIT_FUNC, pContext: *mut ::std::os::raw::c_void),
        ::libloading::Error,
    >,
    pub JLINKARM_SetWarnOutHandler:
        Result<unsafe extern "C" fn(pfWarnOut: JLINKARM_LOG), ::libloading::Error>,
    pub JLINK_SetWarnOutHandler:
        Result<unsafe extern "C" fn(pfWarnOut: JLINK_LOG), ::libloading::Error>,
    pub JLINKARM_SetWP: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            AddrMask: ::std::os::raw::c_uint,
            Data: ::std::os::raw::c_uint,
            DataMask: ::std::os::raw::c_uint,
            Ctrl: ::std::os::raw::c_uchar,
            CtrlMask: ::std::os::raw::c_uchar,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_SetWP: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            AddrMask: ::std::os::raw::c_uint,
            Data: ::std::os::raw::c_uint,
            DataMask: ::std::os::raw::c_uint,
            Ctrl: ::std::os::raw::c_uchar,
            CtrlMask: ::std::os::raw::c_uchar,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_SimulateInstruction: Result<
        unsafe extern "C" fn(Inst: ::std::os::raw::c_uint) -> ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub JLINK_SimulateInstruction: Result<
        unsafe extern "C" fn(Inst: ::std::os::raw::c_uint) -> ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub JLINKARM_Step:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_char, ::libloading::Error>,
    pub JLINK_Step: Result<unsafe extern "C" fn() -> ::std::os::raw::c_char, ::libloading::Error>,
    pub JLINKARM_StoreBits: Result<
        unsafe extern "C" fn(
            TMS: ::std::os::raw::c_uint,
            TDI: ::std::os::raw::c_uint,
            NumBits: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub JLINK_StoreBits: Result<
        unsafe extern "C" fn(
            TMS: ::std::os::raw::c_uint,
            TDI: ::std::os::raw::c_uint,
            NumBits: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub JLINKARM_Test: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_Test: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINKARM_Unlock: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINK_Unlock: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINKARM_UpdateFirmware:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_ushort, ::libloading::Error>,
    pub JLINK_UpdateFirmware:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_ushort, ::libloading::Error>,
    pub JLINKARM_UpdateFirmwareIfNewer:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_uint, ::libloading::Error>,
    pub JLINK_UpdateFirmwareIfNewer:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_uint, ::libloading::Error>,
    pub JLINKARM_UpdateReplaceFirmware: Result<
        unsafe extern "C" fn(
            Replace: ::std::os::raw::c_int,
            sInfo: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_UpdateReplaceFirmware: Result<
        unsafe extern "C" fn(
            Replace: ::std::os::raw::c_int,
            sInfo: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_WaitDCCRead: Result<
        unsafe extern "C" fn(TimeOut: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WaitDCCRead: Result<
        unsafe extern "C" fn(TimeOut: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_WaitForHalt: Result<
        unsafe extern "C" fn(TimeOut: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WaitForHalt: Result<
        unsafe extern "C" fn(Timeout: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_WriteConfigReg: Result<
        unsafe extern "C" fn(
            RegIndex: ::std::os::raw::c_uint,
            Data: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteConfigReg: Result<
        unsafe extern "C" fn(
            RegIndex: ::std::os::raw::c_uint,
            Data: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_WriteControlReg: Result<
        unsafe extern "C" fn(
            RegIndex: ::std::os::raw::c_uint,
            Data: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteControlReg: Result<
        unsafe extern "C" fn(
            RegIndex: ::std::os::raw::c_uint,
            Data: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_WriteDCC: Result<
        unsafe extern "C" fn(
            pData: *const ::std::os::raw::c_uint,
            NumItems: ::std::os::raw::c_uint,
            TimeOut: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteDCC: Result<
        unsafe extern "C" fn(
            pData: *const ::std::os::raw::c_uint,
            NumItems: ::std::os::raw::c_uint,
            TimeOut: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_WriteDCCFast: Result<
        unsafe extern "C" fn(
            pData: *const ::std::os::raw::c_uint,
            NumItems: ::std::os::raw::c_uint,
        ),
        ::libloading::Error,
    >,
    pub JLINK_WriteDCCFast: Result<
        unsafe extern "C" fn(
            pData: *const ::std::os::raw::c_uint,
            NumItems: ::std::os::raw::c_uint,
        ),
        ::libloading::Error,
    >,
    pub JLINKARM_WriteDebugPort: Result<
        unsafe extern "C" fn(
            RegIndex: ::std::os::raw::c_uint,
            Data: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteDebugPort: Result<
        unsafe extern "C" fn(
            RegIndex: ::std::os::raw::c_uint,
            Data: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_WriteDebugReg: Result<
        unsafe extern "C" fn(
            RegIndex: ::std::os::raw::c_uint,
            Data: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteDebugReg: Result<
        unsafe extern "C" fn(
            RegIndex: ::std::os::raw::c_uint,
            Data: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_WriteEmu: Result<
        unsafe extern "C" fn(
            p: *const ::std::os::raw::c_void,
            NumBytes: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteEmu: Result<
        unsafe extern "C" fn(
            p: *const ::std::os::raw::c_void,
            NumBytes: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_WriteEmuConfigMem: Result<
        unsafe extern "C" fn(
            p: *const ::std::os::raw::c_uchar,
            Off: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteEmuConfigMem: Result<
        unsafe extern "C" fn(
            p: *const ::std::os::raw::c_uchar,
            Off: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_WriteICEReg: Result<
        unsafe extern "C" fn(
            RegIndex: ::std::os::raw::c_uint,
            Value: ::std::os::raw::c_uint,
            AllowDelay: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub JLINK_WriteICEReg: Result<
        unsafe extern "C" fn(
            RegIndex: ::std::os::raw::c_uint,
            Value: ::std::os::raw::c_uint,
            AllowDelay: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub JLINKARM_WriteMem: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            Count: ::std::os::raw::c_uint,
            pData: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteMem: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            Count: ::std::os::raw::c_uint,
            pData: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_WriteMemDelayed: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            Count: ::std::os::raw::c_uint,
            pData: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteMemDelayed: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            Count: ::std::os::raw::c_uint,
            pData: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_WriteMemEx: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
            p: *const ::std::os::raw::c_void,
            Flags: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteMemEx: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
            p: *const ::std::os::raw::c_void,
            AccessWidth: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_WriteMemHW: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            Count: ::std::os::raw::c_uint,
            p: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteMemHW: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
            p: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_WriteMemMultiple: Result<
        unsafe extern "C" fn(
            paDesc: *mut JLINK_WRITE_MEM_DESC,
            NumWrites: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_WriteReg: Result<
        unsafe extern "C" fn(
            RegIndex: ARM_REG,
            Data: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub JLINK_WriteReg: Result<
        unsafe extern "C" fn(
            RegIndex: ARM_REG,
            Data: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub JLINKARM_WriteRegs: Result<
        unsafe extern "C" fn(
            paRegIndex: *const ::std::os::raw::c_uint,
            paData: *const ::std::os::raw::c_uint,
            paStatus: *mut ::std::os::raw::c_uchar,
            NumRegs: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteRegs: Result<
        unsafe extern "C" fn(
            paRegIndex: *const ::std::os::raw::c_uint,
            paData: *const ::std::os::raw::c_uint,
            paStatus: *mut ::std::os::raw::c_uchar,
            NumRegs: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_WriteU8: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            Data: ::std::os::raw::c_uchar,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteU8: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            Data: ::std::os::raw::c_uchar,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_WriteU16: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            Data: ::std::os::raw::c_ushort,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteU16: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            Data: ::std::os::raw::c_ushort,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_WriteU32: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            Data: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteU32: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            Data: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_WriteU64: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            Data: ::std::os::raw::c_ulonglong,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteU64: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            Data: ::std::os::raw::c_ulonglong,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_WriteVectorCatch: Result<
        unsafe extern "C" fn(Value: ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteVectorCatch: Result<
        unsafe extern "C" fn(Value: ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_WriteVerifyMem: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
            p: *const ::std::os::raw::c_void,
            Flags: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteVerifyMem: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
            p: *const ::std::os::raw::c_void,
            AccessWidth: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_BMI_Get: Result<
        unsafe extern "C" fn(pBMIMode: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_BMI_Set: Result<
        unsafe extern "C" fn(BMIMode: ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_CDC_Read: Result<
        unsafe extern "C" fn(
            pData: *mut ::std::os::raw::c_uchar,
            NumBytes: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_CDC_SetBaudrate: Result<
        unsafe extern "C" fn(BaudrateHz: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_CDC_SetHookFuncs: Result<
        unsafe extern "C" fn(
            pData: *const ::std::os::raw::c_uchar,
            NumBytes: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_CDC_SetRTSState: Result<
        unsafe extern "C" fn(State: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_CDC_SetTimeoutLastCDCRead: Result<
        unsafe extern "C" fn(Timeout: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_CDC_Write: Result<
        unsafe extern "C" fn(
            pData: *const ::std::os::raw::c_uchar,
            NumBytes: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_CORE_GetFound:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_uint, ::libloading::Error>,
    pub JLINK_CORE_GetFound:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_uint, ::libloading::Error>,
    pub JLINKARM_CORE_Select:
        Result<unsafe extern "C" fn(Core: ::std::os::raw::c_uint), ::libloading::Error>,
    pub JLINK_CORE_Select:
        Result<unsafe extern "C" fn(Core: ::std::os::raw::c_uint), ::libloading::Error>,
    pub JLINKARM_CORESIGHT_Configure: Result<
        unsafe extern "C" fn(sConfig: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_CORESIGHT_Configure: Result<
        unsafe extern "C" fn(sConfig: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_CORESIGHT_ReadAPDPReg: Result<
        unsafe extern "C" fn(
            RegIndex: ::std::os::raw::c_uchar,
            APnDP: ::std::os::raw::c_uchar,
            pData: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_CORESIGHT_ReadAPDPReg: Result<
        unsafe extern "C" fn(
            RegIndex: ::std::os::raw::c_uchar,
            APnDP: ::std::os::raw::c_uchar,
            pData: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_CORESIGHT_WriteAPDPReg: Result<
        unsafe extern "C" fn(
            RegIndex: ::std::os::raw::c_uchar,
            APnDP: ::std::os::raw::c_uchar,
            Data: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_CORESIGHT_WriteAPDPReg: Result<
        unsafe extern "C" fn(
            RegIndex: ::std::os::raw::c_uchar,
            APnDP: ::std::os::raw::c_uchar,
            Data: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_CP15_IsPresent:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_CP15_IsPresent:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINKARM_CP15_ReadEx: Result<
        unsafe extern "C" fn(
            CRn: ::std::os::raw::c_uchar,
            CRm: ::std::os::raw::c_uchar,
            op1: ::std::os::raw::c_uchar,
            op2: ::std::os::raw::c_uchar,
            pData: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_CP15_ReadEx: Result<
        unsafe extern "C" fn(
            CRn: ::std::os::raw::c_uchar,
            CRm: ::std::os::raw::c_uchar,
            op1: ::std::os::raw::c_uchar,
            op2: ::std::os::raw::c_uchar,
            pData: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_CP15_ReadReg: Result<
        unsafe extern "C" fn(
            RegIndex: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_CP15_ReadReg: Result<
        unsafe extern "C" fn(
            RegIndex: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_CP15_WriteEx: Result<
        unsafe extern "C" fn(
            CRn: ::std::os::raw::c_uchar,
            CRm: ::std::os::raw::c_uchar,
            op1: ::std::os::raw::c_uchar,
            op2: ::std::os::raw::c_uchar,
            Data: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_CP15_WriteEx: Result<
        unsafe extern "C" fn(
            CRn: ::std::os::raw::c_uchar,
            CRm: ::std::os::raw::c_uchar,
            op1: ::std::os::raw::c_uchar,
            op2: ::std::os::raw::c_uchar,
            Data: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_CP15_WriteReg: Result<
        unsafe extern "C" fn(
            RegIndex: ::std::os::raw::c_uint,
            Data: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_CP15_WriteReg: Result<
        unsafe extern "C" fn(
            RegIndex: ::std::os::raw::c_uint,
            Data: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_DEVICE_GetIndex: Result<
        unsafe extern "C" fn(sDeviceName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_DEVICE_GetIndex: Result<
        unsafe extern "C" fn(sDeviceName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_DEVICE_GetInfo: Result<
        unsafe extern "C" fn(
            DeviceIndex: ::std::os::raw::c_int,
            pDeviceInfo: *mut JLINKARM_DEVICE_INFO,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_DEVICE_GetInfo: Result<
        unsafe extern "C" fn(
            DeviceIndex: ::std::os::raw::c_int,
            pDeviceInfo: *mut JLINKARM_DEVICE_INFO,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_DEVICE_SelectDialog: Result<
        unsafe extern "C" fn(
            hParent: *mut ::std::os::raw::c_void,
            Flags: ::std::os::raw::c_uint,
            pInfo: *mut JLINKARM_DEVICE_SELECT_INFO,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_DEVICE_SelectDialog: Result<
        unsafe extern "C" fn(
            hParent: *mut ::std::os::raw::c_void,
            Flags: ::std::os::raw::c_uint,
            pInfo: *mut JLINKARM_DEVICE_SELECT_INFO,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_EMU_GetCounters: Result<
        unsafe extern "C" fn(
            BitMask: ::std::os::raw::c_uint,
            pCounters: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_EMU_GetCounters: Result<
        unsafe extern "C" fn(
            BitMask: ::std::os::raw::c_uint,
            pCounters: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_EMU_GetDeviceInfo: Result<
        unsafe extern "C" fn(iEmu: ::std::os::raw::c_uint, pInfo: *mut JLINKARM_EMU_INFO),
        ::libloading::Error,
    >,
    pub JLINK_EMU_GetDeviceInfo: Result<
        unsafe extern "C" fn(iEmu: ::std::os::raw::c_uint, pInfo: *mut JLINKARM_EMU_INFO),
        ::libloading::Error,
    >,
    pub JLINKARM_EMU_GetList: Result<
        unsafe extern "C" fn(
            HostIFs: ::std::os::raw::c_int,
            paConnectInfo: *mut JLINKARM_EMU_CONNECT_INFO,
            MaxInfos: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_EMU_GetList: Result<
        unsafe extern "C" fn(
            HostIFs: ::std::os::raw::c_int,
            paConnectInfo: *mut JLINKARM_EMU_CONNECT_INFO,
            MaxInfos: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_EMU_GetMaxMemBlock:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_uint, ::libloading::Error>,
    pub JLINK_EMU_GetMaxMemBlock:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_uint, ::libloading::Error>,
    pub JLINKARM_EMU_GetNumConnections:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_EMU_GetNumConnections:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINKARM_EMU_GetNumDevices:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_uint, ::libloading::Error>,
    pub JLINK_EMU_GetNumDevices:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_uint, ::libloading::Error>,
    pub JLINKARM_EMU_GetProductId:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_EMU_GetProductId:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINKARM_EMU_GetProductName: Result<
        unsafe extern "C" fn(
            pBuffer: *mut ::std::os::raw::c_char,
            BufferSize: ::std::os::raw::c_uint,
        ),
        ::libloading::Error,
    >,
    pub JLINK_EMU_GetProductName: Result<
        unsafe extern "C" fn(
            pBuffer: *mut ::std::os::raw::c_char,
            BufferSize: ::std::os::raw::c_uint,
        ),
        ::libloading::Error,
    >,
    pub JLINKARM_EMU_HasCapEx: Result<
        unsafe extern "C" fn(CapEx: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_EMU_HasCapEx: Result<
        unsafe extern "C" fn(CapEx: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_EMU_HasCPUCap: Result<
        unsafe extern "C" fn(CPUCap: ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_EMU_HasCPUCap: Result<
        unsafe extern "C" fn(CPUCap: ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_EMU_IsConnected:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_char, ::libloading::Error>,
    pub JLINK_EMU_IsConnected:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_char, ::libloading::Error>,
    pub JLINKARM_EMU_SelectByIndex: Result<
        unsafe extern "C" fn(iEmu: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINK_EMU_SelectByIndex: Result<
        unsafe extern "C" fn(iEmu: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINKARM_EMU_SelectByUSBSN: Result<
        unsafe extern "C" fn(SerialNo: ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_EMU_SelectByUSBSN: Result<
        unsafe extern "C" fn(SerialNo: ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_EMU_SelectIP: Result<
        unsafe extern "C" fn(
            pIPAddr: *mut ::std::os::raw::c_char,
            BufferSize: ::std::os::raw::c_int,
            pPort: *mut ::std::os::raw::c_ushort,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_EMU_SelectIP: Result<
        unsafe extern "C" fn(
            pIPAddr: *mut ::std::os::raw::c_char,
            BufferSize: ::std::os::raw::c_int,
            pPort: *mut ::std::os::raw::c_ushort,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_EMU_SelectIPBySN:
        Result<unsafe extern "C" fn(SerialNo: ::std::os::raw::c_uint), ::libloading::Error>,
    pub JLINK_EMU_SelectIPBySN:
        Result<unsafe extern "C" fn(SerialNo: ::std::os::raw::c_uint), ::libloading::Error>,
    pub JLINKARM_EMU_TestNRSpeed: Result<
        unsafe extern "C" fn(
            NumReps: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_EMU_TestNRSpeed: Result<
        unsafe extern "C" fn(
            NumReps: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_EMU_TestNWSpeed: Result<
        unsafe extern "C" fn(
            NumReps: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_EMU_TestNWSpeed: Result<
        unsafe extern "C" fn(
            NumReps: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_EMU_COM_IsSupported:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_EMU_COM_IsSupported:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINKARM_EMU_COM_Read: Result<
        unsafe extern "C" fn(
            Channel: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_EMU_COM_Read: Result<
        unsafe extern "C" fn(
            Channel: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_EMU_COM_Write: Result<
        unsafe extern "C" fn(
            Channel: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
            pData: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_EMU_COM_Write: Result<
        unsafe extern "C" fn(
            Channel: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
            pData: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_EMU_FILE_Delete: Result<
        unsafe extern "C" fn(sFile: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_EMU_FILE_Delete: Result<
        unsafe extern "C" fn(sFile: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_EMU_FILE_GetList: Result<
        unsafe extern "C" fn(
            sFile: *const ::std::os::raw::c_char,
            pBuffer: *mut ::std::os::raw::c_char,
            BufferSize: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_EMU_FILE_GetList: Result<
        unsafe extern "C" fn(
            sFile: *const ::std::os::raw::c_char,
            pBuffer: *mut ::std::os::raw::c_char,
            BufferSize: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_EMU_FILE_GetSize: Result<
        unsafe extern "C" fn(sFile: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_EMU_FILE_GetSize: Result<
        unsafe extern "C" fn(sFile: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_EMU_FILE_Read: Result<
        unsafe extern "C" fn(
            sFile: *const ::std::os::raw::c_char,
            pData: *mut ::std::os::raw::c_uchar,
            Offset: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_EMU_FILE_Read: Result<
        unsafe extern "C" fn(
            sFile: *const ::std::os::raw::c_char,
            pData: *mut ::std::os::raw::c_uchar,
            Offset: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_EMU_FILE_Write: Result<
        unsafe extern "C" fn(
            sFile: *const ::std::os::raw::c_char,
            pData: *const ::std::os::raw::c_uchar,
            Offset: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_EMU_FILE_Write: Result<
        unsafe extern "C" fn(
            sFile: *const ::std::os::raw::c_char,
            pData: *const ::std::os::raw::c_uchar,
            Offset: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_ETB_IsPresent:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_char, ::libloading::Error>,
    pub JLINK_ETB_IsPresent:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_char, ::libloading::Error>,
    pub JLINKARM_ETB_ReadReg: Result<
        unsafe extern "C" fn(RegIndex: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINK_ETB_ReadReg: Result<
        unsafe extern "C" fn(RegIndex: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINKARM_ETB_WriteReg: Result<
        unsafe extern "C" fn(
            RegIndex: ::std::os::raw::c_uint,
            Data: ::std::os::raw::c_uint,
            AllowDelay: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub JLINK_ETB_WriteReg: Result<
        unsafe extern "C" fn(
            RegIndex: ::std::os::raw::c_uint,
            Data: ::std::os::raw::c_uint,
            AllowDelay: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub JLINKARM_ETM_IsPresent:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_char, ::libloading::Error>,
    pub JLINK_ETM_IsPresent:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_char, ::libloading::Error>,
    pub JLINKARM_ETM_ReadReg: Result<
        unsafe extern "C" fn(Reg: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINK_ETM_ReadReg: Result<
        unsafe extern "C" fn(Reg: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINKARM_ETM_StartTrace: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINK_ETM_StartTrace: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINKARM_ETM_WriteReg: Result<
        unsafe extern "C" fn(
            Reg: ::std::os::raw::c_uint,
            Data: ::std::os::raw::c_uint,
            AllowDelay: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub JLINK_ETM_WriteReg: Result<
        unsafe extern "C" fn(
            Reg: ::std::os::raw::c_uint,
            Data: ::std::os::raw::c_uint,
            AllowDelay: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub JLINKARM_INDICATORS_SetState: Result<
        unsafe extern "C" fn(
            NumStates: ::std::os::raw::c_int,
            pState: *mut JLINKARM_INDICATOR_CTRL,
        ),
        ::libloading::Error,
    >,
    pub JLINK_INDICATORS_SetState: Result<
        unsafe extern "C" fn(
            NumStates: ::std::os::raw::c_int,
            pState: *mut JLINKARM_INDICATOR_CTRL,
        ),
        ::libloading::Error,
    >,
    pub JLINKARM_JTAG_ConfigDevices: Result<
        unsafe extern "C" fn(
            NumDevices: ::std::os::raw::c_uint,
            paConf: *const JLINKARM_JTAG_DEVICE_CONF,
        ),
        ::libloading::Error,
    >,
    pub JLINK_JTAG_ConfigDevices: Result<
        unsafe extern "C" fn(
            NumDevices: ::std::os::raw::c_uint,
            paConf: *const JLINKARM_JTAG_DEVICE_CONF,
        ),
        ::libloading::Error,
    >,
    pub JLINKARM_JTAG_DisableIF:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_JTAG_DisableIF:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINKARM_JTAG_EnableIF:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_JTAG_EnableIF:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINKARM_JTAG_GetData: Result<
        unsafe extern "C" fn(
            pTDO: *mut ::std::os::raw::c_uchar,
            BitPos: ::std::os::raw::c_int,
            NumBits: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub JLINK_JTAG_GetData: Result<
        unsafe extern "C" fn(
            pTDO: *mut ::std::os::raw::c_uchar,
            BitPos: ::std::os::raw::c_int,
            NumBits: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub JLINKARM_JTAG_GetDeviceId: Result<
        unsafe extern "C" fn(DeviceIndex: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINK_JTAG_GetDeviceId: Result<
        unsafe extern "C" fn(DeviceIndex: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINKARM_JTAG_GetDeviceInfo: Result<
        unsafe extern "C" fn(
            DeviceIndex: ::std::os::raw::c_uint,
            pDeviceInfo: *mut JLINKARM_JTAG_DEVICE_INFO,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_JTAG_GetDeviceInfo: Result<
        unsafe extern "C" fn(
            DeviceIndex: ::std::os::raw::c_uint,
            pDeviceInfo: *mut JLINKARM_JTAG_DEVICE_INFO,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_JTAG_GetU8: Result<
        unsafe extern "C" fn(BitPos: ::std::os::raw::c_int) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINK_JTAG_GetU8: Result<
        unsafe extern "C" fn(BitPos: ::std::os::raw::c_int) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINKARM_JTAG_GetU16: Result<
        unsafe extern "C" fn(BitPos: ::std::os::raw::c_int) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINK_JTAG_GetU16: Result<
        unsafe extern "C" fn(BitPos: ::std::os::raw::c_int) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINKARM_JTAG_GetU32: Result<
        unsafe extern "C" fn(BitPos: ::std::os::raw::c_int) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINK_JTAG_GetU32: Result<
        unsafe extern "C" fn(BitPos: ::std::os::raw::c_int) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINKARM_JTAG_StoreData: Result<
        unsafe extern "C" fn(
            pTDI: *const ::std::os::raw::c_uchar,
            NumBits: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_JTAG_StoreData: Result<
        unsafe extern "C" fn(
            pTDI: *const ::std::os::raw::c_uchar,
            NumBits: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_JTAG_StoreGetData: Result<
        unsafe extern "C" fn(
            pTDI: *const ::std::os::raw::c_uchar,
            pTDO: *mut ::std::os::raw::c_uchar,
            NumBits: ::std::os::raw::c_uint,
        ),
        ::libloading::Error,
    >,
    pub JLINK_JTAG_StoreGetData: Result<
        unsafe extern "C" fn(
            pTDI: *const ::std::os::raw::c_uchar,
            pTDO: *mut ::std::os::raw::c_uchar,
            NumBits: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub JLINKARM_JTAG_StoreGetRaw: Result<
        unsafe extern "C" fn(
            pTDI: *const ::std::os::raw::c_uchar,
            pTDO: *mut ::std::os::raw::c_uchar,
            pTMS: *const ::std::os::raw::c_uchar,
            NumBits: ::std::os::raw::c_uint,
        ),
        ::libloading::Error,
    >,
    pub JLINK_JTAG_StoreGetRaw: Result<
        unsafe extern "C" fn(
            pTDI: *const ::std::os::raw::c_uchar,
            pTDO: *mut ::std::os::raw::c_uchar,
            pTMS: *const ::std::os::raw::c_uchar,
            NumBits: ::std::os::raw::c_uint,
        ),
        ::libloading::Error,
    >,
    pub JLINKARM_JTAG_StoreInst: Result<
        unsafe extern "C" fn(
            pTDI: *const ::std::os::raw::c_uchar,
            NumBits: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_JTAG_StoreInst: Result<
        unsafe extern "C" fn(
            pTDI: *const ::std::os::raw::c_uchar,
            NumBits: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_JTAG_StoreRaw: Result<
        unsafe extern "C" fn(
            pTDI: *const ::std::os::raw::c_uchar,
            pTMS: *const ::std::os::raw::c_uchar,
            NumBits: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_JTAG_StoreRaw: Result<
        unsafe extern "C" fn(
            pTDI: *const ::std::os::raw::c_uchar,
            pTMS: *const ::std::os::raw::c_uchar,
            NumBits: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_JTAG_SyncBits: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINK_JTAG_SyncBits: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINKARM_JTAG_SyncBytes: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINK_JTAG_SyncBytes: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINKARM_JTAG_WriteData: Result<
        unsafe extern "C" fn(
            pTDI: *const ::std::os::raw::c_uchar,
            pTDO: *mut ::std::os::raw::c_uchar,
            NumBits: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_JTAG_WriteData: Result<
        unsafe extern "C" fn(
            pTDI: *const ::std::os::raw::c_uchar,
            pTDO: *mut ::std::os::raw::c_uchar,
            NumBits: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_NET_Close: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINK_NET_Close: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINKARM_NET_Open:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_NET_Open:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINKARM_PCODE_Assemble: Result<
        unsafe extern "C" fn(
            ppDest: *mut *mut ::std::os::raw::c_uchar,
            pDestSize: *mut ::std::os::raw::c_uint,
            pSrc: *const ::std::os::raw::c_uchar,
            pfOnError: JLINKARM_LOG,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_PCODE_Exec: Result<
        unsafe extern "C" fn(
            pPCode: *mut ::std::os::raw::c_uchar,
            NumBytes: ::std::os::raw::c_uint,
            pPCodeStat: *mut JLINKARM_EMU_PCODE_STATUS_INFO,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_PCODE_Exec: Result<
        unsafe extern "C" fn(
            pPCode: *mut ::std::os::raw::c_uchar,
            NumBytes: ::std::os::raw::c_uint,
            pPCodeStat: *mut JLINKARM_EMU_PCODE_STATUS_INFO,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_PCODE_GetCaps: Result<
        unsafe extern "C" fn(pCaps: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_PCODE_GetCaps: Result<
        unsafe extern "C" fn(pCaps: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_PCODE_GetS32Version: Result<
        unsafe extern "C" fn(pVersion: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_PCODE_GetS32Version: Result<
        unsafe extern "C" fn(pVersion: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_PCODE_GetDebugAPI: Result<
        unsafe extern "C" fn(pAPI: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_RAWTRACE_Control: Result<
        unsafe extern "C" fn(
            Cmd: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_RAWTRACE_Control: Result<
        unsafe extern "C" fn(
            Cmd: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_RAWTRACE_Read: Result<
        unsafe extern "C" fn(
            pData: *mut ::std::os::raw::c_uchar,
            NumBytes: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_RAWTRACE_Read: Result<
        unsafe extern "C" fn(
            pData: *mut ::std::os::raw::c_uchar,
            NumBytes: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_SWD_DisableSWCLK:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_SWD_DisableSWCLK:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINKARM_SWD_EnableSWCLK:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_SWD_EnableSWCLK:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINKARM_SWD_SetDirIn:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_SWD_SetDirIn:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINKARM_SWD_SetDirOut:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_SWD_SetDirOut:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINKARM_SWO_Control: Result<
        unsafe extern "C" fn(
            Cmd: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_SWO_Control: Result<
        unsafe extern "C" fn(
            Cmd: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_SWO_DisableTarget: Result<
        unsafe extern "C" fn(PortMask: ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_SWO_EnableTarget: Result<
        unsafe extern "C" fn(
            CPUSpeed: ::std::os::raw::c_uint,
            SWOSpeed: ::std::os::raw::c_uint,
            Mode: ::std::os::raw::c_int,
            PortMask: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_SWO_GetCompatibleSpeeds: Result<
        unsafe extern "C" fn(
            CPUSpeed: ::std::os::raw::c_uint,
            MaxSWOSpeed: ::std::os::raw::c_uint,
            paSWOSpeed: *mut ::std::os::raw::c_uint,
            NumEntries: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_SWO_Read: Result<
        unsafe extern "C" fn(
            pData: *mut ::std::os::raw::c_uchar,
            Offset: ::std::os::raw::c_uint,
            pNumBytes: *mut ::std::os::raw::c_uint,
        ),
        ::libloading::Error,
    >,
    pub JLINK_SWO_Read: Result<
        unsafe extern "C" fn(
            pData: *mut ::std::os::raw::c_uchar,
            Offset: ::std::os::raw::c_uint,
            pNumBytes: *mut ::std::os::raw::c_uint,
        ),
        ::libloading::Error,
    >,
    pub JLINKARM_SWO_ReadStimulus: Result<
        unsafe extern "C" fn(
            Port: ::std::os::raw::c_int,
            pData: *mut ::std::os::raw::c_uchar,
            NumBytes: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_TIF_GetAvailable:
        Result<unsafe extern "C" fn(pMask: *mut ::std::os::raw::c_uint), ::libloading::Error>,
    pub JLINK_TIF_GetAvailable:
        Result<unsafe extern "C" fn(pMask: *mut ::std::os::raw::c_uint), ::libloading::Error>,
    pub JLINKARM_TIF_Select: Result<
        unsafe extern "C" fn(Interface: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_TIF_Select: Result<
        unsafe extern "C" fn(Interface: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_TRACE_Control: Result<
        unsafe extern "C" fn(
            Cmd: ::std::os::raw::c_uint,
            p: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINK_TRACE_Control: Result<
        unsafe extern "C" fn(
            Cmd: ::std::os::raw::c_uint,
            p: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINKARM_TRACE_Read: Result<
        unsafe extern "C" fn(
            pData: *mut JLINKARM_TRACE_DATA,
            Off: ::std::os::raw::c_uint,
            pNumItems: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINK_TRACE_Read: Result<
        unsafe extern "C" fn(
            pData: *mut JLINKARM_TRACE_DATA,
            Off: ::std::os::raw::c_uint,
            pNumItems: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINKARM_WA_AddRange: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub JLINK_WA_AddRange: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            NumBytes: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub JLINKARM_WA_Restore:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_char, ::libloading::Error>,
    pub JLINK_WA_Restore:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_char, ::libloading::Error>,
    pub JLINK_ReadMemEx_64: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_ulonglong,
            NumBytes: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_void,
            Flags: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ReadMemU8_64: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_ulonglong,
            NumItems: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_uchar,
            pStatus: *mut ::std::os::raw::c_uchar,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ReadMemU16_64: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_ulonglong,
            NumItems: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_ushort,
            pStatus: *mut ::std::os::raw::c_uchar,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ReadMemU32_64: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_ulonglong,
            NumItems: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_uint,
            pStatus: *mut ::std::os::raw::c_uchar,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ReadMemU64_64: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_ulonglong,
            NumItems: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_ulonglong,
            pStatus: *mut ::std::os::raw::c_uchar,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ReadMemZonedEx_64: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_ulonglong,
            NumBytes: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_void,
            Flags: ::std::os::raw::c_uint,
            sZone: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ReadMemZonedU32_64: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_ulonglong,
            NumItems: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_uint,
            pStatus: *mut ::std::os::raw::c_uchar,
            sZone: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ReadMemZonedU16_64: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_ulonglong,
            NumItems: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_ushort,
            pStatus: *mut ::std::os::raw::c_uchar,
            sZone: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_ReadRegs_64: Result<
        unsafe extern "C" fn(
            paRegIndex: *const ::std::os::raw::c_uint,
            paData: *mut ::std::os::raw::c_ulonglong,
            paStatus: *mut ::std::os::raw::c_uchar,
            NumRegs: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_SetBPEx_64: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_ulonglong,
            TypeFlags: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteMemEx_64: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_ulonglong,
            NumBytes: ::std::os::raw::c_uint,
            p: *const ::std::os::raw::c_void,
            Flags: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteRegs_64: Result<
        unsafe extern "C" fn(
            paRegIndex: *const ::std::os::raw::c_uint,
            paData: *const ::std::os::raw::c_ulonglong,
            paStatus: *mut ::std::os::raw::c_uchar,
            NumRegs: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteU8_64: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_ulonglong,
            Data: ::std::os::raw::c_uchar,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteU16_64: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_ulonglong,
            Data: ::std::os::raw::c_ushort,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteU32_64: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_ulonglong,
            Data: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteU64_64: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_ulonglong,
            Data: ::std::os::raw::c_ulonglong,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteMemZonedEx_64: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_ulonglong,
            NumBytes: ::std::os::raw::c_uint,
            p: *const ::std::os::raw::c_void,
            Flags: ::std::os::raw::c_uint,
            sZone: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteZonedU32_64: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_ulonglong,
            Data: ::std::os::raw::c_uint,
            sZone: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_WriteZonedU16_64: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_ulonglong,
            Data: ::std::os::raw::c_ushort,
            sZone: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_TRACE_AddInst: Result<
        unsafe extern "C" fn(Inst: ::std::os::raw::c_uint, BAddr: ::std::os::raw::c_uint),
        ::libloading::Error,
    >,
    pub JLINK_TRACE_AddInst: Result<
        unsafe extern "C" fn(Inst: ::std::os::raw::c_uint, BAddr: ::std::os::raw::c_uint),
        ::libloading::Error,
    >,
    pub JLINKARM_TRACE_AddItems: Result<
        unsafe extern "C" fn(pData: *const JLINKARM_TRACE_DATA, NumItems: ::std::os::raw::c_uint),
        ::libloading::Error,
    >,
    pub JLINK_TRACE_AddItems: Result<
        unsafe extern "C" fn(pData: *const JLINKARM_TRACE_DATA, NumItems: ::std::os::raw::c_uint),
        ::libloading::Error,
    >,
    pub JLINKARM_GetDeviceId: Result<
        unsafe extern "C" fn(DeviceIndex: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINKARM_GetEmbeddedFWVersion:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_ushort, ::libloading::Error>,
    pub JLINK_GetEmbeddedFWVersion:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_ushort, ::libloading::Error>,
    pub JLINKARM_GetU32: Result<
        unsafe extern "C" fn(BitOff: ::std::os::raw::c_int) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINK_GetU32: Result<
        unsafe extern "C" fn(BitOff: ::std::os::raw::c_int) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub JLINKARM_SelDevice:
        Result<unsafe extern "C" fn(DeviceIndex: ::std::os::raw::c_ushort), ::libloading::Error>,
    pub JLINK_SelDevice:
        Result<unsafe extern "C" fn(DeviceIndex: ::std::os::raw::c_ushort), ::libloading::Error>,
    pub JLINKARM_StepComposite:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_char, ::libloading::Error>,
    pub JLINK_StepComposite:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_char, ::libloading::Error>,
    pub JLINKARM_StoreCmd: Result<
        unsafe extern "C" fn(Cmd: ::std::os::raw::c_uchar) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_StoreCmd: Result<
        unsafe extern "C" fn(Cmd: ::std::os::raw::c_uchar) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_StoreData: Result<
        unsafe extern "C" fn(
            pTDI: *const ::std::os::raw::c_uchar,
            NumBits: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_WriteBits: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINK_WriteBits: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub JLINKARM_EnableLogCom:
        Result<unsafe extern "C" fn(pfLog: JLINKARM_LOG), ::libloading::Error>,
    pub JLINK_EnableLogCom: Result<unsafe extern "C" fn(pfLog: JLINK_LOG), ::libloading::Error>,
    pub JLINKARM_SetFlashArea: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            Size: ::std::os::raw::c_uint,
            pFlashAPI: *const ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub JLINK_SetFlashArea: Result<
        unsafe extern "C" fn(
            Addr: ::std::os::raw::c_uint,
            Size: ::std::os::raw::c_uint,
            pFlashAPI: *const ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub JLINKARM_PERIODIC_ConfReadMem: Result<
        unsafe extern "C" fn(
            Period_us: ::std::os::raw::c_uint,
            paReadDesc: *mut JLINKARM_READ_DESC,
            NumReadDescs: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_PERIODIC_Control: Result<
        unsafe extern "C" fn(
            Cmd: ::std::os::raw::c_uint,
            pData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINKARM_PERIODIC_Read: Result<
        unsafe extern "C" fn(
            pData: *mut ::std::os::raw::c_uchar,
            BufferSize: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub JLINK_FLASH_EraseChip:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub JLINK_FLASH_SetNotifyHandler:
        Result<unsafe extern "C" fn(pfNotify: JLINKARM_FLASH_NOTIFY_FUNC), ::libloading::Error>,
}
impl JLink {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let JLINK_Configure = __library.get(b"JLINK_Configure\0").map(|sym| *sym);
        let JLINK_DownloadFile = __library.get(b"JLINK_DownloadFile\0").map(|sym| *sym);
        let JLINK_GetAvailableLicense = __library
            .get(b"JLINK_GetAvailableLicense\0")
            .map(|sym| *sym);
        let JLINK_GetPCode = __library.get(b"JLINK_GetPCode\0").map(|sym| *sym);
        let JLINK_GetMemZones = __library.get(b"JLINK_GetMemZones\0").map(|sym| *sym);
        let JLINK_PrintConfig = __library.get(b"JLINK_PrintConfig\0").map(|sym| *sym);
        let JLINK_EraseChip = __library.get(b"JLINK_EraseChip\0").map(|sym| *sym);
        let JLINK_SPI_Transfer = __library.get(b"JLINK_SPI_Transfer\0").map(|sym| *sym);
        let JLINK_GetpFunc = __library.get(b"JLINK_GetpFunc\0").map(|sym| *sym);
        let JLINK_SetHookUnsecureDialog = __library
            .get(b"JLINK_SetHookUnsecureDialog\0")
            .map(|sym| *sym);
        let JLINK_ReadMemZonedEx = __library.get(b"JLINK_ReadMemZonedEx\0").map(|sym| *sym);
        let JLINK_ReadMemZonedU32 = __library.get(b"JLINK_ReadMemZonedU32\0").map(|sym| *sym);
        let JLINK_ReadMemZonedU16 = __library.get(b"JLINK_ReadMemZonedU16\0").map(|sym| *sym);
        let JLINK_WriteMemZonedEx = __library.get(b"JLINK_WriteMemZonedEx\0").map(|sym| *sym);
        let JLINK_WriteZonedU32 = __library.get(b"JLINK_WriteZonedU32\0").map(|sym| *sym);
        let JLINK_WriteZonedU16 = __library.get(b"JLINK_WriteZonedU16\0").map(|sym| *sym);
        let JLINK_DIALOG_Configure = __library.get(b"JLINK_DIALOG_Configure\0").map(|sym| *sym);
        let JLINK_DIALOG_ConfigureEx = __library.get(b"JLINK_DIALOG_ConfigureEx\0").map(|sym| *sym);
        let JLINK_EMU_GPIO_GetProps = __library.get(b"JLINK_EMU_GPIO_GetProps\0").map(|sym| *sym);
        let JLINK_EMU_GPIO_GetState = __library.get(b"JLINK_EMU_GPIO_GetState\0").map(|sym| *sym);
        let JLINK_EMU_GPIO_SetState = __library.get(b"JLINK_EMU_GPIO_SetState\0").map(|sym| *sym);
        let JLINK_EMU_AddLicense = __library.get(b"JLINK_EMU_AddLicense\0").map(|sym| *sym);
        let JLINK_EMU_EraseLicenses = __library.get(b"JLINK_EMU_EraseLicenses\0").map(|sym| *sym);
        let JLINK_EMU_GetLicenses = __library.get(b"JLINK_EMU_GetLicenses\0").map(|sym| *sym);
        let JLINK_HSS_GetCaps = __library.get(b"JLINK_HSS_GetCaps\0").map(|sym| *sym);
        let JLINK_HSS_Start = __library.get(b"JLINK_HSS_Start\0").map(|sym| *sym);
        let JLINK_HSS_Stop = __library.get(b"JLINK_HSS_Stop\0").map(|sym| *sym);
        let JLINK_HSS_Read = __library.get(b"JLINK_HSS_Read\0").map(|sym| *sym);
        let JLINK_POWERTRACE_Control = __library.get(b"JLINK_POWERTRACE_Control\0").map(|sym| *sym);
        let JLINK_POWERTRACE_Read = __library.get(b"JLINK_POWERTRACE_Read\0").map(|sym| *sym);
        let JLINK_RTTERMINAL_Control = __library.get(b"JLINK_RTTERMINAL_Control\0").map(|sym| *sym);
        let JLINK_RTTERMINAL_Read = __library.get(b"JLINK_RTTERMINAL_Read\0").map(|sym| *sym);
        let JLINK_RTTERMINAL_Write = __library.get(b"JLINK_RTTERMINAL_Write\0").map(|sym| *sym);
        let JLINK_STRACE_Config = __library.get(b"JLINK_STRACE_Config\0").map(|sym| *sym);
        let JLINK_STRACE_Control = __library.get(b"JLINK_STRACE_Control\0").map(|sym| *sym);
        let JLINK_STRACE_Read = __library.get(b"JLINK_STRACE_Read\0").map(|sym| *sym);
        let JLINK_STRACE_ReadEx = __library.get(b"JLINK_STRACE_ReadEx\0").map(|sym| *sym);
        let JLINK_STRACE_GetInstStats = __library
            .get(b"JLINK_STRACE_GetInstStats\0")
            .map(|sym| *sym);
        let JLINK_STRACE_Start = __library.get(b"JLINK_STRACE_Start\0").map(|sym| *sym);
        let JLINK_STRACE_Stop = __library.get(b"JLINK_STRACE_Stop\0").map(|sym| *sym);
        let JLINK_SWD_GetData = __library.get(b"JLINK_SWD_GetData\0").map(|sym| *sym);
        let JLINK_SWD_GetU8 = __library.get(b"JLINK_SWD_GetU8\0").map(|sym| *sym);
        let JLINK_SWD_GetU16 = __library.get(b"JLINK_SWD_GetU16\0").map(|sym| *sym);
        let JLINK_SWD_GetU32 = __library.get(b"JLINK_SWD_GetU32\0").map(|sym| *sym);
        let JLINK_SWD_StoreGetRaw = __library.get(b"JLINK_SWD_StoreGetRaw\0").map(|sym| *sym);
        let JLINK_SWD_StoreRaw = __library.get(b"JLINK_SWD_StoreRaw\0").map(|sym| *sym);
        let JLINK_SWD_SyncBits = __library.get(b"JLINK_SWD_SyncBits\0").map(|sym| *sym);
        let JLINK_SWD_SyncBytes = __library.get(b"JLINK_SWD_SyncBytes\0").map(|sym| *sym);
        let JLINK_SetFlashProgProgressCallback = __library
            .get(b"JLINK_SetFlashProgProgressCallback\0")
            .map(|sym| *sym);
        let JLINKARM_AddMirrorArea = __library.get(b"JLINKARM_AddMirrorArea\0").map(|sym| *sym);
        let JLINK_AddMirrorArea = __library.get(b"JLINK_AddMirrorArea\0").map(|sym| *sym);
        let JLINKARM_AddMirrorAreaEx = __library.get(b"JLINKARM_AddMirrorAreaEx\0").map(|sym| *sym);
        let JLINK_AddMirrorAreaEx = __library.get(b"JLINK_AddMirrorAreaEx\0").map(|sym| *sym);
        let JLINKARM_BeginDownload = __library.get(b"JLINKARM_BeginDownload\0").map(|sym| *sym);
        let JLINK_BeginDownload = __library.get(b"JLINK_BeginDownload\0").map(|sym| *sym);
        let JLINKARM_Clock = __library.get(b"JLINKARM_Clock\0").map(|sym| *sym);
        let JLINK_Clock = __library.get(b"JLINK_Clock\0").map(|sym| *sym);
        let JLINKARM_Close = __library.get(b"JLINKARM_Close\0").map(|sym| *sym);
        let JLINK_Close = __library.get(b"JLINK_Close\0").map(|sym| *sym);
        let JLINKARM_ClrBP = __library.get(b"JLINKARM_ClrBP\0").map(|sym| *sym);
        let JLINK_ClrBP = __library.get(b"JLINK_ClrBP\0").map(|sym| *sym);
        let JLINKARM_ClrBPEx = __library.get(b"JLINKARM_ClrBPEx\0").map(|sym| *sym);
        let JLINK_ClrBPEx = __library.get(b"JLINK_ClrBPEx\0").map(|sym| *sym);
        let JLINKARM_ClrDataEvent = __library.get(b"JLINKARM_ClrDataEvent\0").map(|sym| *sym);
        let JLINK_ClrDataEvent = __library.get(b"JLINK_ClrDataEvent\0").map(|sym| *sym);
        let JLINKARM_ClrError = __library.get(b"JLINKARM_ClrError\0").map(|sym| *sym);
        let JLINK_ClrError = __library.get(b"JLINK_ClrError\0").map(|sym| *sym);
        let JLINKARM_ClrRESET = __library.get(b"JLINKARM_ClrRESET\0").map(|sym| *sym);
        let JLINK_ClrRESET = __library.get(b"JLINK_ClrRESET\0").map(|sym| *sym);
        let JLINKARM_ClrTCK = __library.get(b"JLINKARM_ClrTCK\0").map(|sym| *sym);
        let JLINK_ClrTCK = __library.get(b"JLINK_ClrTCK\0").map(|sym| *sym);
        let JLINKARM_ClrTDI = __library.get(b"JLINKARM_ClrTDI\0").map(|sym| *sym);
        let JLINK_ClrTDI = __library.get(b"JLINK_ClrTDI\0").map(|sym| *sym);
        let JLINKARM_ClrTMS = __library.get(b"JLINKARM_ClrTMS\0").map(|sym| *sym);
        let JLINK_ClrTMS = __library.get(b"JLINK_ClrTMS\0").map(|sym| *sym);
        let JLINKARM_ClrExecTime = __library.get(b"JLINKARM_ClrExecTime\0").map(|sym| *sym);
        let JLINK_ClrExecTime = __library.get(b"JLINK_ClrExecTime\0").map(|sym| *sym);
        let JLINKARM_ClrTRST = __library.get(b"JLINKARM_ClrTRST\0").map(|sym| *sym);
        let JLINK_ClrTRST = __library.get(b"JLINK_ClrTRST\0").map(|sym| *sym);
        let JLINKARM_ClrWP = __library.get(b"JLINKARM_ClrWP\0").map(|sym| *sym);
        let JLINK_ClrWP = __library.get(b"JLINK_ClrWP\0").map(|sym| *sym);
        let JLINKARM_Communicate = __library.get(b"JLINKARM_Communicate\0").map(|sym| *sym);
        let JLINK_Communicate = __library.get(b"JLINK_Communicate\0").map(|sym| *sym);
        let JLINKARM_CommunicateEx = __library.get(b"JLINKARM_CommunicateEx\0").map(|sym| *sym);
        let JLINKARM_ConfigJTAG = __library.get(b"JLINKARM_ConfigJTAG\0").map(|sym| *sym);
        let JLINK_ConfigJTAG = __library.get(b"JLINK_ConfigJTAG\0").map(|sym| *sym);
        let JLINKARM_Connect = __library.get(b"JLINKARM_Connect\0").map(|sym| *sym);
        let JLINK_Connect = __library.get(b"JLINK_Connect\0").map(|sym| *sym);
        let JLINKARM_Core2CoreName = __library.get(b"JLINKARM_Core2CoreName\0").map(|sym| *sym);
        let JLINKARM_DisassembleInst = __library.get(b"JLINKARM_DisassembleInst\0").map(|sym| *sym);
        let JLINKARM_DisassembleInstEx = __library
            .get(b"JLINKARM_DisassembleInstEx\0")
            .map(|sym| *sym);
        let JLINKARM_DownloadECode = __library.get(b"JLINKARM_DownloadECode\0").map(|sym| *sym);
        let JLINK_DownloadECode = __library.get(b"JLINK_DownloadECode\0").map(|sym| *sym);
        let JLINKARM_EnableCheckModeAfterWrite = __library
            .get(b"JLINKARM_EnableCheckModeAfterWrite\0")
            .map(|sym| *sym);
        let JLINK_EnableCheckModeAfterWrite = __library
            .get(b"JLINK_EnableCheckModeAfterWrite\0")
            .map(|sym| *sym);
        let JLINKARM_EnableFlashCache = __library
            .get(b"JLINKARM_EnableFlashCache\0")
            .map(|sym| *sym);
        let JLINK_EnableFlashCache = __library.get(b"JLINK_EnableFlashCache\0").map(|sym| *sym);
        let JLINKARM_EnableLog = __library.get(b"JLINKARM_EnableLog\0").map(|sym| *sym);
        let JLINK_EnableLog = __library.get(b"JLINK_EnableLog\0").map(|sym| *sym);
        let JLINKARM_EnablePerformanceCnt = __library
            .get(b"JLINKARM_EnablePerformanceCnt\0")
            .map(|sym| *sym);
        let JLINK_EnablePerformanceCnt = __library
            .get(b"JLINK_EnablePerformanceCnt\0")
            .map(|sym| *sym);
        let JLINKARM_EnableSoftBPs = __library.get(b"JLINKARM_EnableSoftBPs\0").map(|sym| *sym);
        let JLINK_EnableSoftBPs = __library.get(b"JLINK_EnableSoftBPs\0").map(|sym| *sym);
        let JLINKARM_EndDownload = __library.get(b"JLINKARM_EndDownload\0").map(|sym| *sym);
        let JLINK_EndDownload = __library.get(b"JLINK_EndDownload\0").map(|sym| *sym);
        let JLINKARM_ExecCommand = __library.get(b"JLINKARM_ExecCommand\0").map(|sym| *sym);
        let JLINK_ExecCommand = __library.get(b"JLINK_ExecCommand\0").map(|sym| *sym);
        let JLINKARM_ExecECode = __library.get(b"JLINKARM_ExecECode\0").map(|sym| *sym);
        let JLINK_ExecECode = __library.get(b"JLINK_ExecECode\0").map(|sym| *sym);
        let JLINKARM_FindBP = __library.get(b"JLINKARM_FindBP\0").map(|sym| *sym);
        let JLINK_FindBP = __library.get(b"JLINK_FindBP\0").map(|sym| *sym);
        let JLINKARM_FreeMem = __library.get(b"JLINKARM_FreeMem\0").map(|sym| *sym);
        let JLINKARM_GetBPInfo = __library.get(b"JLINKARM_GetBPInfo\0").map(|sym| *sym);
        let JLINKARM_GetBPInfoEx = __library.get(b"JLINKARM_GetBPInfoEx\0").map(|sym| *sym);
        let JLINK_GetBPInfoEx = __library.get(b"JLINK_GetBPInfoEx\0").map(|sym| *sym);
        let JLINKARM_GetCompileDateTime = __library
            .get(b"JLINKARM_GetCompileDateTime\0")
            .map(|sym| *sym);
        let JLINK_GetCompileDateTime = __library.get(b"JLINK_GetCompileDateTime\0").map(|sym| *sym);
        let JLINKARM_GetConfigData = __library.get(b"JLINKARM_GetConfigData\0").map(|sym| *sym);
        let JLINK_GetConfigData = __library.get(b"JLINK_GetConfigData\0").map(|sym| *sym);
        let JLINKARM_GetDebugInfo = __library.get(b"JLINKARM_GetDebugInfo\0").map(|sym| *sym);
        let JLINK_GetDebugInfo = __library.get(b"JLINK_GetDebugInfo\0").map(|sym| *sym);
        let JLINKARM_GetDeviceFamily = __library.get(b"JLINKARM_GetDeviceFamily\0").map(|sym| *sym);
        let JLINK_GetDeviceFamily = __library.get(b"JLINK_GetDeviceFamily\0").map(|sym| *sym);
        let JLINKARM_GetDLLVersion = __library.get(b"JLINKARM_GetDLLVersion\0").map(|sym| *sym);
        let JLINK_GetDLLVersion = __library.get(b"JLINK_GetDLLVersion\0").map(|sym| *sym);
        let JLINKARM_GetEmbeddedFWString = __library
            .get(b"JLINKARM_GetEmbeddedFWString\0")
            .map(|sym| *sym);
        let JLINK_GetEmbeddedFWString = __library
            .get(b"JLINK_GetEmbeddedFWString\0")
            .map(|sym| *sym);
        let JLINKARM_GetEmuCaps = __library.get(b"JLINKARM_GetEmuCaps\0").map(|sym| *sym);
        let JLINK_GetEmuCaps = __library.get(b"JLINK_GetEmuCaps\0").map(|sym| *sym);
        let JLINKARM_GetEmuCapsEx = __library.get(b"JLINKARM_GetEmuCapsEx\0").map(|sym| *sym);
        let JLINK_GetEmuCapsEx = __library.get(b"JLINK_GetEmuCapsEx\0").map(|sym| *sym);
        let JLINKARM_GetExecTime = __library.get(b"JLINKARM_GetExecTime\0").map(|sym| *sym);
        let JLINK_GetExecTime = __library.get(b"JLINK_GetExecTime\0").map(|sym| *sym);
        let JLINKARM_GetFeatureString = __library
            .get(b"JLINKARM_GetFeatureString\0")
            .map(|sym| *sym);
        let JLINK_GetFeatureString = __library.get(b"JLINK_GetFeatureString\0").map(|sym| *sym);
        let JLINKARM_GetFirmwareString = __library
            .get(b"JLINKARM_GetFirmwareString\0")
            .map(|sym| *sym);
        let JLINK_GetFirmwareString = __library.get(b"JLINK_GetFirmwareString\0").map(|sym| *sym);
        let JLINKARM_GetHardwareVersion = __library
            .get(b"JLINKARM_GetHardwareVersion\0")
            .map(|sym| *sym);
        let JLINK_GetHardwareVersion = __library.get(b"JLINK_GetHardwareVersion\0").map(|sym| *sym);
        let JLINKARM_GetHWInfo = __library.get(b"JLINKARM_GetHWInfo\0").map(|sym| *sym);
        let JLINK_GetHWInfo = __library.get(b"JLINK_GetHWInfo\0").map(|sym| *sym);
        let JLINKARM_GetHWStatus = __library.get(b"JLINKARM_GetHWStatus\0").map(|sym| *sym);
        let JLINK_GetHWStatus = __library.get(b"JLINK_GetHWStatus\0").map(|sym| *sym);
        let JLINKARM_GetId = __library.get(b"JLINKARM_GetId\0").map(|sym| *sym);
        let JLINK_GetId = __library.get(b"JLINK_GetId\0").map(|sym| *sym);
        let JLINKARM_GetIdData = __library.get(b"JLINKARM_GetIdData\0").map(|sym| *sym);
        let JLINK_GetIdData = __library.get(b"JLINK_GetIdData\0").map(|sym| *sym);
        let JLINKARM_GetIRLen = __library.get(b"JLINKARM_GetIRLen\0").map(|sym| *sym);
        let JLINK_GetIRLen = __library.get(b"JLINK_GetIRLen\0").map(|sym| *sym);
        let JLINKARM_GetMOEs = __library.get(b"JLINKARM_GetMOEs\0").map(|sym| *sym);
        let JLINK_GetMOEs = __library.get(b"JLINK_GetMOEs\0").map(|sym| *sym);
        let JLINKARM_GetNumBPs = __library.get(b"JLINKARM_GetNumBPs\0").map(|sym| *sym);
        let JLINK_GetNumBPs = __library.get(b"JLINK_GetNumBPs\0").map(|sym| *sym);
        let JLINKARM_GetNumBPUnits = __library.get(b"JLINKARM_GetNumBPUnits\0").map(|sym| *sym);
        let JLINK_GetNumBPUnits = __library.get(b"JLINK_GetNumBPUnits\0").map(|sym| *sym);
        let JLINKARM_GetNumWPs = __library.get(b"JLINKARM_GetNumWPs\0").map(|sym| *sym);
        let JLINK_GetNumWPs = __library.get(b"JLINK_GetNumWPs\0").map(|sym| *sym);
        let JLINKARM_GetNumWPUnits = __library.get(b"JLINKARM_GetNumWPUnits\0").map(|sym| *sym);
        let JLINK_GetNumWPUnits = __library.get(b"JLINK_GetNumWPUnits\0").map(|sym| *sym);
        let JLINKARM_GetOEMString = __library.get(b"JLINKARM_GetOEMString\0").map(|sym| *sym);
        let JLINK_GetOEMString = __library.get(b"JLINK_GetOEMString\0").map(|sym| *sym);
        let JLINKARM_GetPerformanceCnt = __library
            .get(b"JLINKARM_GetPerformanceCnt\0")
            .map(|sym| *sym);
        let JLINK_GetPerformanceCnt = __library.get(b"JLINK_GetPerformanceCnt\0").map(|sym| *sym);
        let JLINKARM_GetpSharedMem = __library.get(b"JLINKARM_GetpSharedMem\0").map(|sym| *sym);
        let JLINK_GetpSharedMem = __library.get(b"JLINK_GetpSharedMem\0").map(|sym| *sym);
        let JLINKARM_GetRegisterList = __library.get(b"JLINKARM_GetRegisterList\0").map(|sym| *sym);
        let JLINK_GetRegisterList = __library.get(b"JLINK_GetRegisterList\0").map(|sym| *sym);
        let JLINKARM_GetRegisterName = __library.get(b"JLINKARM_GetRegisterName\0").map(|sym| *sym);
        let JLINK_GetRegisterName = __library.get(b"JLINK_GetRegisterName\0").map(|sym| *sym);
        let JLINKARM_GetResetTypeDesc = __library
            .get(b"JLINKARM_GetResetTypeDesc\0")
            .map(|sym| *sym);
        let JLINK_GetResetTypeDesc = __library.get(b"JLINK_GetResetTypeDesc\0").map(|sym| *sym);
        let JLINKARM_GetScanLen = __library.get(b"JLINKARM_GetScanLen\0").map(|sym| *sym);
        let JLINK_GetScanLen = __library.get(b"JLINK_GetScanLen\0").map(|sym| *sym);
        let JLINKARM_GetSelDevice = __library.get(b"JLINKARM_GetSelDevice\0").map(|sym| *sym);
        let JLINK_GetSelDevice = __library.get(b"JLINK_GetSelDevice\0").map(|sym| *sym);
        let JLINKARM_GetSN = __library.get(b"JLINKARM_GetSN\0").map(|sym| *sym);
        let JLINK_GetSN = __library.get(b"JLINK_GetSN\0").map(|sym| *sym);
        let JLINKARM_GetSpeed = __library.get(b"JLINKARM_GetSpeed\0").map(|sym| *sym);
        let JLINK_GetSpeed = __library.get(b"JLINK_GetSpeed\0").map(|sym| *sym);
        let JLINKARM_GetSpeedInfo = __library.get(b"JLINKARM_GetSpeedInfo\0").map(|sym| *sym);
        let JLINK_GetSpeedInfo = __library.get(b"JLINK_GetSpeedInfo\0").map(|sym| *sym);
        let JLINKARM_GetWPInfoEx = __library.get(b"JLINKARM_GetWPInfoEx\0").map(|sym| *sym);
        let JLINK_GetWPInfoEx = __library.get(b"JLINK_GetWPInfoEx\0").map(|sym| *sym);
        let JLINKARM_Go = __library.get(b"JLINKARM_Go\0").map(|sym| *sym);
        let JLINK_Go = __library.get(b"JLINK_Go\0").map(|sym| *sym);
        let JLINKARM_GoAllowSim = __library.get(b"JLINKARM_GoAllowSim\0").map(|sym| *sym);
        let JLINK_GoAllowSim = __library.get(b"JLINK_GoAllowSim\0").map(|sym| *sym);
        let JLINKARM_GoEx = __library.get(b"JLINKARM_GoEx\0").map(|sym| *sym);
        let JLINK_GoEx = __library.get(b"JLINK_GoEx\0").map(|sym| *sym);
        let JLINKARM_GoHalt = __library.get(b"JLINKARM_GoHalt\0").map(|sym| *sym);
        let JLINK_GoHalt = __library.get(b"JLINK_GoHalt\0").map(|sym| *sym);
        let JLINKARM_GoIntDis = __library.get(b"JLINKARM_GoIntDis\0").map(|sym| *sym);
        let JLINK_GoIntDis = __library.get(b"JLINK_GoIntDis\0").map(|sym| *sym);
        let JLINKARM_Halt = __library.get(b"JLINKARM_Halt\0").map(|sym| *sym);
        let JLINK_Halt = __library.get(b"JLINK_Halt\0").map(|sym| *sym);
        let JLINKARM_HasError = __library.get(b"JLINKARM_HasError\0").map(|sym| *sym);
        let JLINK_HasError = __library.get(b"JLINK_HasError\0").map(|sym| *sym);
        let JLINKARM_IsConnected = __library.get(b"JLINKARM_IsConnected\0").map(|sym| *sym);
        let JLINK_IsConnected = __library.get(b"JLINK_IsConnected\0").map(|sym| *sym);
        let JLINKARM_IsHalted = __library.get(b"JLINKARM_IsHalted\0").map(|sym| *sym);
        let JLINK_IsHalted = __library.get(b"JLINK_IsHalted\0").map(|sym| *sym);
        let JLINKARM_IsOpen = __library.get(b"JLINKARM_IsOpen\0").map(|sym| *sym);
        let JLINK_IsOpen = __library.get(b"JLINK_IsOpen\0").map(|sym| *sym);
        let JLINKARM_Lock = __library.get(b"JLINKARM_Lock\0").map(|sym| *sym);
        let JLINK_Lock = __library.get(b"JLINK_Lock\0").map(|sym| *sym);
        let JLINKARM_MeasureCPUSpeed = __library.get(b"JLINKARM_MeasureCPUSpeed\0").map(|sym| *sym);
        let JLINK_MeasureCPUSpeed = __library.get(b"JLINK_MeasureCPUSpeed\0").map(|sym| *sym);
        let JLINKARM_MeasureCPUSpeedEx = __library
            .get(b"JLINKARM_MeasureCPUSpeedEx\0")
            .map(|sym| *sym);
        let JLINK_MeasureCPUSpeedEx = __library.get(b"JLINK_MeasureCPUSpeedEx\0").map(|sym| *sym);
        let JLINKARM_MeasureRTCKReactTime = __library
            .get(b"JLINKARM_MeasureRTCKReactTime\0")
            .map(|sym| *sym);
        let JLINK_MeasureRTCKReactTime = __library
            .get(b"JLINK_MeasureRTCKReactTime\0")
            .map(|sym| *sym);
        let JLINKARM_MeasureSCLen = __library.get(b"JLINKARM_MeasureSCLen\0").map(|sym| *sym);
        let JLINK_MeasureSCLen = __library.get(b"JLINK_MeasureSCLen\0").map(|sym| *sym);
        let JLINKARM_Open = __library.get(b"JLINKARM_Open\0").map(|sym| *sym);
        let JLINK_Open = __library.get(b"JLINK_Open\0").map(|sym| *sym);
        let JLINKARM_OpenEx = __library.get(b"JLINKARM_OpenEx\0").map(|sym| *sym);
        let JLINK_OpenEx = __library.get(b"JLINK_OpenEx\0").map(|sym| *sym);
        let JLINKARM_ReadCodeMem = __library.get(b"JLINKARM_ReadCodeMem\0").map(|sym| *sym);
        let JLINK_ReadCodeMem = __library.get(b"JLINK_ReadCodeMem\0").map(|sym| *sym);
        let JLINKARM_ReadConfigReg = __library.get(b"JLINKARM_ReadConfigReg\0").map(|sym| *sym);
        let JLINK_ReadConfigReg = __library.get(b"JLINK_ReadConfigReg\0").map(|sym| *sym);
        let JLINKARM_ReadControlReg = __library.get(b"JLINKARM_ReadControlReg\0").map(|sym| *sym);
        let JLINK_ReadControlReg = __library.get(b"JLINK_ReadControlReg\0").map(|sym| *sym);
        let JLINKARM_ReadDCC = __library.get(b"JLINKARM_ReadDCC\0").map(|sym| *sym);
        let JLINK_ReadDCC = __library.get(b"JLINK_ReadDCC\0").map(|sym| *sym);
        let JLINKARM_ReadDCCFast = __library.get(b"JLINKARM_ReadDCCFast\0").map(|sym| *sym);
        let JLINK_ReadDCCFast = __library.get(b"JLINK_ReadDCCFast\0").map(|sym| *sym);
        let JLINKARM_ReadTerminal = __library.get(b"JLINKARM_ReadTerminal\0").map(|sym| *sym);
        let JLINK_ReadTerminal = __library.get(b"JLINK_ReadTerminal\0").map(|sym| *sym);
        let JLINKARM_ReadDebugPort = __library.get(b"JLINKARM_ReadDebugPort\0").map(|sym| *sym);
        let JLINK_ReadDebugPort = __library.get(b"JLINK_ReadDebugPort\0").map(|sym| *sym);
        let JLINKARM_ReadDebugReg = __library.get(b"JLINKARM_ReadDebugReg\0").map(|sym| *sym);
        let JLINK_ReadDebugReg = __library.get(b"JLINK_ReadDebugReg\0").map(|sym| *sym);
        let JLINKARM_ReadEmu = __library.get(b"JLINKARM_ReadEmu\0").map(|sym| *sym);
        let JLINK_ReadEmu = __library.get(b"JLINK_ReadEmu\0").map(|sym| *sym);
        let JLINKARM_ReadEmuConfigMem = __library
            .get(b"JLINKARM_ReadEmuConfigMem\0")
            .map(|sym| *sym);
        let JLINK_ReadEmuConfigMem = __library.get(b"JLINK_ReadEmuConfigMem\0").map(|sym| *sym);
        let JLINKARM_ReadICEReg = __library.get(b"JLINKARM_ReadICEReg\0").map(|sym| *sym);
        let JLINK_ReadICEReg = __library.get(b"JLINK_ReadICEReg\0").map(|sym| *sym);
        let JLINKARM_ReadMem = __library.get(b"JLINKARM_ReadMem\0").map(|sym| *sym);
        let JLINK_ReadMem = __library.get(b"JLINK_ReadMem\0").map(|sym| *sym);
        let JLINKARM_ReadMemEx = __library.get(b"JLINKARM_ReadMemEx\0").map(|sym| *sym);
        let JLINK_ReadMemEx = __library.get(b"JLINK_ReadMemEx\0").map(|sym| *sym);
        let JLINKARM_ReadMemHW = __library.get(b"JLINKARM_ReadMemHW\0").map(|sym| *sym);
        let JLINK_ReadMemHW = __library.get(b"JLINK_ReadMemHW\0").map(|sym| *sym);
        let JLINKARM_ReadMemIndirect = __library.get(b"JLINKARM_ReadMemIndirect\0").map(|sym| *sym);
        let JLINK_ReadMemIndirect = __library.get(b"JLINK_ReadMemIndirect\0").map(|sym| *sym);
        let JLINKARM_ReadMemU8 = __library.get(b"JLINKARM_ReadMemU8\0").map(|sym| *sym);
        let JLINK_ReadMemU8 = __library.get(b"JLINK_ReadMemU8\0").map(|sym| *sym);
        let JLINKARM_ReadMemU16 = __library.get(b"JLINKARM_ReadMemU16\0").map(|sym| *sym);
        let JLINK_ReadMemU16 = __library.get(b"JLINK_ReadMemU16\0").map(|sym| *sym);
        let JLINKARM_ReadMemU32 = __library.get(b"JLINKARM_ReadMemU32\0").map(|sym| *sym);
        let JLINK_ReadMemU32 = __library.get(b"JLINK_ReadMemU32\0").map(|sym| *sym);
        let JLINKARM_ReadMemU64 = __library.get(b"JLINKARM_ReadMemU64\0").map(|sym| *sym);
        let JLINK_ReadMemU64 = __library.get(b"JLINK_ReadMemU64\0").map(|sym| *sym);
        let JLINKARM_ReadReg = __library.get(b"JLINKARM_ReadReg\0").map(|sym| *sym);
        let JLINK_ReadReg = __library.get(b"JLINK_ReadReg\0").map(|sym| *sym);
        let JLINKARM_ReadRegs = __library.get(b"JLINKARM_ReadRegs\0").map(|sym| *sym);
        let JLINK_ReadRegs = __library.get(b"JLINK_ReadRegs\0").map(|sym| *sym);
        let JLINKARM_Reset = __library.get(b"JLINKARM_Reset\0").map(|sym| *sym);
        let JLINK_Reset = __library.get(b"JLINK_Reset\0").map(|sym| *sym);
        let JLINKARM_ResetNoHalt = __library.get(b"JLINKARM_ResetNoHalt\0").map(|sym| *sym);
        let JLINK_ResetNoHalt = __library.get(b"JLINK_ResetNoHalt\0").map(|sym| *sym);
        let JLINKARM_ResetPullsRESET = __library.get(b"JLINKARM_ResetPullsRESET\0").map(|sym| *sym);
        let JLINK_ResetPullsRESET = __library.get(b"JLINK_ResetPullsRESET\0").map(|sym| *sym);
        let JLINKARM_ResetPullsTRST = __library.get(b"JLINKARM_ResetPullsTRST\0").map(|sym| *sym);
        let JLINK_ResetPullsTRST = __library.get(b"JLINK_ResetPullsTRST\0").map(|sym| *sym);
        let JLINKARM_ResetTRST = __library.get(b"JLINKARM_ResetTRST\0").map(|sym| *sym);
        let JLINK_ResetTRST = __library.get(b"JLINK_ResetTRST\0").map(|sym| *sym);
        let JLINKARM_SelectDeviceFamily = __library
            .get(b"JLINKARM_SelectDeviceFamily\0")
            .map(|sym| *sym);
        let JLINK_SelectDeviceFamily = __library.get(b"JLINK_SelectDeviceFamily\0").map(|sym| *sym);
        let JLINKARM_SelectIP = __library.get(b"JLINKARM_SelectIP\0").map(|sym| *sym);
        let JLINK_SelectIP = __library.get(b"JLINK_SelectIP\0").map(|sym| *sym);
        let JLINKARM_SelectTraceSource = __library
            .get(b"JLINKARM_SelectTraceSource\0")
            .map(|sym| *sym);
        let JLINK_SelectTraceSource = __library.get(b"JLINK_SelectTraceSource\0").map(|sym| *sym);
        let JLINKARM_SelectUSB = __library.get(b"JLINKARM_SelectUSB\0").map(|sym| *sym);
        let JLINK_SelectUSB = __library.get(b"JLINK_SelectUSB\0").map(|sym| *sym);
        let JLINKARM_SetBP = __library.get(b"JLINKARM_SetBP\0").map(|sym| *sym);
        let JLINK_SetBP = __library.get(b"JLINK_SetBP\0").map(|sym| *sym);
        let JLINKARM_SetBPEx = __library.get(b"JLINKARM_SetBPEx\0").map(|sym| *sym);
        let JLINK_SetBPEx = __library.get(b"JLINK_SetBPEx\0").map(|sym| *sym);
        let JLINKARM_SetCoreIndex = __library.get(b"JLINKARM_SetCoreIndex\0").map(|sym| *sym);
        let JLINKARM_SetDataEvent = __library.get(b"JLINKARM_SetDataEvent\0").map(|sym| *sym);
        let JLINK_SetDataEvent = __library.get(b"JLINK_SetDataEvent\0").map(|sym| *sym);
        let JLINKARM_SetDebugUnitBlockMask = __library
            .get(b"JLINKARM_SetDebugUnitBlockMask\0")
            .map(|sym| *sym);
        let JLINK_SetDebugUnitBlockMask = __library
            .get(b"JLINK_SetDebugUnitBlockMask\0")
            .map(|sym| *sym);
        let JLINKARM_SetEndian = __library.get(b"JLINKARM_SetEndian\0").map(|sym| *sym);
        let JLINK_SetEndian = __library.get(b"JLINK_SetEndian\0").map(|sym| *sym);
        let JLINKARM_SetErrorOutHandler = __library
            .get(b"JLINKARM_SetErrorOutHandler\0")
            .map(|sym| *sym);
        let JLINK_SetErrorOutHandler = __library.get(b"JLINK_SetErrorOutHandler\0").map(|sym| *sym);
        let JLINKARM_SetInitRegsOnReset = __library
            .get(b"JLINKARM_SetInitRegsOnReset\0")
            .map(|sym| *sym);
        let JLINK_SetInitRegsOnReset = __library.get(b"JLINK_SetInitRegsOnReset\0").map(|sym| *sym);
        let JLINKARM_SetLogFile = __library.get(b"JLINKARM_SetLogFile\0").map(|sym| *sym);
        let JLINK_SetLogFile = __library.get(b"JLINK_SetLogFile\0").map(|sym| *sym);
        let JLINKARM_SetMaxSpeed = __library.get(b"JLINKARM_SetMaxSpeed\0").map(|sym| *sym);
        let JLINK_SetMaxSpeed = __library.get(b"JLINK_SetMaxSpeed\0").map(|sym| *sym);
        let JLINKARM_SetRESET = __library.get(b"JLINKARM_SetRESET\0").map(|sym| *sym);
        let JLINK_SetRESET = __library.get(b"JLINK_SetRESET\0").map(|sym| *sym);
        let JLINKARM_SetResetDelay = __library.get(b"JLINKARM_SetResetDelay\0").map(|sym| *sym);
        let JLINK_SetResetDelay = __library.get(b"JLINK_SetResetDelay\0").map(|sym| *sym);
        let JLINKARM_SetResetPara = __library.get(b"JLINKARM_SetResetPara\0").map(|sym| *sym);
        let JLINK_SetResetPara = __library.get(b"JLINK_SetResetPara\0").map(|sym| *sym);
        let JLINKARM_SetResetType = __library.get(b"JLINKARM_SetResetType\0").map(|sym| *sym);
        let JLINK_SetResetType = __library.get(b"JLINK_SetResetType\0").map(|sym| *sym);
        let JLINKARM_SetSpeed = __library.get(b"JLINKARM_SetSpeed\0").map(|sym| *sym);
        let JLINK_SetSpeed = __library.get(b"JLINK_SetSpeed\0").map(|sym| *sym);
        let JLINKARM_SetTCK = __library.get(b"JLINKARM_SetTCK\0").map(|sym| *sym);
        let JLINK_SetTCK = __library.get(b"JLINK_SetTCK\0").map(|sym| *sym);
        let JLINKARM_SetTDI = __library.get(b"JLINKARM_SetTDI\0").map(|sym| *sym);
        let JLINK_SetTDI = __library.get(b"JLINK_SetTDI\0").map(|sym| *sym);
        let JLINKARM_SetTMS = __library.get(b"JLINKARM_SetTMS\0").map(|sym| *sym);
        let JLINK_SetTMS = __library.get(b"JLINK_SetTMS\0").map(|sym| *sym);
        let JLINKARM_SetTRST = __library.get(b"JLINKARM_SetTRST\0").map(|sym| *sym);
        let JLINK_SetTRST = __library.get(b"JLINK_SetTRST\0").map(|sym| *sym);
        let JLINKARM_SetWaitFunction = __library.get(b"JLINKARM_SetWaitFunction\0").map(|sym| *sym);
        let JLINK_SetWaitFunction = __library.get(b"JLINK_SetWaitFunction\0").map(|sym| *sym);
        let JLINKARM_SetWarnOutHandler = __library
            .get(b"JLINKARM_SetWarnOutHandler\0")
            .map(|sym| *sym);
        let JLINK_SetWarnOutHandler = __library.get(b"JLINK_SetWarnOutHandler\0").map(|sym| *sym);
        let JLINKARM_SetWP = __library.get(b"JLINKARM_SetWP\0").map(|sym| *sym);
        let JLINK_SetWP = __library.get(b"JLINK_SetWP\0").map(|sym| *sym);
        let JLINKARM_SimulateInstruction = __library
            .get(b"JLINKARM_SimulateInstruction\0")
            .map(|sym| *sym);
        let JLINK_SimulateInstruction = __library
            .get(b"JLINK_SimulateInstruction\0")
            .map(|sym| *sym);
        let JLINKARM_Step = __library.get(b"JLINKARM_Step\0").map(|sym| *sym);
        let JLINK_Step = __library.get(b"JLINK_Step\0").map(|sym| *sym);
        let JLINKARM_StoreBits = __library.get(b"JLINKARM_StoreBits\0").map(|sym| *sym);
        let JLINK_StoreBits = __library.get(b"JLINK_StoreBits\0").map(|sym| *sym);
        let JLINKARM_Test = __library.get(b"JLINKARM_Test\0").map(|sym| *sym);
        let JLINK_Test = __library.get(b"JLINK_Test\0").map(|sym| *sym);
        let JLINKARM_Unlock = __library.get(b"JLINKARM_Unlock\0").map(|sym| *sym);
        let JLINK_Unlock = __library.get(b"JLINK_Unlock\0").map(|sym| *sym);
        let JLINKARM_UpdateFirmware = __library.get(b"JLINKARM_UpdateFirmware\0").map(|sym| *sym);
        let JLINK_UpdateFirmware = __library.get(b"JLINK_UpdateFirmware\0").map(|sym| *sym);
        let JLINKARM_UpdateFirmwareIfNewer = __library
            .get(b"JLINKARM_UpdateFirmwareIfNewer\0")
            .map(|sym| *sym);
        let JLINK_UpdateFirmwareIfNewer = __library
            .get(b"JLINK_UpdateFirmwareIfNewer\0")
            .map(|sym| *sym);
        let JLINKARM_UpdateReplaceFirmware = __library
            .get(b"JLINKARM_UpdateReplaceFirmware\0")
            .map(|sym| *sym);
        let JLINK_UpdateReplaceFirmware = __library
            .get(b"JLINK_UpdateReplaceFirmware\0")
            .map(|sym| *sym);
        let JLINKARM_WaitDCCRead = __library.get(b"JLINKARM_WaitDCCRead\0").map(|sym| *sym);
        let JLINK_WaitDCCRead = __library.get(b"JLINK_WaitDCCRead\0").map(|sym| *sym);
        let JLINKARM_WaitForHalt = __library.get(b"JLINKARM_WaitForHalt\0").map(|sym| *sym);
        let JLINK_WaitForHalt = __library.get(b"JLINK_WaitForHalt\0").map(|sym| *sym);
        let JLINKARM_WriteConfigReg = __library.get(b"JLINKARM_WriteConfigReg\0").map(|sym| *sym);
        let JLINK_WriteConfigReg = __library.get(b"JLINK_WriteConfigReg\0").map(|sym| *sym);
        let JLINKARM_WriteControlReg = __library.get(b"JLINKARM_WriteControlReg\0").map(|sym| *sym);
        let JLINK_WriteControlReg = __library.get(b"JLINK_WriteControlReg\0").map(|sym| *sym);
        let JLINKARM_WriteDCC = __library.get(b"JLINKARM_WriteDCC\0").map(|sym| *sym);
        let JLINK_WriteDCC = __library.get(b"JLINK_WriteDCC\0").map(|sym| *sym);
        let JLINKARM_WriteDCCFast = __library.get(b"JLINKARM_WriteDCCFast\0").map(|sym| *sym);
        let JLINK_WriteDCCFast = __library.get(b"JLINK_WriteDCCFast\0").map(|sym| *sym);
        let JLINKARM_WriteDebugPort = __library.get(b"JLINKARM_WriteDebugPort\0").map(|sym| *sym);
        let JLINK_WriteDebugPort = __library.get(b"JLINK_WriteDebugPort\0").map(|sym| *sym);
        let JLINKARM_WriteDebugReg = __library.get(b"JLINKARM_WriteDebugReg\0").map(|sym| *sym);
        let JLINK_WriteDebugReg = __library.get(b"JLINK_WriteDebugReg\0").map(|sym| *sym);
        let JLINKARM_WriteEmu = __library.get(b"JLINKARM_WriteEmu\0").map(|sym| *sym);
        let JLINK_WriteEmu = __library.get(b"JLINK_WriteEmu\0").map(|sym| *sym);
        let JLINKARM_WriteEmuConfigMem = __library
            .get(b"JLINKARM_WriteEmuConfigMem\0")
            .map(|sym| *sym);
        let JLINK_WriteEmuConfigMem = __library.get(b"JLINK_WriteEmuConfigMem\0").map(|sym| *sym);
        let JLINKARM_WriteICEReg = __library.get(b"JLINKARM_WriteICEReg\0").map(|sym| *sym);
        let JLINK_WriteICEReg = __library.get(b"JLINK_WriteICEReg\0").map(|sym| *sym);
        let JLINKARM_WriteMem = __library.get(b"JLINKARM_WriteMem\0").map(|sym| *sym);
        let JLINK_WriteMem = __library.get(b"JLINK_WriteMem\0").map(|sym| *sym);
        let JLINKARM_WriteMemDelayed = __library.get(b"JLINKARM_WriteMemDelayed\0").map(|sym| *sym);
        let JLINK_WriteMemDelayed = __library.get(b"JLINK_WriteMemDelayed\0").map(|sym| *sym);
        let JLINKARM_WriteMemEx = __library.get(b"JLINKARM_WriteMemEx\0").map(|sym| *sym);
        let JLINK_WriteMemEx = __library.get(b"JLINK_WriteMemEx\0").map(|sym| *sym);
        let JLINKARM_WriteMemHW = __library.get(b"JLINKARM_WriteMemHW\0").map(|sym| *sym);
        let JLINK_WriteMemHW = __library.get(b"JLINK_WriteMemHW\0").map(|sym| *sym);
        let JLINKARM_WriteMemMultiple = __library
            .get(b"JLINKARM_WriteMemMultiple\0")
            .map(|sym| *sym);
        let JLINKARM_WriteReg = __library.get(b"JLINKARM_WriteReg\0").map(|sym| *sym);
        let JLINK_WriteReg = __library.get(b"JLINK_WriteReg\0").map(|sym| *sym);
        let JLINKARM_WriteRegs = __library.get(b"JLINKARM_WriteRegs\0").map(|sym| *sym);
        let JLINK_WriteRegs = __library.get(b"JLINK_WriteRegs\0").map(|sym| *sym);
        let JLINKARM_WriteU8 = __library.get(b"JLINKARM_WriteU8\0").map(|sym| *sym);
        let JLINK_WriteU8 = __library.get(b"JLINK_WriteU8\0").map(|sym| *sym);
        let JLINKARM_WriteU16 = __library.get(b"JLINKARM_WriteU16\0").map(|sym| *sym);
        let JLINK_WriteU16 = __library.get(b"JLINK_WriteU16\0").map(|sym| *sym);
        let JLINKARM_WriteU32 = __library.get(b"JLINKARM_WriteU32\0").map(|sym| *sym);
        let JLINK_WriteU32 = __library.get(b"JLINK_WriteU32\0").map(|sym| *sym);
        let JLINKARM_WriteU64 = __library.get(b"JLINKARM_WriteU64\0").map(|sym| *sym);
        let JLINK_WriteU64 = __library.get(b"JLINK_WriteU64\0").map(|sym| *sym);
        let JLINKARM_WriteVectorCatch = __library
            .get(b"JLINKARM_WriteVectorCatch\0")
            .map(|sym| *sym);
        let JLINK_WriteVectorCatch = __library.get(b"JLINK_WriteVectorCatch\0").map(|sym| *sym);
        let JLINKARM_WriteVerifyMem = __library.get(b"JLINKARM_WriteVerifyMem\0").map(|sym| *sym);
        let JLINK_WriteVerifyMem = __library.get(b"JLINK_WriteVerifyMem\0").map(|sym| *sym);
        let JLINKARM_BMI_Get = __library.get(b"JLINKARM_BMI_Get\0").map(|sym| *sym);
        let JLINKARM_BMI_Set = __library.get(b"JLINKARM_BMI_Set\0").map(|sym| *sym);
        let JLINKARM_CDC_Read = __library.get(b"JLINKARM_CDC_Read\0").map(|sym| *sym);
        let JLINKARM_CDC_SetBaudrate = __library.get(b"JLINKARM_CDC_SetBaudrate\0").map(|sym| *sym);
        let JLINKARM_CDC_SetHookFuncs = __library
            .get(b"JLINKARM_CDC_SetHookFuncs\0")
            .map(|sym| *sym);
        let JLINKARM_CDC_SetRTSState = __library.get(b"JLINKARM_CDC_SetRTSState\0").map(|sym| *sym);
        let JLINKARM_CDC_SetTimeoutLastCDCRead = __library
            .get(b"JLINKARM_CDC_SetTimeoutLastCDCRead\0")
            .map(|sym| *sym);
        let JLINKARM_CDC_Write = __library.get(b"JLINKARM_CDC_Write\0").map(|sym| *sym);
        let JLINKARM_CORE_GetFound = __library.get(b"JLINKARM_CORE_GetFound\0").map(|sym| *sym);
        let JLINK_CORE_GetFound = __library.get(b"JLINK_CORE_GetFound\0").map(|sym| *sym);
        let JLINKARM_CORE_Select = __library.get(b"JLINKARM_CORE_Select\0").map(|sym| *sym);
        let JLINK_CORE_Select = __library.get(b"JLINK_CORE_Select\0").map(|sym| *sym);
        let JLINKARM_CORESIGHT_Configure = __library
            .get(b"JLINKARM_CORESIGHT_Configure\0")
            .map(|sym| *sym);
        let JLINK_CORESIGHT_Configure = __library
            .get(b"JLINK_CORESIGHT_Configure\0")
            .map(|sym| *sym);
        let JLINKARM_CORESIGHT_ReadAPDPReg = __library
            .get(b"JLINKARM_CORESIGHT_ReadAPDPReg\0")
            .map(|sym| *sym);
        let JLINK_CORESIGHT_ReadAPDPReg = __library
            .get(b"JLINK_CORESIGHT_ReadAPDPReg\0")
            .map(|sym| *sym);
        let JLINKARM_CORESIGHT_WriteAPDPReg = __library
            .get(b"JLINKARM_CORESIGHT_WriteAPDPReg\0")
            .map(|sym| *sym);
        let JLINK_CORESIGHT_WriteAPDPReg = __library
            .get(b"JLINK_CORESIGHT_WriteAPDPReg\0")
            .map(|sym| *sym);
        let JLINKARM_CP15_IsPresent = __library.get(b"JLINKARM_CP15_IsPresent\0").map(|sym| *sym);
        let JLINK_CP15_IsPresent = __library.get(b"JLINK_CP15_IsPresent\0").map(|sym| *sym);
        let JLINKARM_CP15_ReadEx = __library.get(b"JLINKARM_CP15_ReadEx\0").map(|sym| *sym);
        let JLINK_CP15_ReadEx = __library.get(b"JLINK_CP15_ReadEx\0").map(|sym| *sym);
        let JLINKARM_CP15_ReadReg = __library.get(b"JLINKARM_CP15_ReadReg\0").map(|sym| *sym);
        let JLINK_CP15_ReadReg = __library.get(b"JLINK_CP15_ReadReg\0").map(|sym| *sym);
        let JLINKARM_CP15_WriteEx = __library.get(b"JLINKARM_CP15_WriteEx\0").map(|sym| *sym);
        let JLINK_CP15_WriteEx = __library.get(b"JLINK_CP15_WriteEx\0").map(|sym| *sym);
        let JLINKARM_CP15_WriteReg = __library.get(b"JLINKARM_CP15_WriteReg\0").map(|sym| *sym);
        let JLINK_CP15_WriteReg = __library.get(b"JLINK_CP15_WriteReg\0").map(|sym| *sym);
        let JLINKARM_DEVICE_GetIndex = __library.get(b"JLINKARM_DEVICE_GetIndex\0").map(|sym| *sym);
        let JLINK_DEVICE_GetIndex = __library.get(b"JLINK_DEVICE_GetIndex\0").map(|sym| *sym);
        let JLINKARM_DEVICE_GetInfo = __library.get(b"JLINKARM_DEVICE_GetInfo\0").map(|sym| *sym);
        let JLINK_DEVICE_GetInfo = __library.get(b"JLINK_DEVICE_GetInfo\0").map(|sym| *sym);
        let JLINKARM_DEVICE_SelectDialog = __library
            .get(b"JLINKARM_DEVICE_SelectDialog\0")
            .map(|sym| *sym);
        let JLINK_DEVICE_SelectDialog = __library
            .get(b"JLINK_DEVICE_SelectDialog\0")
            .map(|sym| *sym);
        let JLINKARM_EMU_GetCounters = __library.get(b"JLINKARM_EMU_GetCounters\0").map(|sym| *sym);
        let JLINK_EMU_GetCounters = __library.get(b"JLINK_EMU_GetCounters\0").map(|sym| *sym);
        let JLINKARM_EMU_GetDeviceInfo = __library
            .get(b"JLINKARM_EMU_GetDeviceInfo\0")
            .map(|sym| *sym);
        let JLINK_EMU_GetDeviceInfo = __library.get(b"JLINK_EMU_GetDeviceInfo\0").map(|sym| *sym);
        let JLINKARM_EMU_GetList = __library.get(b"JLINKARM_EMU_GetList\0").map(|sym| *sym);
        let JLINK_EMU_GetList = __library.get(b"JLINK_EMU_GetList\0").map(|sym| *sym);
        let JLINKARM_EMU_GetMaxMemBlock = __library
            .get(b"JLINKARM_EMU_GetMaxMemBlock\0")
            .map(|sym| *sym);
        let JLINK_EMU_GetMaxMemBlock = __library.get(b"JLINK_EMU_GetMaxMemBlock\0").map(|sym| *sym);
        let JLINKARM_EMU_GetNumConnections = __library
            .get(b"JLINKARM_EMU_GetNumConnections\0")
            .map(|sym| *sym);
        let JLINK_EMU_GetNumConnections = __library
            .get(b"JLINK_EMU_GetNumConnections\0")
            .map(|sym| *sym);
        let JLINKARM_EMU_GetNumDevices = __library
            .get(b"JLINKARM_EMU_GetNumDevices\0")
            .map(|sym| *sym);
        let JLINK_EMU_GetNumDevices = __library.get(b"JLINK_EMU_GetNumDevices\0").map(|sym| *sym);
        let JLINKARM_EMU_GetProductId = __library
            .get(b"JLINKARM_EMU_GetProductId\0")
            .map(|sym| *sym);
        let JLINK_EMU_GetProductId = __library.get(b"JLINK_EMU_GetProductId\0").map(|sym| *sym);
        let JLINKARM_EMU_GetProductName = __library
            .get(b"JLINKARM_EMU_GetProductName\0")
            .map(|sym| *sym);
        let JLINK_EMU_GetProductName = __library.get(b"JLINK_EMU_GetProductName\0").map(|sym| *sym);
        let JLINKARM_EMU_HasCapEx = __library.get(b"JLINKARM_EMU_HasCapEx\0").map(|sym| *sym);
        let JLINK_EMU_HasCapEx = __library.get(b"JLINK_EMU_HasCapEx\0").map(|sym| *sym);
        let JLINKARM_EMU_HasCPUCap = __library.get(b"JLINKARM_EMU_HasCPUCap\0").map(|sym| *sym);
        let JLINK_EMU_HasCPUCap = __library.get(b"JLINK_EMU_HasCPUCap\0").map(|sym| *sym);
        let JLINKARM_EMU_IsConnected = __library.get(b"JLINKARM_EMU_IsConnected\0").map(|sym| *sym);
        let JLINK_EMU_IsConnected = __library.get(b"JLINK_EMU_IsConnected\0").map(|sym| *sym);
        let JLINKARM_EMU_SelectByIndex = __library
            .get(b"JLINKARM_EMU_SelectByIndex\0")
            .map(|sym| *sym);
        let JLINK_EMU_SelectByIndex = __library.get(b"JLINK_EMU_SelectByIndex\0").map(|sym| *sym);
        let JLINKARM_EMU_SelectByUSBSN = __library
            .get(b"JLINKARM_EMU_SelectByUSBSN\0")
            .map(|sym| *sym);
        let JLINK_EMU_SelectByUSBSN = __library.get(b"JLINK_EMU_SelectByUSBSN\0").map(|sym| *sym);
        let JLINKARM_EMU_SelectIP = __library.get(b"JLINKARM_EMU_SelectIP\0").map(|sym| *sym);
        let JLINK_EMU_SelectIP = __library.get(b"JLINK_EMU_SelectIP\0").map(|sym| *sym);
        let JLINKARM_EMU_SelectIPBySN = __library
            .get(b"JLINKARM_EMU_SelectIPBySN\0")
            .map(|sym| *sym);
        let JLINK_EMU_SelectIPBySN = __library.get(b"JLINK_EMU_SelectIPBySN\0").map(|sym| *sym);
        let JLINKARM_EMU_TestNRSpeed = __library.get(b"JLINKARM_EMU_TestNRSpeed\0").map(|sym| *sym);
        let JLINK_EMU_TestNRSpeed = __library.get(b"JLINK_EMU_TestNRSpeed\0").map(|sym| *sym);
        let JLINKARM_EMU_TestNWSpeed = __library.get(b"JLINKARM_EMU_TestNWSpeed\0").map(|sym| *sym);
        let JLINK_EMU_TestNWSpeed = __library.get(b"JLINK_EMU_TestNWSpeed\0").map(|sym| *sym);
        let JLINKARM_EMU_COM_IsSupported = __library
            .get(b"JLINKARM_EMU_COM_IsSupported\0")
            .map(|sym| *sym);
        let JLINK_EMU_COM_IsSupported = __library
            .get(b"JLINK_EMU_COM_IsSupported\0")
            .map(|sym| *sym);
        let JLINKARM_EMU_COM_Read = __library.get(b"JLINKARM_EMU_COM_Read\0").map(|sym| *sym);
        let JLINK_EMU_COM_Read = __library.get(b"JLINK_EMU_COM_Read\0").map(|sym| *sym);
        let JLINKARM_EMU_COM_Write = __library.get(b"JLINKARM_EMU_COM_Write\0").map(|sym| *sym);
        let JLINK_EMU_COM_Write = __library.get(b"JLINK_EMU_COM_Write\0").map(|sym| *sym);
        let JLINKARM_EMU_FILE_Delete = __library.get(b"JLINKARM_EMU_FILE_Delete\0").map(|sym| *sym);
        let JLINK_EMU_FILE_Delete = __library.get(b"JLINK_EMU_FILE_Delete\0").map(|sym| *sym);
        let JLINKARM_EMU_FILE_GetList = __library
            .get(b"JLINKARM_EMU_FILE_GetList\0")
            .map(|sym| *sym);
        let JLINK_EMU_FILE_GetList = __library.get(b"JLINK_EMU_FILE_GetList\0").map(|sym| *sym);
        let JLINKARM_EMU_FILE_GetSize = __library
            .get(b"JLINKARM_EMU_FILE_GetSize\0")
            .map(|sym| *sym);
        let JLINK_EMU_FILE_GetSize = __library.get(b"JLINK_EMU_FILE_GetSize\0").map(|sym| *sym);
        let JLINKARM_EMU_FILE_Read = __library.get(b"JLINKARM_EMU_FILE_Read\0").map(|sym| *sym);
        let JLINK_EMU_FILE_Read = __library.get(b"JLINK_EMU_FILE_Read\0").map(|sym| *sym);
        let JLINKARM_EMU_FILE_Write = __library.get(b"JLINKARM_EMU_FILE_Write\0").map(|sym| *sym);
        let JLINK_EMU_FILE_Write = __library.get(b"JLINK_EMU_FILE_Write\0").map(|sym| *sym);
        let JLINKARM_ETB_IsPresent = __library.get(b"JLINKARM_ETB_IsPresent\0").map(|sym| *sym);
        let JLINK_ETB_IsPresent = __library.get(b"JLINK_ETB_IsPresent\0").map(|sym| *sym);
        let JLINKARM_ETB_ReadReg = __library.get(b"JLINKARM_ETB_ReadReg\0").map(|sym| *sym);
        let JLINK_ETB_ReadReg = __library.get(b"JLINK_ETB_ReadReg\0").map(|sym| *sym);
        let JLINKARM_ETB_WriteReg = __library.get(b"JLINKARM_ETB_WriteReg\0").map(|sym| *sym);
        let JLINK_ETB_WriteReg = __library.get(b"JLINK_ETB_WriteReg\0").map(|sym| *sym);
        let JLINKARM_ETM_IsPresent = __library.get(b"JLINKARM_ETM_IsPresent\0").map(|sym| *sym);
        let JLINK_ETM_IsPresent = __library.get(b"JLINK_ETM_IsPresent\0").map(|sym| *sym);
        let JLINKARM_ETM_ReadReg = __library.get(b"JLINKARM_ETM_ReadReg\0").map(|sym| *sym);
        let JLINK_ETM_ReadReg = __library.get(b"JLINK_ETM_ReadReg\0").map(|sym| *sym);
        let JLINKARM_ETM_StartTrace = __library.get(b"JLINKARM_ETM_StartTrace\0").map(|sym| *sym);
        let JLINK_ETM_StartTrace = __library.get(b"JLINK_ETM_StartTrace\0").map(|sym| *sym);
        let JLINKARM_ETM_WriteReg = __library.get(b"JLINKARM_ETM_WriteReg\0").map(|sym| *sym);
        let JLINK_ETM_WriteReg = __library.get(b"JLINK_ETM_WriteReg\0").map(|sym| *sym);
        let JLINKARM_INDICATORS_SetState = __library
            .get(b"JLINKARM_INDICATORS_SetState\0")
            .map(|sym| *sym);
        let JLINK_INDICATORS_SetState = __library
            .get(b"JLINK_INDICATORS_SetState\0")
            .map(|sym| *sym);
        let JLINKARM_JTAG_ConfigDevices = __library
            .get(b"JLINKARM_JTAG_ConfigDevices\0")
            .map(|sym| *sym);
        let JLINK_JTAG_ConfigDevices = __library.get(b"JLINK_JTAG_ConfigDevices\0").map(|sym| *sym);
        let JLINKARM_JTAG_DisableIF = __library.get(b"JLINKARM_JTAG_DisableIF\0").map(|sym| *sym);
        let JLINK_JTAG_DisableIF = __library.get(b"JLINK_JTAG_DisableIF\0").map(|sym| *sym);
        let JLINKARM_JTAG_EnableIF = __library.get(b"JLINKARM_JTAG_EnableIF\0").map(|sym| *sym);
        let JLINK_JTAG_EnableIF = __library.get(b"JLINK_JTAG_EnableIF\0").map(|sym| *sym);
        let JLINKARM_JTAG_GetData = __library.get(b"JLINKARM_JTAG_GetData\0").map(|sym| *sym);
        let JLINK_JTAG_GetData = __library.get(b"JLINK_JTAG_GetData\0").map(|sym| *sym);
        let JLINKARM_JTAG_GetDeviceId = __library
            .get(b"JLINKARM_JTAG_GetDeviceId\0")
            .map(|sym| *sym);
        let JLINK_JTAG_GetDeviceId = __library.get(b"JLINK_JTAG_GetDeviceId\0").map(|sym| *sym);
        let JLINKARM_JTAG_GetDeviceInfo = __library
            .get(b"JLINKARM_JTAG_GetDeviceInfo\0")
            .map(|sym| *sym);
        let JLINK_JTAG_GetDeviceInfo = __library.get(b"JLINK_JTAG_GetDeviceInfo\0").map(|sym| *sym);
        let JLINKARM_JTAG_GetU8 = __library.get(b"JLINKARM_JTAG_GetU8\0").map(|sym| *sym);
        let JLINK_JTAG_GetU8 = __library.get(b"JLINK_JTAG_GetU8\0").map(|sym| *sym);
        let JLINKARM_JTAG_GetU16 = __library.get(b"JLINKARM_JTAG_GetU16\0").map(|sym| *sym);
        let JLINK_JTAG_GetU16 = __library.get(b"JLINK_JTAG_GetU16\0").map(|sym| *sym);
        let JLINKARM_JTAG_GetU32 = __library.get(b"JLINKARM_JTAG_GetU32\0").map(|sym| *sym);
        let JLINK_JTAG_GetU32 = __library.get(b"JLINK_JTAG_GetU32\0").map(|sym| *sym);
        let JLINKARM_JTAG_StoreData = __library.get(b"JLINKARM_JTAG_StoreData\0").map(|sym| *sym);
        let JLINK_JTAG_StoreData = __library.get(b"JLINK_JTAG_StoreData\0").map(|sym| *sym);
        let JLINKARM_JTAG_StoreGetData = __library
            .get(b"JLINKARM_JTAG_StoreGetData\0")
            .map(|sym| *sym);
        let JLINK_JTAG_StoreGetData = __library.get(b"JLINK_JTAG_StoreGetData\0").map(|sym| *sym);
        let JLINKARM_JTAG_StoreGetRaw = __library
            .get(b"JLINKARM_JTAG_StoreGetRaw\0")
            .map(|sym| *sym);
        let JLINK_JTAG_StoreGetRaw = __library.get(b"JLINK_JTAG_StoreGetRaw\0").map(|sym| *sym);
        let JLINKARM_JTAG_StoreInst = __library.get(b"JLINKARM_JTAG_StoreInst\0").map(|sym| *sym);
        let JLINK_JTAG_StoreInst = __library.get(b"JLINK_JTAG_StoreInst\0").map(|sym| *sym);
        let JLINKARM_JTAG_StoreRaw = __library.get(b"JLINKARM_JTAG_StoreRaw\0").map(|sym| *sym);
        let JLINK_JTAG_StoreRaw = __library.get(b"JLINK_JTAG_StoreRaw\0").map(|sym| *sym);
        let JLINKARM_JTAG_SyncBits = __library.get(b"JLINKARM_JTAG_SyncBits\0").map(|sym| *sym);
        let JLINK_JTAG_SyncBits = __library.get(b"JLINK_JTAG_SyncBits\0").map(|sym| *sym);
        let JLINKARM_JTAG_SyncBytes = __library.get(b"JLINKARM_JTAG_SyncBytes\0").map(|sym| *sym);
        let JLINK_JTAG_SyncBytes = __library.get(b"JLINK_JTAG_SyncBytes\0").map(|sym| *sym);
        let JLINKARM_JTAG_WriteData = __library.get(b"JLINKARM_JTAG_WriteData\0").map(|sym| *sym);
        let JLINK_JTAG_WriteData = __library.get(b"JLINK_JTAG_WriteData\0").map(|sym| *sym);
        let JLINKARM_NET_Close = __library.get(b"JLINKARM_NET_Close\0").map(|sym| *sym);
        let JLINK_NET_Close = __library.get(b"JLINK_NET_Close\0").map(|sym| *sym);
        let JLINKARM_NET_Open = __library.get(b"JLINKARM_NET_Open\0").map(|sym| *sym);
        let JLINK_NET_Open = __library.get(b"JLINK_NET_Open\0").map(|sym| *sym);
        let JLINKARM_PCODE_Assemble = __library.get(b"JLINKARM_PCODE_Assemble\0").map(|sym| *sym);
        let JLINKARM_PCODE_Exec = __library.get(b"JLINKARM_PCODE_Exec\0").map(|sym| *sym);
        let JLINK_PCODE_Exec = __library.get(b"JLINK_PCODE_Exec\0").map(|sym| *sym);
        let JLINKARM_PCODE_GetCaps = __library.get(b"JLINKARM_PCODE_GetCaps\0").map(|sym| *sym);
        let JLINK_PCODE_GetCaps = __library.get(b"JLINK_PCODE_GetCaps\0").map(|sym| *sym);
        let JLINKARM_PCODE_GetS32Version = __library
            .get(b"JLINKARM_PCODE_GetS32Version\0")
            .map(|sym| *sym);
        let JLINK_PCODE_GetS32Version = __library
            .get(b"JLINK_PCODE_GetS32Version\0")
            .map(|sym| *sym);
        let JLINKARM_PCODE_GetDebugAPI = __library
            .get(b"JLINKARM_PCODE_GetDebugAPI\0")
            .map(|sym| *sym);
        let JLINKARM_RAWTRACE_Control = __library
            .get(b"JLINKARM_RAWTRACE_Control\0")
            .map(|sym| *sym);
        let JLINK_RAWTRACE_Control = __library.get(b"JLINK_RAWTRACE_Control\0").map(|sym| *sym);
        let JLINKARM_RAWTRACE_Read = __library.get(b"JLINKARM_RAWTRACE_Read\0").map(|sym| *sym);
        let JLINK_RAWTRACE_Read = __library.get(b"JLINK_RAWTRACE_Read\0").map(|sym| *sym);
        let JLINKARM_SWD_DisableSWCLK = __library
            .get(b"JLINKARM_SWD_DisableSWCLK\0")
            .map(|sym| *sym);
        let JLINK_SWD_DisableSWCLK = __library.get(b"JLINK_SWD_DisableSWCLK\0").map(|sym| *sym);
        let JLINKARM_SWD_EnableSWCLK = __library.get(b"JLINKARM_SWD_EnableSWCLK\0").map(|sym| *sym);
        let JLINK_SWD_EnableSWCLK = __library.get(b"JLINK_SWD_EnableSWCLK\0").map(|sym| *sym);
        let JLINKARM_SWD_SetDirIn = __library.get(b"JLINKARM_SWD_SetDirIn\0").map(|sym| *sym);
        let JLINK_SWD_SetDirIn = __library.get(b"JLINK_SWD_SetDirIn\0").map(|sym| *sym);
        let JLINKARM_SWD_SetDirOut = __library.get(b"JLINKARM_SWD_SetDirOut\0").map(|sym| *sym);
        let JLINK_SWD_SetDirOut = __library.get(b"JLINK_SWD_SetDirOut\0").map(|sym| *sym);
        let JLINKARM_SWO_Control = __library.get(b"JLINKARM_SWO_Control\0").map(|sym| *sym);
        let JLINK_SWO_Control = __library.get(b"JLINK_SWO_Control\0").map(|sym| *sym);
        let JLINKARM_SWO_DisableTarget = __library
            .get(b"JLINKARM_SWO_DisableTarget\0")
            .map(|sym| *sym);
        let JLINKARM_SWO_EnableTarget = __library
            .get(b"JLINKARM_SWO_EnableTarget\0")
            .map(|sym| *sym);
        let JLINKARM_SWO_GetCompatibleSpeeds = __library
            .get(b"JLINKARM_SWO_GetCompatibleSpeeds\0")
            .map(|sym| *sym);
        let JLINKARM_SWO_Read = __library.get(b"JLINKARM_SWO_Read\0").map(|sym| *sym);
        let JLINK_SWO_Read = __library.get(b"JLINK_SWO_Read\0").map(|sym| *sym);
        let JLINKARM_SWO_ReadStimulus = __library
            .get(b"JLINKARM_SWO_ReadStimulus\0")
            .map(|sym| *sym);
        let JLINKARM_TIF_GetAvailable = __library
            .get(b"JLINKARM_TIF_GetAvailable\0")
            .map(|sym| *sym);
        let JLINK_TIF_GetAvailable = __library.get(b"JLINK_TIF_GetAvailable\0").map(|sym| *sym);
        let JLINKARM_TIF_Select = __library.get(b"JLINKARM_TIF_Select\0").map(|sym| *sym);
        let JLINK_TIF_Select = __library.get(b"JLINK_TIF_Select\0").map(|sym| *sym);
        let JLINKARM_TRACE_Control = __library.get(b"JLINKARM_TRACE_Control\0").map(|sym| *sym);
        let JLINK_TRACE_Control = __library.get(b"JLINK_TRACE_Control\0").map(|sym| *sym);
        let JLINKARM_TRACE_Read = __library.get(b"JLINKARM_TRACE_Read\0").map(|sym| *sym);
        let JLINK_TRACE_Read = __library.get(b"JLINK_TRACE_Read\0").map(|sym| *sym);
        let JLINKARM_WA_AddRange = __library.get(b"JLINKARM_WA_AddRange\0").map(|sym| *sym);
        let JLINK_WA_AddRange = __library.get(b"JLINK_WA_AddRange\0").map(|sym| *sym);
        let JLINKARM_WA_Restore = __library.get(b"JLINKARM_WA_Restore\0").map(|sym| *sym);
        let JLINK_WA_Restore = __library.get(b"JLINK_WA_Restore\0").map(|sym| *sym);
        let JLINK_ReadMemEx_64 = __library.get(b"JLINK_ReadMemEx_64\0").map(|sym| *sym);
        let JLINK_ReadMemU8_64 = __library.get(b"JLINK_ReadMemU8_64\0").map(|sym| *sym);
        let JLINK_ReadMemU16_64 = __library.get(b"JLINK_ReadMemU16_64\0").map(|sym| *sym);
        let JLINK_ReadMemU32_64 = __library.get(b"JLINK_ReadMemU32_64\0").map(|sym| *sym);
        let JLINK_ReadMemU64_64 = __library.get(b"JLINK_ReadMemU64_64\0").map(|sym| *sym);
        let JLINK_ReadMemZonedEx_64 = __library.get(b"JLINK_ReadMemZonedEx_64\0").map(|sym| *sym);
        let JLINK_ReadMemZonedU32_64 = __library.get(b"JLINK_ReadMemZonedU32_64\0").map(|sym| *sym);
        let JLINK_ReadMemZonedU16_64 = __library.get(b"JLINK_ReadMemZonedU16_64\0").map(|sym| *sym);
        let JLINK_ReadRegs_64 = __library.get(b"JLINK_ReadRegs_64\0").map(|sym| *sym);
        let JLINK_SetBPEx_64 = __library.get(b"JLINK_SetBPEx_64\0").map(|sym| *sym);
        let JLINK_WriteMemEx_64 = __library.get(b"JLINK_WriteMemEx_64\0").map(|sym| *sym);
        let JLINK_WriteRegs_64 = __library.get(b"JLINK_WriteRegs_64\0").map(|sym| *sym);
        let JLINK_WriteU8_64 = __library.get(b"JLINK_WriteU8_64\0").map(|sym| *sym);
        let JLINK_WriteU16_64 = __library.get(b"JLINK_WriteU16_64\0").map(|sym| *sym);
        let JLINK_WriteU32_64 = __library.get(b"JLINK_WriteU32_64\0").map(|sym| *sym);
        let JLINK_WriteU64_64 = __library.get(b"JLINK_WriteU64_64\0").map(|sym| *sym);
        let JLINK_WriteMemZonedEx_64 = __library.get(b"JLINK_WriteMemZonedEx_64\0").map(|sym| *sym);
        let JLINK_WriteZonedU32_64 = __library.get(b"JLINK_WriteZonedU32_64\0").map(|sym| *sym);
        let JLINK_WriteZonedU16_64 = __library.get(b"JLINK_WriteZonedU16_64\0").map(|sym| *sym);
        let JLINKARM_TRACE_AddInst = __library.get(b"JLINKARM_TRACE_AddInst\0").map(|sym| *sym);
        let JLINK_TRACE_AddInst = __library.get(b"JLINK_TRACE_AddInst\0").map(|sym| *sym);
        let JLINKARM_TRACE_AddItems = __library.get(b"JLINKARM_TRACE_AddItems\0").map(|sym| *sym);
        let JLINK_TRACE_AddItems = __library.get(b"JLINK_TRACE_AddItems\0").map(|sym| *sym);
        let JLINKARM_GetDeviceId = __library.get(b"JLINKARM_GetDeviceId\0").map(|sym| *sym);
        let JLINKARM_GetEmbeddedFWVersion = __library
            .get(b"JLINKARM_GetEmbeddedFWVersion\0")
            .map(|sym| *sym);
        let JLINK_GetEmbeddedFWVersion = __library
            .get(b"JLINK_GetEmbeddedFWVersion\0")
            .map(|sym| *sym);
        let JLINKARM_GetU32 = __library.get(b"JLINKARM_GetU32\0").map(|sym| *sym);
        let JLINK_GetU32 = __library.get(b"JLINK_GetU32\0").map(|sym| *sym);
        let JLINKARM_SelDevice = __library.get(b"JLINKARM_SelDevice\0").map(|sym| *sym);
        let JLINK_SelDevice = __library.get(b"JLINK_SelDevice\0").map(|sym| *sym);
        let JLINKARM_StepComposite = __library.get(b"JLINKARM_StepComposite\0").map(|sym| *sym);
        let JLINK_StepComposite = __library.get(b"JLINK_StepComposite\0").map(|sym| *sym);
        let JLINKARM_StoreCmd = __library.get(b"JLINKARM_StoreCmd\0").map(|sym| *sym);
        let JLINK_StoreCmd = __library.get(b"JLINK_StoreCmd\0").map(|sym| *sym);
        let JLINKARM_StoreData = __library.get(b"JLINKARM_StoreData\0").map(|sym| *sym);
        let JLINKARM_WriteBits = __library.get(b"JLINKARM_WriteBits\0").map(|sym| *sym);
        let JLINK_WriteBits = __library.get(b"JLINK_WriteBits\0").map(|sym| *sym);
        let JLINKARM_EnableLogCom = __library.get(b"JLINKARM_EnableLogCom\0").map(|sym| *sym);
        let JLINK_EnableLogCom = __library.get(b"JLINK_EnableLogCom\0").map(|sym| *sym);
        let JLINKARM_SetFlashArea = __library.get(b"JLINKARM_SetFlashArea\0").map(|sym| *sym);
        let JLINK_SetFlashArea = __library.get(b"JLINK_SetFlashArea\0").map(|sym| *sym);
        let JLINKARM_PERIODIC_ConfReadMem = __library
            .get(b"JLINKARM_PERIODIC_ConfReadMem\0")
            .map(|sym| *sym);
        let JLINKARM_PERIODIC_Control = __library
            .get(b"JLINKARM_PERIODIC_Control\0")
            .map(|sym| *sym);
        let JLINKARM_PERIODIC_Read = __library.get(b"JLINKARM_PERIODIC_Read\0").map(|sym| *sym);
        let JLINK_FLASH_EraseChip = __library.get(b"JLINK_FLASH_EraseChip\0").map(|sym| *sym);
        let JLINK_FLASH_SetNotifyHandler = __library
            .get(b"JLINK_FLASH_SetNotifyHandler\0")
            .map(|sym| *sym);
        Ok(JLink {
            __library,
            JLINK_Configure,
            JLINK_DownloadFile,
            JLINK_GetAvailableLicense,
            JLINK_GetPCode,
            JLINK_GetMemZones,
            JLINK_PrintConfig,
            JLINK_EraseChip,
            JLINK_SPI_Transfer,
            JLINK_GetpFunc,
            JLINK_SetHookUnsecureDialog,
            JLINK_ReadMemZonedEx,
            JLINK_ReadMemZonedU32,
            JLINK_ReadMemZonedU16,
            JLINK_WriteMemZonedEx,
            JLINK_WriteZonedU32,
            JLINK_WriteZonedU16,
            JLINK_DIALOG_Configure,
            JLINK_DIALOG_ConfigureEx,
            JLINK_EMU_GPIO_GetProps,
            JLINK_EMU_GPIO_GetState,
            JLINK_EMU_GPIO_SetState,
            JLINK_EMU_AddLicense,
            JLINK_EMU_EraseLicenses,
            JLINK_EMU_GetLicenses,
            JLINK_HSS_GetCaps,
            JLINK_HSS_Start,
            JLINK_HSS_Stop,
            JLINK_HSS_Read,
            JLINK_POWERTRACE_Control,
            JLINK_POWERTRACE_Read,
            JLINK_RTTERMINAL_Control,
            JLINK_RTTERMINAL_Read,
            JLINK_RTTERMINAL_Write,
            JLINK_STRACE_Config,
            JLINK_STRACE_Control,
            JLINK_STRACE_Read,
            JLINK_STRACE_ReadEx,
            JLINK_STRACE_GetInstStats,
            JLINK_STRACE_Start,
            JLINK_STRACE_Stop,
            JLINK_SWD_GetData,
            JLINK_SWD_GetU8,
            JLINK_SWD_GetU16,
            JLINK_SWD_GetU32,
            JLINK_SWD_StoreGetRaw,
            JLINK_SWD_StoreRaw,
            JLINK_SWD_SyncBits,
            JLINK_SWD_SyncBytes,
            JLINK_SetFlashProgProgressCallback,
            JLINKARM_AddMirrorArea,
            JLINK_AddMirrorArea,
            JLINKARM_AddMirrorAreaEx,
            JLINK_AddMirrorAreaEx,
            JLINKARM_BeginDownload,
            JLINK_BeginDownload,
            JLINKARM_Clock,
            JLINK_Clock,
            JLINKARM_Close,
            JLINK_Close,
            JLINKARM_ClrBP,
            JLINK_ClrBP,
            JLINKARM_ClrBPEx,
            JLINK_ClrBPEx,
            JLINKARM_ClrDataEvent,
            JLINK_ClrDataEvent,
            JLINKARM_ClrError,
            JLINK_ClrError,
            JLINKARM_ClrRESET,
            JLINK_ClrRESET,
            JLINKARM_ClrTCK,
            JLINK_ClrTCK,
            JLINKARM_ClrTDI,
            JLINK_ClrTDI,
            JLINKARM_ClrTMS,
            JLINK_ClrTMS,
            JLINKARM_ClrExecTime,
            JLINK_ClrExecTime,
            JLINKARM_ClrTRST,
            JLINK_ClrTRST,
            JLINKARM_ClrWP,
            JLINK_ClrWP,
            JLINKARM_Communicate,
            JLINK_Communicate,
            JLINKARM_CommunicateEx,
            JLINKARM_ConfigJTAG,
            JLINK_ConfigJTAG,
            JLINKARM_Connect,
            JLINK_Connect,
            JLINKARM_Core2CoreName,
            JLINKARM_DisassembleInst,
            JLINKARM_DisassembleInstEx,
            JLINKARM_DownloadECode,
            JLINK_DownloadECode,
            JLINKARM_EnableCheckModeAfterWrite,
            JLINK_EnableCheckModeAfterWrite,
            JLINKARM_EnableFlashCache,
            JLINK_EnableFlashCache,
            JLINKARM_EnableLog,
            JLINK_EnableLog,
            JLINKARM_EnablePerformanceCnt,
            JLINK_EnablePerformanceCnt,
            JLINKARM_EnableSoftBPs,
            JLINK_EnableSoftBPs,
            JLINKARM_EndDownload,
            JLINK_EndDownload,
            JLINKARM_ExecCommand,
            JLINK_ExecCommand,
            JLINKARM_ExecECode,
            JLINK_ExecECode,
            JLINKARM_FindBP,
            JLINK_FindBP,
            JLINKARM_FreeMem,
            JLINKARM_GetBPInfo,
            JLINKARM_GetBPInfoEx,
            JLINK_GetBPInfoEx,
            JLINKARM_GetCompileDateTime,
            JLINK_GetCompileDateTime,
            JLINKARM_GetConfigData,
            JLINK_GetConfigData,
            JLINKARM_GetDebugInfo,
            JLINK_GetDebugInfo,
            JLINKARM_GetDeviceFamily,
            JLINK_GetDeviceFamily,
            JLINKARM_GetDLLVersion,
            JLINK_GetDLLVersion,
            JLINKARM_GetEmbeddedFWString,
            JLINK_GetEmbeddedFWString,
            JLINKARM_GetEmuCaps,
            JLINK_GetEmuCaps,
            JLINKARM_GetEmuCapsEx,
            JLINK_GetEmuCapsEx,
            JLINKARM_GetExecTime,
            JLINK_GetExecTime,
            JLINKARM_GetFeatureString,
            JLINK_GetFeatureString,
            JLINKARM_GetFirmwareString,
            JLINK_GetFirmwareString,
            JLINKARM_GetHardwareVersion,
            JLINK_GetHardwareVersion,
            JLINKARM_GetHWInfo,
            JLINK_GetHWInfo,
            JLINKARM_GetHWStatus,
            JLINK_GetHWStatus,
            JLINKARM_GetId,
            JLINK_GetId,
            JLINKARM_GetIdData,
            JLINK_GetIdData,
            JLINKARM_GetIRLen,
            JLINK_GetIRLen,
            JLINKARM_GetMOEs,
            JLINK_GetMOEs,
            JLINKARM_GetNumBPs,
            JLINK_GetNumBPs,
            JLINKARM_GetNumBPUnits,
            JLINK_GetNumBPUnits,
            JLINKARM_GetNumWPs,
            JLINK_GetNumWPs,
            JLINKARM_GetNumWPUnits,
            JLINK_GetNumWPUnits,
            JLINKARM_GetOEMString,
            JLINK_GetOEMString,
            JLINKARM_GetPerformanceCnt,
            JLINK_GetPerformanceCnt,
            JLINKARM_GetpSharedMem,
            JLINK_GetpSharedMem,
            JLINKARM_GetRegisterList,
            JLINK_GetRegisterList,
            JLINKARM_GetRegisterName,
            JLINK_GetRegisterName,
            JLINKARM_GetResetTypeDesc,
            JLINK_GetResetTypeDesc,
            JLINKARM_GetScanLen,
            JLINK_GetScanLen,
            JLINKARM_GetSelDevice,
            JLINK_GetSelDevice,
            JLINKARM_GetSN,
            JLINK_GetSN,
            JLINKARM_GetSpeed,
            JLINK_GetSpeed,
            JLINKARM_GetSpeedInfo,
            JLINK_GetSpeedInfo,
            JLINKARM_GetWPInfoEx,
            JLINK_GetWPInfoEx,
            JLINKARM_Go,
            JLINK_Go,
            JLINKARM_GoAllowSim,
            JLINK_GoAllowSim,
            JLINKARM_GoEx,
            JLINK_GoEx,
            JLINKARM_GoHalt,
            JLINK_GoHalt,
            JLINKARM_GoIntDis,
            JLINK_GoIntDis,
            JLINKARM_Halt,
            JLINK_Halt,
            JLINKARM_HasError,
            JLINK_HasError,
            JLINKARM_IsConnected,
            JLINK_IsConnected,
            JLINKARM_IsHalted,
            JLINK_IsHalted,
            JLINKARM_IsOpen,
            JLINK_IsOpen,
            JLINKARM_Lock,
            JLINK_Lock,
            JLINKARM_MeasureCPUSpeed,
            JLINK_MeasureCPUSpeed,
            JLINKARM_MeasureCPUSpeedEx,
            JLINK_MeasureCPUSpeedEx,
            JLINKARM_MeasureRTCKReactTime,
            JLINK_MeasureRTCKReactTime,
            JLINKARM_MeasureSCLen,
            JLINK_MeasureSCLen,
            JLINKARM_Open,
            JLINK_Open,
            JLINKARM_OpenEx,
            JLINK_OpenEx,
            JLINKARM_ReadCodeMem,
            JLINK_ReadCodeMem,
            JLINKARM_ReadConfigReg,
            JLINK_ReadConfigReg,
            JLINKARM_ReadControlReg,
            JLINK_ReadControlReg,
            JLINKARM_ReadDCC,
            JLINK_ReadDCC,
            JLINKARM_ReadDCCFast,
            JLINK_ReadDCCFast,
            JLINKARM_ReadTerminal,
            JLINK_ReadTerminal,
            JLINKARM_ReadDebugPort,
            JLINK_ReadDebugPort,
            JLINKARM_ReadDebugReg,
            JLINK_ReadDebugReg,
            JLINKARM_ReadEmu,
            JLINK_ReadEmu,
            JLINKARM_ReadEmuConfigMem,
            JLINK_ReadEmuConfigMem,
            JLINKARM_ReadICEReg,
            JLINK_ReadICEReg,
            JLINKARM_ReadMem,
            JLINK_ReadMem,
            JLINKARM_ReadMemEx,
            JLINK_ReadMemEx,
            JLINKARM_ReadMemHW,
            JLINK_ReadMemHW,
            JLINKARM_ReadMemIndirect,
            JLINK_ReadMemIndirect,
            JLINKARM_ReadMemU8,
            JLINK_ReadMemU8,
            JLINKARM_ReadMemU16,
            JLINK_ReadMemU16,
            JLINKARM_ReadMemU32,
            JLINK_ReadMemU32,
            JLINKARM_ReadMemU64,
            JLINK_ReadMemU64,
            JLINKARM_ReadReg,
            JLINK_ReadReg,
            JLINKARM_ReadRegs,
            JLINK_ReadRegs,
            JLINKARM_Reset,
            JLINK_Reset,
            JLINKARM_ResetNoHalt,
            JLINK_ResetNoHalt,
            JLINKARM_ResetPullsRESET,
            JLINK_ResetPullsRESET,
            JLINKARM_ResetPullsTRST,
            JLINK_ResetPullsTRST,
            JLINKARM_ResetTRST,
            JLINK_ResetTRST,
            JLINKARM_SelectDeviceFamily,
            JLINK_SelectDeviceFamily,
            JLINKARM_SelectIP,
            JLINK_SelectIP,
            JLINKARM_SelectTraceSource,
            JLINK_SelectTraceSource,
            JLINKARM_SelectUSB,
            JLINK_SelectUSB,
            JLINKARM_SetBP,
            JLINK_SetBP,
            JLINKARM_SetBPEx,
            JLINK_SetBPEx,
            JLINKARM_SetCoreIndex,
            JLINKARM_SetDataEvent,
            JLINK_SetDataEvent,
            JLINKARM_SetDebugUnitBlockMask,
            JLINK_SetDebugUnitBlockMask,
            JLINKARM_SetEndian,
            JLINK_SetEndian,
            JLINKARM_SetErrorOutHandler,
            JLINK_SetErrorOutHandler,
            JLINKARM_SetInitRegsOnReset,
            JLINK_SetInitRegsOnReset,
            JLINKARM_SetLogFile,
            JLINK_SetLogFile,
            JLINKARM_SetMaxSpeed,
            JLINK_SetMaxSpeed,
            JLINKARM_SetRESET,
            JLINK_SetRESET,
            JLINKARM_SetResetDelay,
            JLINK_SetResetDelay,
            JLINKARM_SetResetPara,
            JLINK_SetResetPara,
            JLINKARM_SetResetType,
            JLINK_SetResetType,
            JLINKARM_SetSpeed,
            JLINK_SetSpeed,
            JLINKARM_SetTCK,
            JLINK_SetTCK,
            JLINKARM_SetTDI,
            JLINK_SetTDI,
            JLINKARM_SetTMS,
            JLINK_SetTMS,
            JLINKARM_SetTRST,
            JLINK_SetTRST,
            JLINKARM_SetWaitFunction,
            JLINK_SetWaitFunction,
            JLINKARM_SetWarnOutHandler,
            JLINK_SetWarnOutHandler,
            JLINKARM_SetWP,
            JLINK_SetWP,
            JLINKARM_SimulateInstruction,
            JLINK_SimulateInstruction,
            JLINKARM_Step,
            JLINK_Step,
            JLINKARM_StoreBits,
            JLINK_StoreBits,
            JLINKARM_Test,
            JLINK_Test,
            JLINKARM_Unlock,
            JLINK_Unlock,
            JLINKARM_UpdateFirmware,
            JLINK_UpdateFirmware,
            JLINKARM_UpdateFirmwareIfNewer,
            JLINK_UpdateFirmwareIfNewer,
            JLINKARM_UpdateReplaceFirmware,
            JLINK_UpdateReplaceFirmware,
            JLINKARM_WaitDCCRead,
            JLINK_WaitDCCRead,
            JLINKARM_WaitForHalt,
            JLINK_WaitForHalt,
            JLINKARM_WriteConfigReg,
            JLINK_WriteConfigReg,
            JLINKARM_WriteControlReg,
            JLINK_WriteControlReg,
            JLINKARM_WriteDCC,
            JLINK_WriteDCC,
            JLINKARM_WriteDCCFast,
            JLINK_WriteDCCFast,
            JLINKARM_WriteDebugPort,
            JLINK_WriteDebugPort,
            JLINKARM_WriteDebugReg,
            JLINK_WriteDebugReg,
            JLINKARM_WriteEmu,
            JLINK_WriteEmu,
            JLINKARM_WriteEmuConfigMem,
            JLINK_WriteEmuConfigMem,
            JLINKARM_WriteICEReg,
            JLINK_WriteICEReg,
            JLINKARM_WriteMem,
            JLINK_WriteMem,
            JLINKARM_WriteMemDelayed,
            JLINK_WriteMemDelayed,
            JLINKARM_WriteMemEx,
            JLINK_WriteMemEx,
            JLINKARM_WriteMemHW,
            JLINK_WriteMemHW,
            JLINKARM_WriteMemMultiple,
            JLINKARM_WriteReg,
            JLINK_WriteReg,
            JLINKARM_WriteRegs,
            JLINK_WriteRegs,
            JLINKARM_WriteU8,
            JLINK_WriteU8,
            JLINKARM_WriteU16,
            JLINK_WriteU16,
            JLINKARM_WriteU32,
            JLINK_WriteU32,
            JLINKARM_WriteU64,
            JLINK_WriteU64,
            JLINKARM_WriteVectorCatch,
            JLINK_WriteVectorCatch,
            JLINKARM_WriteVerifyMem,
            JLINK_WriteVerifyMem,
            JLINKARM_BMI_Get,
            JLINKARM_BMI_Set,
            JLINKARM_CDC_Read,
            JLINKARM_CDC_SetBaudrate,
            JLINKARM_CDC_SetHookFuncs,
            JLINKARM_CDC_SetRTSState,
            JLINKARM_CDC_SetTimeoutLastCDCRead,
            JLINKARM_CDC_Write,
            JLINKARM_CORE_GetFound,
            JLINK_CORE_GetFound,
            JLINKARM_CORE_Select,
            JLINK_CORE_Select,
            JLINKARM_CORESIGHT_Configure,
            JLINK_CORESIGHT_Configure,
            JLINKARM_CORESIGHT_ReadAPDPReg,
            JLINK_CORESIGHT_ReadAPDPReg,
            JLINKARM_CORESIGHT_WriteAPDPReg,
            JLINK_CORESIGHT_WriteAPDPReg,
            JLINKARM_CP15_IsPresent,
            JLINK_CP15_IsPresent,
            JLINKARM_CP15_ReadEx,
            JLINK_CP15_ReadEx,
            JLINKARM_CP15_ReadReg,
            JLINK_CP15_ReadReg,
            JLINKARM_CP15_WriteEx,
            JLINK_CP15_WriteEx,
            JLINKARM_CP15_WriteReg,
            JLINK_CP15_WriteReg,
            JLINKARM_DEVICE_GetIndex,
            JLINK_DEVICE_GetIndex,
            JLINKARM_DEVICE_GetInfo,
            JLINK_DEVICE_GetInfo,
            JLINKARM_DEVICE_SelectDialog,
            JLINK_DEVICE_SelectDialog,
            JLINKARM_EMU_GetCounters,
            JLINK_EMU_GetCounters,
            JLINKARM_EMU_GetDeviceInfo,
            JLINK_EMU_GetDeviceInfo,
            JLINKARM_EMU_GetList,
            JLINK_EMU_GetList,
            JLINKARM_EMU_GetMaxMemBlock,
            JLINK_EMU_GetMaxMemBlock,
            JLINKARM_EMU_GetNumConnections,
            JLINK_EMU_GetNumConnections,
            JLINKARM_EMU_GetNumDevices,
            JLINK_EMU_GetNumDevices,
            JLINKARM_EMU_GetProductId,
            JLINK_EMU_GetProductId,
            JLINKARM_EMU_GetProductName,
            JLINK_EMU_GetProductName,
            JLINKARM_EMU_HasCapEx,
            JLINK_EMU_HasCapEx,
            JLINKARM_EMU_HasCPUCap,
            JLINK_EMU_HasCPUCap,
            JLINKARM_EMU_IsConnected,
            JLINK_EMU_IsConnected,
            JLINKARM_EMU_SelectByIndex,
            JLINK_EMU_SelectByIndex,
            JLINKARM_EMU_SelectByUSBSN,
            JLINK_EMU_SelectByUSBSN,
            JLINKARM_EMU_SelectIP,
            JLINK_EMU_SelectIP,
            JLINKARM_EMU_SelectIPBySN,
            JLINK_EMU_SelectIPBySN,
            JLINKARM_EMU_TestNRSpeed,
            JLINK_EMU_TestNRSpeed,
            JLINKARM_EMU_TestNWSpeed,
            JLINK_EMU_TestNWSpeed,
            JLINKARM_EMU_COM_IsSupported,
            JLINK_EMU_COM_IsSupported,
            JLINKARM_EMU_COM_Read,
            JLINK_EMU_COM_Read,
            JLINKARM_EMU_COM_Write,
            JLINK_EMU_COM_Write,
            JLINKARM_EMU_FILE_Delete,
            JLINK_EMU_FILE_Delete,
            JLINKARM_EMU_FILE_GetList,
            JLINK_EMU_FILE_GetList,
            JLINKARM_EMU_FILE_GetSize,
            JLINK_EMU_FILE_GetSize,
            JLINKARM_EMU_FILE_Read,
            JLINK_EMU_FILE_Read,
            JLINKARM_EMU_FILE_Write,
            JLINK_EMU_FILE_Write,
            JLINKARM_ETB_IsPresent,
            JLINK_ETB_IsPresent,
            JLINKARM_ETB_ReadReg,
            JLINK_ETB_ReadReg,
            JLINKARM_ETB_WriteReg,
            JLINK_ETB_WriteReg,
            JLINKARM_ETM_IsPresent,
            JLINK_ETM_IsPresent,
            JLINKARM_ETM_ReadReg,
            JLINK_ETM_ReadReg,
            JLINKARM_ETM_StartTrace,
            JLINK_ETM_StartTrace,
            JLINKARM_ETM_WriteReg,
            JLINK_ETM_WriteReg,
            JLINKARM_INDICATORS_SetState,
            JLINK_INDICATORS_SetState,
            JLINKARM_JTAG_ConfigDevices,
            JLINK_JTAG_ConfigDevices,
            JLINKARM_JTAG_DisableIF,
            JLINK_JTAG_DisableIF,
            JLINKARM_JTAG_EnableIF,
            JLINK_JTAG_EnableIF,
            JLINKARM_JTAG_GetData,
            JLINK_JTAG_GetData,
            JLINKARM_JTAG_GetDeviceId,
            JLINK_JTAG_GetDeviceId,
            JLINKARM_JTAG_GetDeviceInfo,
            JLINK_JTAG_GetDeviceInfo,
            JLINKARM_JTAG_GetU8,
            JLINK_JTAG_GetU8,
            JLINKARM_JTAG_GetU16,
            JLINK_JTAG_GetU16,
            JLINKARM_JTAG_GetU32,
            JLINK_JTAG_GetU32,
            JLINKARM_JTAG_StoreData,
            JLINK_JTAG_StoreData,
            JLINKARM_JTAG_StoreGetData,
            JLINK_JTAG_StoreGetData,
            JLINKARM_JTAG_StoreGetRaw,
            JLINK_JTAG_StoreGetRaw,
            JLINKARM_JTAG_StoreInst,
            JLINK_JTAG_StoreInst,
            JLINKARM_JTAG_StoreRaw,
            JLINK_JTAG_StoreRaw,
            JLINKARM_JTAG_SyncBits,
            JLINK_JTAG_SyncBits,
            JLINKARM_JTAG_SyncBytes,
            JLINK_JTAG_SyncBytes,
            JLINKARM_JTAG_WriteData,
            JLINK_JTAG_WriteData,
            JLINKARM_NET_Close,
            JLINK_NET_Close,
            JLINKARM_NET_Open,
            JLINK_NET_Open,
            JLINKARM_PCODE_Assemble,
            JLINKARM_PCODE_Exec,
            JLINK_PCODE_Exec,
            JLINKARM_PCODE_GetCaps,
            JLINK_PCODE_GetCaps,
            JLINKARM_PCODE_GetS32Version,
            JLINK_PCODE_GetS32Version,
            JLINKARM_PCODE_GetDebugAPI,
            JLINKARM_RAWTRACE_Control,
            JLINK_RAWTRACE_Control,
            JLINKARM_RAWTRACE_Read,
            JLINK_RAWTRACE_Read,
            JLINKARM_SWD_DisableSWCLK,
            JLINK_SWD_DisableSWCLK,
            JLINKARM_SWD_EnableSWCLK,
            JLINK_SWD_EnableSWCLK,
            JLINKARM_SWD_SetDirIn,
            JLINK_SWD_SetDirIn,
            JLINKARM_SWD_SetDirOut,
            JLINK_SWD_SetDirOut,
            JLINKARM_SWO_Control,
            JLINK_SWO_Control,
            JLINKARM_SWO_DisableTarget,
            JLINKARM_SWO_EnableTarget,
            JLINKARM_SWO_GetCompatibleSpeeds,
            JLINKARM_SWO_Read,
            JLINK_SWO_Read,
            JLINKARM_SWO_ReadStimulus,
            JLINKARM_TIF_GetAvailable,
            JLINK_TIF_GetAvailable,
            JLINKARM_TIF_Select,
            JLINK_TIF_Select,
            JLINKARM_TRACE_Control,
            JLINK_TRACE_Control,
            JLINKARM_TRACE_Read,
            JLINK_TRACE_Read,
            JLINKARM_WA_AddRange,
            JLINK_WA_AddRange,
            JLINKARM_WA_Restore,
            JLINK_WA_Restore,
            JLINK_ReadMemEx_64,
            JLINK_ReadMemU8_64,
            JLINK_ReadMemU16_64,
            JLINK_ReadMemU32_64,
            JLINK_ReadMemU64_64,
            JLINK_ReadMemZonedEx_64,
            JLINK_ReadMemZonedU32_64,
            JLINK_ReadMemZonedU16_64,
            JLINK_ReadRegs_64,
            JLINK_SetBPEx_64,
            JLINK_WriteMemEx_64,
            JLINK_WriteRegs_64,
            JLINK_WriteU8_64,
            JLINK_WriteU16_64,
            JLINK_WriteU32_64,
            JLINK_WriteU64_64,
            JLINK_WriteMemZonedEx_64,
            JLINK_WriteZonedU32_64,
            JLINK_WriteZonedU16_64,
            JLINKARM_TRACE_AddInst,
            JLINK_TRACE_AddInst,
            JLINKARM_TRACE_AddItems,
            JLINK_TRACE_AddItems,
            JLINKARM_GetDeviceId,
            JLINKARM_GetEmbeddedFWVersion,
            JLINK_GetEmbeddedFWVersion,
            JLINKARM_GetU32,
            JLINK_GetU32,
            JLINKARM_SelDevice,
            JLINK_SelDevice,
            JLINKARM_StepComposite,
            JLINK_StepComposite,
            JLINKARM_StoreCmd,
            JLINK_StoreCmd,
            JLINKARM_StoreData,
            JLINKARM_WriteBits,
            JLINK_WriteBits,
            JLINKARM_EnableLogCom,
            JLINK_EnableLogCom,
            JLINKARM_SetFlashArea,
            JLINK_SetFlashArea,
            JLINKARM_PERIODIC_ConfReadMem,
            JLINKARM_PERIODIC_Control,
            JLINKARM_PERIODIC_Read,
            JLINK_FLASH_EraseChip,
            JLINK_FLASH_SetNotifyHandler,
        })
    }
    pub unsafe fn JLINK_Configure(
        &self,
        pConfig: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_Configure
            .as_ref()
            .expect("Expected function, got error."))(pConfig)
    }
    pub unsafe fn JLINK_DownloadFile(
        &self,
        sFileName: *const ::std::os::raw::c_char,
        Addr: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_DownloadFile
            .as_ref()
            .expect("Expected function, got error."))(sFileName, Addr)
    }
    pub unsafe fn JLINK_GetAvailableLicense(
        &self,
        pBuffer: *mut ::std::os::raw::c_char,
        BufferSize: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_GetAvailableLicense
            .as_ref()
            .expect("Expected function, got error."))(pBuffer, BufferSize)
    }
    pub unsafe fn JLINK_GetPCode(
        &self,
        PCodeIndex: ::std::os::raw::c_int,
        pNumBytes: *mut ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_uchar {
        (self
            .JLINK_GetPCode
            .as_ref()
            .expect("Expected function, got error."))(PCodeIndex, pNumBytes)
    }
    pub unsafe fn JLINK_GetMemZones(
        &self,
        paZoneInfo: *mut JLINK_MEM_ZONE_INFO,
        MaxNumZones: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_GetMemZones
            .as_ref()
            .expect("Expected function, got error."))(paZoneInfo, MaxNumZones)
    }
    pub unsafe fn JLINK_PrintConfig(
        &self,
        pConfig: *const ::std::os::raw::c_char,
        Mask: ::std::os::raw::c_uint,
        pBuffer: *mut ::std::os::raw::c_char,
        BufferSize: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_PrintConfig
            .as_ref()
            .expect("Expected function, got error."))(pConfig, Mask, pBuffer, BufferSize)
    }
    pub unsafe fn JLINK_EraseChip(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_EraseChip
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_SPI_Transfer(
        &self,
        pDataDown: *const ::std::os::raw::c_uchar,
        pDataUp: *mut ::std::os::raw::c_uchar,
        NumBits: ::std::os::raw::c_uint,
        Flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_SPI_Transfer
            .as_ref()
            .expect("Expected function, got error."))(pDataDown, pDataUp, NumBits, Flags)
    }
    pub unsafe fn JLINK_GetpFunc(
        &self,
        FuncIndex: JLINK_FUNC_INDEX,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .JLINK_GetpFunc
            .as_ref()
            .expect("Expected function, got error."))(FuncIndex)
    }
    pub unsafe fn JLINK_SetHookUnsecureDialog(
        &self,
        pfHook: JLINK_HOOK_DIALOG_UNSECURE,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_SetHookUnsecureDialog
            .as_ref()
            .expect("Expected function, got error."))(pfHook)
    }
    pub unsafe fn JLINK_ReadMemZonedEx(
        &self,
        Addr: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_void,
        Flags: ::std::os::raw::c_uint,
        sZone: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadMemZonedEx
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumBytes, pData, Flags, sZone)
    }
    pub unsafe fn JLINK_ReadMemZonedU32(
        &self,
        Addr: ::std::os::raw::c_uint,
        NumItems: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_uint,
        pStatus: *mut ::std::os::raw::c_uchar,
        sZone: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadMemZonedU32
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumItems, pData, pStatus, sZone)
    }
    pub unsafe fn JLINK_ReadMemZonedU16(
        &self,
        Addr: ::std::os::raw::c_uint,
        NumItems: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_ushort,
        pStatus: *mut ::std::os::raw::c_uchar,
        sZone: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadMemZonedU16
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumItems, pData, pStatus, sZone)
    }
    pub unsafe fn JLINK_WriteMemZonedEx(
        &self,
        Addr: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
        p: *const ::std::os::raw::c_void,
        Flags: ::std::os::raw::c_uint,
        sZone: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteMemZonedEx
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumBytes, p, Flags, sZone)
    }
    pub unsafe fn JLINK_WriteZonedU32(
        &self,
        Addr: ::std::os::raw::c_uint,
        Data: ::std::os::raw::c_uint,
        sZone: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteZonedU32
            .as_ref()
            .expect("Expected function, got error."))(Addr, Data, sZone)
    }
    pub unsafe fn JLINK_WriteZonedU16(
        &self,
        Addr: ::std::os::raw::c_uint,
        Data: ::std::os::raw::c_ushort,
        sZone: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteZonedU16
            .as_ref()
            .expect("Expected function, got error."))(Addr, Data, sZone)
    }
    pub unsafe fn JLINK_DIALOG_Configure(
        &self,
        pConfigIn: *const ::std::os::raw::c_char,
        pConfigOut: *mut ::std::os::raw::c_char,
        BufferSize: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_DIALOG_Configure
            .as_ref()
            .expect("Expected function, got error."))(pConfigIn, pConfigOut, BufferSize)
    }
    pub unsafe fn JLINK_DIALOG_ConfigureEx(
        &self,
        hParent: *mut ::std::os::raw::c_void,
        Mask: ::std::os::raw::c_uint,
        pConfigIn: *const ::std::os::raw::c_char,
        pConfigOut: *mut ::std::os::raw::c_char,
        BufferSize: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_DIALOG_ConfigureEx
            .as_ref()
            .expect("Expected function, got error."))(
            hParent, Mask, pConfigIn, pConfigOut, BufferSize,
        )
    }
    pub unsafe fn JLINK_EMU_GPIO_GetProps(
        &self,
        paDesc: *mut JLINK_EMU_GPIO_DESC,
        MaxNumDesc: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_EMU_GPIO_GetProps
            .as_ref()
            .expect("Expected function, got error."))(paDesc, MaxNumDesc)
    }
    pub unsafe fn JLINK_EMU_GPIO_GetState(
        &self,
        paIndex: *const ::std::os::raw::c_uchar,
        paResult: *mut ::std::os::raw::c_uchar,
        NumPorts: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_EMU_GPIO_GetState
            .as_ref()
            .expect("Expected function, got error."))(paIndex, paResult, NumPorts)
    }
    pub unsafe fn JLINK_EMU_GPIO_SetState(
        &self,
        paIndex: *const ::std::os::raw::c_uchar,
        paState: *const ::std::os::raw::c_uchar,
        paResult: *mut ::std::os::raw::c_uchar,
        NumPorts: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_EMU_GPIO_SetState
            .as_ref()
            .expect("Expected function, got error."))(paIndex, paState, paResult, NumPorts)
    }
    pub unsafe fn JLINK_EMU_AddLicense(
        &self,
        sLic: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_EMU_AddLicense
            .as_ref()
            .expect("Expected function, got error."))(sLic)
    }
    pub unsafe fn JLINK_EMU_EraseLicenses(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_EMU_EraseLicenses
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_EMU_GetLicenses(
        &self,
        pBuffer: *mut ::std::os::raw::c_char,
        BufferSize: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_EMU_GetLicenses
            .as_ref()
            .expect("Expected function, got error."))(pBuffer, BufferSize)
    }
    pub unsafe fn JLINK_HSS_GetCaps(&self, pCaps: *mut JLINK_HSS_CAPS) -> ::std::os::raw::c_int {
        (self
            .JLINK_HSS_GetCaps
            .as_ref()
            .expect("Expected function, got error."))(pCaps)
    }
    pub unsafe fn JLINK_HSS_Start(
        &self,
        paDesc: *mut JLINK_HSS_MEM_BLOCK_DESC,
        NumBlocks: ::std::os::raw::c_int,
        Period_us: ::std::os::raw::c_int,
        Flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_HSS_Start
            .as_ref()
            .expect("Expected function, got error."))(paDesc, NumBlocks, Period_us, Flags)
    }
    pub unsafe fn JLINK_HSS_Stop(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_HSS_Stop
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_HSS_Read(
        &self,
        pBuffer: *mut ::std::os::raw::c_void,
        BufferSize: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_HSS_Read
            .as_ref()
            .expect("Expected function, got error."))(pBuffer, BufferSize)
    }
    pub unsafe fn JLINK_POWERTRACE_Control(
        &self,
        Cmd: ::std::os::raw::c_uint,
        pIn: *mut ::std::os::raw::c_void,
        pOut: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_POWERTRACE_Control
            .as_ref()
            .expect("Expected function, got error."))(Cmd, pIn, pOut)
    }
    pub unsafe fn JLINK_POWERTRACE_Read(
        &self,
        paData: *mut JLINK_POWERTRACE_DATA_ITEM,
        NumItems: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_POWERTRACE_Read
            .as_ref()
            .expect("Expected function, got error."))(paData, NumItems)
    }
    pub unsafe fn JLINK_RTTERMINAL_Control(
        &self,
        Cmd: ::std::os::raw::c_uint,
        p: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_RTTERMINAL_Control
            .as_ref()
            .expect("Expected function, got error."))(Cmd, p)
    }
    pub unsafe fn JLINK_RTTERMINAL_Read(
        &self,
        BufferIndex: ::std::os::raw::c_uint,
        sBuffer: *mut ::std::os::raw::c_char,
        BufferSize: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_RTTERMINAL_Read
            .as_ref()
            .expect("Expected function, got error."))(BufferIndex, sBuffer, BufferSize)
    }
    pub unsafe fn JLINK_RTTERMINAL_Write(
        &self,
        BufferIndex: ::std::os::raw::c_uint,
        sBuffer: *const ::std::os::raw::c_char,
        BufferSize: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_RTTERMINAL_Write
            .as_ref()
            .expect("Expected function, got error."))(BufferIndex, sBuffer, BufferSize)
    }
    pub unsafe fn JLINK_STRACE_Config(
        &self,
        sConfig: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_STRACE_Config
            .as_ref()
            .expect("Expected function, got error."))(sConfig)
    }
    pub unsafe fn JLINK_STRACE_Control(
        &self,
        Cmd: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_STRACE_Control
            .as_ref()
            .expect("Expected function, got error."))(Cmd, pData)
    }
    pub unsafe fn JLINK_STRACE_Read(
        &self,
        paItem: *mut ::std::os::raw::c_uint,
        NumItems: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_STRACE_Read
            .as_ref()
            .expect("Expected function, got error."))(paItem, NumItems)
    }
    pub unsafe fn JLINK_STRACE_ReadEx(
        &self,
        paItem: *mut ::std::os::raw::c_uint,
        NumItems: ::std::os::raw::c_uint,
        paTSInfo: *mut JLINK_STRACE_TIMESTAMP_INFO,
        pNumTSInfos: *mut ::std::os::raw::c_int,
        Flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_STRACE_ReadEx
            .as_ref()
            .expect("Expected function, got error."))(
            paItem,
            NumItems,
            paTSInfo,
            pNumTSInfos,
            Flags,
        )
    }
    pub unsafe fn JLINK_STRACE_GetInstStats(
        &self,
        paItem: *mut ::std::os::raw::c_void,
        Addr: ::std::os::raw::c_uint,
        NumItems: ::std::os::raw::c_uint,
        SizeOfStruct: ::std::os::raw::c_uint,
        Type: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_STRACE_GetInstStats
            .as_ref()
            .expect("Expected function, got error."))(
            paItem, Addr, NumItems, SizeOfStruct, Type
        )
    }
    pub unsafe fn JLINK_STRACE_Start(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_STRACE_Start
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_STRACE_Stop(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_STRACE_Stop
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_SWD_GetData(
        &self,
        pOut: *mut ::std::os::raw::c_uchar,
        BitPos: ::std::os::raw::c_int,
        NumBits: ::std::os::raw::c_int,
    ) -> () {
        (self
            .JLINK_SWD_GetData
            .as_ref()
            .expect("Expected function, got error."))(pOut, BitPos, NumBits)
    }
    pub unsafe fn JLINK_SWD_GetU8(&self, BitPos: ::std::os::raw::c_int) -> ::std::os::raw::c_uint {
        (self
            .JLINK_SWD_GetU8
            .as_ref()
            .expect("Expected function, got error."))(BitPos)
    }
    pub unsafe fn JLINK_SWD_GetU16(&self, BitPos: ::std::os::raw::c_int) -> ::std::os::raw::c_uint {
        (self
            .JLINK_SWD_GetU16
            .as_ref()
            .expect("Expected function, got error."))(BitPos)
    }
    pub unsafe fn JLINK_SWD_GetU32(&self, BitPos: ::std::os::raw::c_int) -> ::std::os::raw::c_uint {
        (self
            .JLINK_SWD_GetU32
            .as_ref()
            .expect("Expected function, got error."))(BitPos)
    }
    pub unsafe fn JLINK_SWD_StoreGetRaw(
        &self,
        pDir: *const ::std::os::raw::c_uchar,
        pIn: *const ::std::os::raw::c_uchar,
        pOut: *mut ::std::os::raw::c_uchar,
        NumBits: ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINK_SWD_StoreGetRaw
            .as_ref()
            .expect("Expected function, got error."))(pDir, pIn, pOut, NumBits)
    }
    pub unsafe fn JLINK_SWD_StoreRaw(
        &self,
        pDir: *const ::std::os::raw::c_uchar,
        pIn: *const ::std::os::raw::c_uchar,
        NumBits: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_SWD_StoreRaw
            .as_ref()
            .expect("Expected function, got error."))(pDir, pIn, NumBits)
    }
    pub unsafe fn JLINK_SWD_SyncBits(&self) -> () {
        (self
            .JLINK_SWD_SyncBits
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_SWD_SyncBytes(&self) -> () {
        (self
            .JLINK_SWD_SyncBytes
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_SetFlashProgProgressCallback(
        &self,
        pfOnFlashProgess: JLINK_FLASH_PROGRESS_CB_FUNC,
    ) -> () {
        (self
            .JLINK_SetFlashProgProgressCallback
            .as_ref()
            .expect("Expected function, got error."))(pfOnFlashProgess)
    }
    pub unsafe fn JLINKARM_AddMirrorArea(&self, Addr: ::std::os::raw::c_uint) -> () {
        (self
            .JLINKARM_AddMirrorArea
            .as_ref()
            .expect("Expected function, got error."))(Addr)
    }
    pub unsafe fn JLINK_AddMirrorArea(&self, Addr: ::std::os::raw::c_uint) -> () {
        (self
            .JLINK_AddMirrorArea
            .as_ref()
            .expect("Expected function, got error."))(Addr)
    }
    pub unsafe fn JLINKARM_AddMirrorAreaEx(
        &self,
        Addr: ::std::os::raw::c_uint,
        Size: ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINKARM_AddMirrorAreaEx
            .as_ref()
            .expect("Expected function, got error."))(Addr, Size)
    }
    pub unsafe fn JLINK_AddMirrorAreaEx(
        &self,
        Addr: ::std::os::raw::c_uint,
        Size: ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINK_AddMirrorAreaEx
            .as_ref()
            .expect("Expected function, got error."))(Addr, Size)
    }
    pub unsafe fn JLINKARM_BeginDownload(&self, Flags: ::std::os::raw::c_uint) -> () {
        (self
            .JLINKARM_BeginDownload
            .as_ref()
            .expect("Expected function, got error."))(Flags)
    }
    pub unsafe fn JLINK_BeginDownload(&self, Flags: ::std::os::raw::c_uint) -> () {
        (self
            .JLINK_BeginDownload
            .as_ref()
            .expect("Expected function, got error."))(Flags)
    }
    pub unsafe fn JLINKARM_Clock(&self) -> ::std::os::raw::c_uchar {
        (self
            .JLINKARM_Clock
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_Clock(&self) -> ::std::os::raw::c_uchar {
        (self
            .JLINK_Clock
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_Close(&self) -> () {
        (self
            .JLINKARM_Close
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_Close(&self) -> () {
        (self
            .JLINK_Close
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_ClrBP(&self, BPIndex: ::std::os::raw::c_uint) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_ClrBP
            .as_ref()
            .expect("Expected function, got error."))(BPIndex)
    }
    pub unsafe fn JLINK_ClrBP(&self, BPIndex: ::std::os::raw::c_uint) -> () {
        (self
            .JLINK_ClrBP
            .as_ref()
            .expect("Expected function, got error."))(BPIndex)
    }
    pub unsafe fn JLINKARM_ClrBPEx(
        &self,
        BPHandle: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_ClrBPEx
            .as_ref()
            .expect("Expected function, got error."))(BPHandle)
    }
    pub unsafe fn JLINK_ClrBPEx(&self, BPHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .JLINK_ClrBPEx
            .as_ref()
            .expect("Expected function, got error."))(BPHandle)
    }
    pub unsafe fn JLINKARM_ClrDataEvent(
        &self,
        Handle: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_ClrDataEvent
            .as_ref()
            .expect("Expected function, got error."))(Handle)
    }
    pub unsafe fn JLINK_ClrDataEvent(
        &self,
        Handle: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ClrDataEvent
            .as_ref()
            .expect("Expected function, got error."))(Handle)
    }
    pub unsafe fn JLINKARM_ClrError(&self) -> () {
        (self
            .JLINKARM_ClrError
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_ClrError(&self) -> () {
        (self
            .JLINK_ClrError
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_ClrRESET(&self) -> () {
        (self
            .JLINKARM_ClrRESET
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_ClrRESET(&self) -> () {
        (self
            .JLINK_ClrRESET
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_ClrTCK(&self) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_ClrTCK
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_ClrTCK(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_ClrTCK
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_ClrTDI(&self) -> () {
        (self
            .JLINKARM_ClrTDI
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_ClrTDI(&self) -> () {
        (self
            .JLINK_ClrTDI
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_ClrTMS(&self) -> () {
        (self
            .JLINKARM_ClrTMS
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_ClrTMS(&self) -> () {
        (self
            .JLINK_ClrTMS
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_ClrExecTime(&self) -> () {
        (self
            .JLINKARM_ClrExecTime
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_ClrExecTime(&self) -> () {
        (self
            .JLINK_ClrExecTime
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_ClrTRST(&self) -> () {
        (self
            .JLINKARM_ClrTRST
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_ClrTRST(&self) -> () {
        (self
            .JLINK_ClrTRST
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_ClrWP(&self, WPHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_ClrWP
            .as_ref()
            .expect("Expected function, got error."))(WPHandle)
    }
    pub unsafe fn JLINK_ClrWP(&self, WPHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .JLINK_ClrWP
            .as_ref()
            .expect("Expected function, got error."))(WPHandle)
    }
    pub unsafe fn JLINKARM_Communicate(
        &self,
        pWrite: *const ::std::os::raw::c_void,
        WrSize: ::std::os::raw::c_int,
        pRead: *mut ::std::os::raw::c_void,
        RdSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_Communicate
            .as_ref()
            .expect("Expected function, got error."))(pWrite, WrSize, pRead, RdSize)
    }
    pub unsafe fn JLINK_Communicate(
        &self,
        pWrite: *const ::std::os::raw::c_void,
        WrSize: ::std::os::raw::c_int,
        pRead: *mut ::std::os::raw::c_void,
        RdSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_Communicate
            .as_ref()
            .expect("Expected function, got error."))(pWrite, WrSize, pRead, RdSize)
    }
    pub unsafe fn JLINKARM_CommunicateEx(
        &self,
        pWrite: *const ::std::os::raw::c_void,
        WrSize: ::std::os::raw::c_int,
        pRead: *mut ::std::os::raw::c_void,
        RdSize: ::std::os::raw::c_int,
        IsCommand: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_CommunicateEx
            .as_ref()
            .expect("Expected function, got error."))(
            pWrite, WrSize, pRead, RdSize, IsCommand
        )
    }
    pub unsafe fn JLINKARM_ConfigJTAG(
        &self,
        IRPre: ::std::os::raw::c_int,
        DRPre: ::std::os::raw::c_int,
    ) -> () {
        (self
            .JLINKARM_ConfigJTAG
            .as_ref()
            .expect("Expected function, got error."))(IRPre, DRPre)
    }
    pub unsafe fn JLINK_ConfigJTAG(
        &self,
        IRPre: ::std::os::raw::c_int,
        DRPre: ::std::os::raw::c_int,
    ) -> () {
        (self
            .JLINK_ConfigJTAG
            .as_ref()
            .expect("Expected function, got error."))(IRPre, DRPre)
    }
    pub unsafe fn JLINKARM_Connect(&self) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_Connect
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_Connect(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_Connect
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_Core2CoreName(
        &self,
        Core: ::std::os::raw::c_uint,
        pBuffer: *mut ::std::os::raw::c_char,
        BufferSize: ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINKARM_Core2CoreName
            .as_ref()
            .expect("Expected function, got error."))(Core, pBuffer, BufferSize)
    }
    pub unsafe fn JLINKARM_DisassembleInst(
        &self,
        pBuffer: *mut ::std::os::raw::c_char,
        BufferSize: ::std::os::raw::c_uint,
        Addr: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_DisassembleInst
            .as_ref()
            .expect("Expected function, got error."))(pBuffer, BufferSize, Addr)
    }
    pub unsafe fn JLINKARM_DisassembleInstEx(
        &self,
        pBuffer: *mut ::std::os::raw::c_char,
        BufferSize: ::std::os::raw::c_uint,
        Addr: ::std::os::raw::c_uint,
        pInfo: *const JLINK_DISASSEMBLY_INFO,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_DisassembleInstEx
            .as_ref()
            .expect("Expected function, got error."))(pBuffer, BufferSize, Addr, pInfo)
    }
    pub unsafe fn JLINKARM_DownloadECode(
        &self,
        pECode: *const ::std::os::raw::c_uchar,
        NumBytes: ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINKARM_DownloadECode
            .as_ref()
            .expect("Expected function, got error."))(pECode, NumBytes)
    }
    pub unsafe fn JLINK_DownloadECode(
        &self,
        pECode: *const ::std::os::raw::c_uchar,
        NumBytes: ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINK_DownloadECode
            .as_ref()
            .expect("Expected function, got error."))(pECode, NumBytes)
    }
    pub unsafe fn JLINKARM_EnableCheckModeAfterWrite(
        &self,
        OnOff: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_EnableCheckModeAfterWrite
            .as_ref()
            .expect("Expected function, got error."))(OnOff)
    }
    pub unsafe fn JLINK_EnableCheckModeAfterWrite(
        &self,
        OnOff: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_EnableCheckModeAfterWrite
            .as_ref()
            .expect("Expected function, got error."))(OnOff)
    }
    pub unsafe fn JLINKARM_EnableFlashCache(&self, Enable: ::std::os::raw::c_char) -> () {
        (self
            .JLINKARM_EnableFlashCache
            .as_ref()
            .expect("Expected function, got error."))(Enable)
    }
    pub unsafe fn JLINK_EnableFlashCache(&self, Enable: ::std::os::raw::c_char) -> () {
        (self
            .JLINK_EnableFlashCache
            .as_ref()
            .expect("Expected function, got error."))(Enable)
    }
    pub unsafe fn JLINKARM_EnableLog(&self, pfLog: JLINKARM_LOG) -> () {
        (self
            .JLINKARM_EnableLog
            .as_ref()
            .expect("Expected function, got error."))(pfLog)
    }
    pub unsafe fn JLINK_EnableLog(&self, pfLog: JLINK_LOG) -> () {
        (self
            .JLINK_EnableLog
            .as_ref()
            .expect("Expected function, got error."))(pfLog)
    }
    pub unsafe fn JLINKARM_EnablePerformanceCnt(
        &self,
        Index: ::std::os::raw::c_uint,
        OnOff: ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINKARM_EnablePerformanceCnt
            .as_ref()
            .expect("Expected function, got error."))(Index, OnOff)
    }
    pub unsafe fn JLINK_EnablePerformanceCnt(
        &self,
        Index: ::std::os::raw::c_uint,
        OnOff: ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINK_EnablePerformanceCnt
            .as_ref()
            .expect("Expected function, got error."))(Index, OnOff)
    }
    pub unsafe fn JLINKARM_EnableSoftBPs(&self, Enable: ::std::os::raw::c_char) -> () {
        (self
            .JLINKARM_EnableSoftBPs
            .as_ref()
            .expect("Expected function, got error."))(Enable)
    }
    pub unsafe fn JLINK_EnableSoftBPs(&self, Enable: ::std::os::raw::c_char) -> () {
        (self
            .JLINK_EnableSoftBPs
            .as_ref()
            .expect("Expected function, got error."))(Enable)
    }
    pub unsafe fn JLINKARM_EndDownload(&self) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_EndDownload
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_EndDownload(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_EndDownload
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_ExecCommand(
        &self,
        pIn: *const ::std::os::raw::c_char,
        pOut: *mut ::std::os::raw::c_char,
        BufferSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_ExecCommand
            .as_ref()
            .expect("Expected function, got error."))(pIn, pOut, BufferSize)
    }
    pub unsafe fn JLINK_ExecCommand(
        &self,
        pIn: *const ::std::os::raw::c_char,
        pOut: *mut ::std::os::raw::c_char,
        BufferSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ExecCommand
            .as_ref()
            .expect("Expected function, got error."))(pIn, pOut, BufferSize)
    }
    pub unsafe fn JLINKARM_ExecECode(&self) -> () {
        (self
            .JLINKARM_ExecECode
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_ExecECode(&self) -> () {
        (self
            .JLINK_ExecECode
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_FindBP(&self, Addr: ::std::os::raw::c_uint) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_FindBP
            .as_ref()
            .expect("Expected function, got error."))(Addr)
    }
    pub unsafe fn JLINK_FindBP(&self, Addr: ::std::os::raw::c_uint) -> ::std::os::raw::c_int {
        (self
            .JLINK_FindBP
            .as_ref()
            .expect("Expected function, got error."))(Addr)
    }
    pub unsafe fn JLINKARM_FreeMem(
        &self,
        pMem: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_FreeMem
            .as_ref()
            .expect("Expected function, got error."))(pMem)
    }
    pub unsafe fn JLINKARM_GetBPInfo(
        &self,
        BPHandle: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint {
        (self
            .JLINKARM_GetBPInfo
            .as_ref()
            .expect("Expected function, got error."))(BPHandle)
    }
    pub unsafe fn JLINKARM_GetBPInfoEx(
        &self,
        iBP: ::std::os::raw::c_int,
        pInfo: *mut JLINKARM_BP_INFO,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_GetBPInfoEx
            .as_ref()
            .expect("Expected function, got error."))(iBP, pInfo)
    }
    pub unsafe fn JLINK_GetBPInfoEx(
        &self,
        iBP: ::std::os::raw::c_int,
        pInfo: *mut JLINKARM_BP_INFO,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_GetBPInfoEx
            .as_ref()
            .expect("Expected function, got error."))(iBP, pInfo)
    }
    pub unsafe fn JLINKARM_GetCompileDateTime(&self) -> *const ::std::os::raw::c_char {
        (self
            .JLINKARM_GetCompileDateTime
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_GetCompileDateTime(&self) -> *const ::std::os::raw::c_char {
        (self
            .JLINK_GetCompileDateTime
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_GetConfigData(
        &self,
        pIRPre: *mut ::std::os::raw::c_int,
        pDRPre: *mut ::std::os::raw::c_int,
    ) -> () {
        (self
            .JLINKARM_GetConfigData
            .as_ref()
            .expect("Expected function, got error."))(pIRPre, pDRPre)
    }
    pub unsafe fn JLINK_GetConfigData(
        &self,
        pIRPre: *mut ::std::os::raw::c_int,
        pDRPre: *mut ::std::os::raw::c_int,
    ) -> () {
        (self
            .JLINK_GetConfigData
            .as_ref()
            .expect("Expected function, got error."))(pIRPre, pDRPre)
    }
    pub unsafe fn JLINKARM_GetDebugInfo(
        &self,
        Index: ::std::os::raw::c_uint,
        pInfo: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_GetDebugInfo
            .as_ref()
            .expect("Expected function, got error."))(Index, pInfo)
    }
    pub unsafe fn JLINK_GetDebugInfo(
        &self,
        Index: ::std::os::raw::c_uint,
        pInfo: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_GetDebugInfo
            .as_ref()
            .expect("Expected function, got error."))(Index, pInfo)
    }
    pub unsafe fn JLINKARM_GetDeviceFamily(&self) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_GetDeviceFamily
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_GetDeviceFamily(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_GetDeviceFamily
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_GetDLLVersion(&self) -> ::std::os::raw::c_uint {
        (self
            .JLINKARM_GetDLLVersion
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_GetDLLVersion(&self) -> ::std::os::raw::c_uint {
        (self
            .JLINK_GetDLLVersion
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_GetEmbeddedFWString(
        &self,
        sFWId: *const ::std::os::raw::c_char,
        pBuffer: *mut ::std::os::raw::c_char,
        BufferSize: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_GetEmbeddedFWString
            .as_ref()
            .expect("Expected function, got error."))(sFWId, pBuffer, BufferSize)
    }
    pub unsafe fn JLINK_GetEmbeddedFWString(
        &self,
        sFWId: *const ::std::os::raw::c_char,
        pBuffer: *mut ::std::os::raw::c_char,
        BufferSize: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_GetEmbeddedFWString
            .as_ref()
            .expect("Expected function, got error."))(sFWId, pBuffer, BufferSize)
    }
    pub unsafe fn JLINKARM_GetEmuCaps(&self) -> ::std::os::raw::c_uint {
        (self
            .JLINKARM_GetEmuCaps
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_GetEmuCaps(&self) -> ::std::os::raw::c_uint {
        (self
            .JLINK_GetEmuCaps
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_GetEmuCapsEx(
        &self,
        pCaps: *mut ::std::os::raw::c_uchar,
        BufferSize: ::std::os::raw::c_int,
    ) -> () {
        (self
            .JLINKARM_GetEmuCapsEx
            .as_ref()
            .expect("Expected function, got error."))(pCaps, BufferSize)
    }
    pub unsafe fn JLINK_GetEmuCapsEx(
        &self,
        pCaps: *mut ::std::os::raw::c_uchar,
        BufferSize: ::std::os::raw::c_int,
    ) -> () {
        (self
            .JLINK_GetEmuCapsEx
            .as_ref()
            .expect("Expected function, got error."))(pCaps, BufferSize)
    }
    pub unsafe fn JLINKARM_GetExecTime(
        &self,
        pExecTimeLow: *mut ::std::os::raw::c_uint,
        pExecTimeHigh: *mut ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINKARM_GetExecTime
            .as_ref()
            .expect("Expected function, got error."))(pExecTimeLow, pExecTimeHigh)
    }
    pub unsafe fn JLINK_GetExecTime(
        &self,
        pExecTimeLow: *mut ::std::os::raw::c_uint,
        pExecTimeHigh: *mut ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINK_GetExecTime
            .as_ref()
            .expect("Expected function, got error."))(pExecTimeLow, pExecTimeHigh)
    }
    pub unsafe fn JLINKARM_GetFeatureString(&self, pOut: *mut ::std::os::raw::c_char) -> () {
        (self
            .JLINKARM_GetFeatureString
            .as_ref()
            .expect("Expected function, got error."))(pOut)
    }
    pub unsafe fn JLINK_GetFeatureString(&self, pOut: *mut ::std::os::raw::c_char) -> () {
        (self
            .JLINK_GetFeatureString
            .as_ref()
            .expect("Expected function, got error."))(pOut)
    }
    pub unsafe fn JLINKARM_GetFirmwareString(
        &self,
        s: *mut ::std::os::raw::c_char,
        BufferSize: ::std::os::raw::c_int,
    ) -> () {
        (self
            .JLINKARM_GetFirmwareString
            .as_ref()
            .expect("Expected function, got error."))(s, BufferSize)
    }
    pub unsafe fn JLINK_GetFirmwareString(
        &self,
        s: *mut ::std::os::raw::c_char,
        BufferSize: ::std::os::raw::c_int,
    ) -> () {
        (self
            .JLINK_GetFirmwareString
            .as_ref()
            .expect("Expected function, got error."))(s, BufferSize)
    }
    pub unsafe fn JLINKARM_GetHardwareVersion(&self) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_GetHardwareVersion
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_GetHardwareVersion(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_GetHardwareVersion
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_GetHWInfo(
        &self,
        BitMask: ::std::os::raw::c_uint,
        pHWInfo: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_GetHWInfo
            .as_ref()
            .expect("Expected function, got error."))(BitMask, pHWInfo)
    }
    pub unsafe fn JLINK_GetHWInfo(
        &self,
        BitMask: ::std::os::raw::c_uint,
        pHWInfo: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_GetHWInfo
            .as_ref()
            .expect("Expected function, got error."))(BitMask, pHWInfo)
    }
    pub unsafe fn JLINKARM_GetHWStatus(
        &self,
        pStat: *mut JLINKARM_HW_STATUS,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_GetHWStatus
            .as_ref()
            .expect("Expected function, got error."))(pStat)
    }
    pub unsafe fn JLINK_GetHWStatus(
        &self,
        pStat: *mut JLINKARM_HW_STATUS,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_GetHWStatus
            .as_ref()
            .expect("Expected function, got error."))(pStat)
    }
    pub unsafe fn JLINKARM_GetId(&self) -> ::std::os::raw::c_uint {
        (self
            .JLINKARM_GetId
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_GetId(&self) -> ::std::os::raw::c_uint {
        (self
            .JLINK_GetId
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_GetIdData(&self, pIdData: *mut JTAG_ID_DATA) -> () {
        (self
            .JLINKARM_GetIdData
            .as_ref()
            .expect("Expected function, got error."))(pIdData)
    }
    pub unsafe fn JLINK_GetIdData(&self, pIdData: *mut JTAG_ID_DATA) -> () {
        (self
            .JLINK_GetIdData
            .as_ref()
            .expect("Expected function, got error."))(pIdData)
    }
    pub unsafe fn JLINKARM_GetIRLen(&self) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_GetIRLen
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_GetIRLen(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_GetIRLen
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_GetMOEs(
        &self,
        pInfo: *mut JLINKARM_MOE_INFO,
        MaxNumMOEs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_GetMOEs
            .as_ref()
            .expect("Expected function, got error."))(pInfo, MaxNumMOEs)
    }
    pub unsafe fn JLINK_GetMOEs(
        &self,
        pInfo: *mut JLINKARM_MOE_INFO,
        MaxNumMOEs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_GetMOEs
            .as_ref()
            .expect("Expected function, got error."))(pInfo, MaxNumMOEs)
    }
    pub unsafe fn JLINKARM_GetNumBPs(&self) -> ::std::os::raw::c_uint {
        (self
            .JLINKARM_GetNumBPs
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_GetNumBPs(&self) -> ::std::os::raw::c_uint {
        (self
            .JLINK_GetNumBPs
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_GetNumBPUnits(
        &self,
        Type: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_GetNumBPUnits
            .as_ref()
            .expect("Expected function, got error."))(Type)
    }
    pub unsafe fn JLINK_GetNumBPUnits(
        &self,
        Type: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_GetNumBPUnits
            .as_ref()
            .expect("Expected function, got error."))(Type)
    }
    pub unsafe fn JLINKARM_GetNumWPs(&self) -> ::std::os::raw::c_uint {
        (self
            .JLINKARM_GetNumWPs
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_GetNumWPs(&self) -> ::std::os::raw::c_uint {
        (self
            .JLINK_GetNumWPs
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_GetNumWPUnits(&self) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_GetNumWPUnits
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_GetNumWPUnits(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_GetNumWPUnits
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_GetOEMString(
        &self,
        pOut: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char {
        (self
            .JLINKARM_GetOEMString
            .as_ref()
            .expect("Expected function, got error."))(pOut)
    }
    pub unsafe fn JLINK_GetOEMString(
        &self,
        pOut: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char {
        (self
            .JLINK_GetOEMString
            .as_ref()
            .expect("Expected function, got error."))(pOut)
    }
    pub unsafe fn JLINKARM_GetPerformanceCnt(
        &self,
        Index: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint {
        (self
            .JLINKARM_GetPerformanceCnt
            .as_ref()
            .expect("Expected function, got error."))(Index)
    }
    pub unsafe fn JLINK_GetPerformanceCnt(
        &self,
        Index: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint {
        (self
            .JLINK_GetPerformanceCnt
            .as_ref()
            .expect("Expected function, got error."))(Index)
    }
    pub unsafe fn JLINKARM_GetpSharedMem(&self) -> *mut ::std::os::raw::c_void {
        (self
            .JLINKARM_GetpSharedMem
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_GetpSharedMem(&self) -> *mut ::std::os::raw::c_void {
        (self
            .JLINK_GetpSharedMem
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_GetRegisterList(
        &self,
        paList: *mut ::std::os::raw::c_uint,
        MaxNumItems: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_GetRegisterList
            .as_ref()
            .expect("Expected function, got error."))(paList, MaxNumItems)
    }
    pub unsafe fn JLINK_GetRegisterList(
        &self,
        paList: *mut ::std::os::raw::c_uint,
        MaxNumItems: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_GetRegisterList
            .as_ref()
            .expect("Expected function, got error."))(paList, MaxNumItems)
    }
    pub unsafe fn JLINKARM_GetRegisterName(
        &self,
        RegIndex: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char {
        (self
            .JLINKARM_GetRegisterName
            .as_ref()
            .expect("Expected function, got error."))(RegIndex)
    }
    pub unsafe fn JLINK_GetRegisterName(
        &self,
        RegIndex: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char {
        (self
            .JLINK_GetRegisterName
            .as_ref()
            .expect("Expected function, got error."))(RegIndex)
    }
    pub unsafe fn JLINKARM_GetResetTypeDesc(
        &self,
        ResetType: ::std::os::raw::c_int,
        psResetName: *mut *const ::std::os::raw::c_char,
        psResetDesc: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_GetResetTypeDesc
            .as_ref()
            .expect("Expected function, got error."))(ResetType, psResetName, psResetDesc)
    }
    pub unsafe fn JLINK_GetResetTypeDesc(
        &self,
        ResetType: ::std::os::raw::c_int,
        psResetName: *mut *const ::std::os::raw::c_char,
        psResetDesc: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_GetResetTypeDesc
            .as_ref()
            .expect("Expected function, got error."))(ResetType, psResetName, psResetDesc)
    }
    pub unsafe fn JLINKARM_GetScanLen(&self) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_GetScanLen
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_GetScanLen(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_GetScanLen
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_GetSelDevice(&self) -> ::std::os::raw::c_ushort {
        (self
            .JLINKARM_GetSelDevice
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_GetSelDevice(&self) -> ::std::os::raw::c_ushort {
        (self
            .JLINK_GetSelDevice
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_GetSN(&self) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_GetSN
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_GetSN(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_GetSN
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_GetSpeed(&self) -> ::std::os::raw::c_ushort {
        (self
            .JLINKARM_GetSpeed
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_GetSpeed(&self) -> ::std::os::raw::c_ushort {
        (self
            .JLINK_GetSpeed
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_GetSpeedInfo(&self, pSpeedInfo: *mut JLINKARM_SPEED_INFO) -> () {
        (self
            .JLINKARM_GetSpeedInfo
            .as_ref()
            .expect("Expected function, got error."))(pSpeedInfo)
    }
    pub unsafe fn JLINK_GetSpeedInfo(&self, pSpeedInfo: *mut JLINKARM_SPEED_INFO) -> () {
        (self
            .JLINK_GetSpeedInfo
            .as_ref()
            .expect("Expected function, got error."))(pSpeedInfo)
    }
    pub unsafe fn JLINKARM_GetWPInfoEx(
        &self,
        iWP: ::std::os::raw::c_int,
        pInfo: *mut JLINKARM_WP_INFO,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_GetWPInfoEx
            .as_ref()
            .expect("Expected function, got error."))(iWP, pInfo)
    }
    pub unsafe fn JLINK_GetWPInfoEx(
        &self,
        iWP: ::std::os::raw::c_int,
        pInfo: *mut JLINKARM_WP_INFO,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_GetWPInfoEx
            .as_ref()
            .expect("Expected function, got error."))(iWP, pInfo)
    }
    pub unsafe fn JLINKARM_Go(&self) -> () {
        (self
            .JLINKARM_Go
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_Go(&self) -> () {
        (self
            .JLINK_Go
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_GoAllowSim(&self, NumInsts: ::std::os::raw::c_uint) -> () {
        (self
            .JLINKARM_GoAllowSim
            .as_ref()
            .expect("Expected function, got error."))(NumInsts)
    }
    pub unsafe fn JLINK_GoAllowSim(&self, NumInsts: ::std::os::raw::c_uint) -> () {
        (self
            .JLINK_GoAllowSim
            .as_ref()
            .expect("Expected function, got error."))(NumInsts)
    }
    pub unsafe fn JLINKARM_GoEx(
        &self,
        MaxEmulInsts: ::std::os::raw::c_uint,
        Flags: ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINKARM_GoEx
            .as_ref()
            .expect("Expected function, got error."))(MaxEmulInsts, Flags)
    }
    pub unsafe fn JLINK_GoEx(
        &self,
        MaxEmulInsts: ::std::os::raw::c_uint,
        Flags: ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINK_GoEx
            .as_ref()
            .expect("Expected function, got error."))(MaxEmulInsts, Flags)
    }
    pub unsafe fn JLINKARM_GoHalt(
        &self,
        NumClocks: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_GoHalt
            .as_ref()
            .expect("Expected function, got error."))(NumClocks)
    }
    pub unsafe fn JLINK_GoHalt(&self, NumClocks: ::std::os::raw::c_uint) -> ::std::os::raw::c_int {
        (self
            .JLINK_GoHalt
            .as_ref()
            .expect("Expected function, got error."))(NumClocks)
    }
    pub unsafe fn JLINKARM_GoIntDis(&self) -> () {
        (self
            .JLINKARM_GoIntDis
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_GoIntDis(&self) -> () {
        (self
            .JLINK_GoIntDis
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_Halt(&self) -> ::std::os::raw::c_char {
        (self
            .JLINKARM_Halt
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_Halt(&self) -> ::std::os::raw::c_char {
        (self
            .JLINK_Halt
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_HasError(&self) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_HasError
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_HasError(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_HasError
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_IsConnected(&self) -> ::std::os::raw::c_char {
        (self
            .JLINKARM_IsConnected
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_IsConnected(&self) -> ::std::os::raw::c_char {
        (self
            .JLINK_IsConnected
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_IsHalted(&self) -> ::std::os::raw::c_char {
        (self
            .JLINKARM_IsHalted
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_IsHalted(&self) -> ::std::os::raw::c_char {
        (self
            .JLINK_IsHalted
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_IsOpen(&self) -> ::std::os::raw::c_char {
        (self
            .JLINKARM_IsOpen
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_IsOpen(&self) -> ::std::os::raw::c_char {
        (self
            .JLINK_IsOpen
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_Lock(&self) -> () {
        (self
            .JLINKARM_Lock
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_Lock(&self) -> () {
        (self
            .JLINK_Lock
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_MeasureCPUSpeed(
        &self,
        RAMAddr: ::std::os::raw::c_uint,
        PreserveMem: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_MeasureCPUSpeed
            .as_ref()
            .expect("Expected function, got error."))(RAMAddr, PreserveMem)
    }
    pub unsafe fn JLINK_MeasureCPUSpeed(
        &self,
        RAMAddr: ::std::os::raw::c_uint,
        PreserveMem: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_MeasureCPUSpeed
            .as_ref()
            .expect("Expected function, got error."))(RAMAddr, PreserveMem)
    }
    pub unsafe fn JLINKARM_MeasureCPUSpeedEx(
        &self,
        RAMAddr: ::std::os::raw::c_uint,
        PreserveMem: ::std::os::raw::c_int,
        AllowFail: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_MeasureCPUSpeedEx
            .as_ref()
            .expect("Expected function, got error."))(RAMAddr, PreserveMem, AllowFail)
    }
    pub unsafe fn JLINK_MeasureCPUSpeedEx(
        &self,
        RAMAddr: ::std::os::raw::c_uint,
        PreserveMem: ::std::os::raw::c_int,
        AllowFail: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_MeasureCPUSpeedEx
            .as_ref()
            .expect("Expected function, got error."))(RAMAddr, PreserveMem, AllowFail)
    }
    pub unsafe fn JLINKARM_MeasureRTCKReactTime(
        &self,
        pReactInfo: *mut JLINKARM_RTCK_REACT_INFO,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_MeasureRTCKReactTime
            .as_ref()
            .expect("Expected function, got error."))(pReactInfo)
    }
    pub unsafe fn JLINK_MeasureRTCKReactTime(
        &self,
        pReactInfo: *mut JLINKARM_RTCK_REACT_INFO,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_MeasureRTCKReactTime
            .as_ref()
            .expect("Expected function, got error."))(pReactInfo)
    }
    pub unsafe fn JLINKARM_MeasureSCLen(
        &self,
        ScanChain: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_MeasureSCLen
            .as_ref()
            .expect("Expected function, got error."))(ScanChain)
    }
    pub unsafe fn JLINK_MeasureSCLen(
        &self,
        ScanChain: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_MeasureSCLen
            .as_ref()
            .expect("Expected function, got error."))(ScanChain)
    }
    pub unsafe fn JLINKARM_Open(&self) -> *const ::std::os::raw::c_char {
        (self
            .JLINKARM_Open
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_Open(&self) -> *const ::std::os::raw::c_char {
        (self
            .JLINK_Open
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_OpenEx(
        &self,
        pfLog: JLINKARM_LOG,
        pfErrorOut: JLINKARM_LOG,
    ) -> *const ::std::os::raw::c_char {
        (self
            .JLINKARM_OpenEx
            .as_ref()
            .expect("Expected function, got error."))(pfLog, pfErrorOut)
    }
    pub unsafe fn JLINK_OpenEx(
        &self,
        pfLog: JLINK_LOG,
        pfErrorOut: JLINK_LOG,
    ) -> *const ::std::os::raw::c_char {
        (self
            .JLINK_OpenEx
            .as_ref()
            .expect("Expected function, got error."))(pfLog, pfErrorOut)
    }
    pub unsafe fn JLINKARM_ReadCodeMem(
        &self,
        Addr: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_ReadCodeMem
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumBytes, pData)
    }
    pub unsafe fn JLINK_ReadCodeMem(
        &self,
        Addr: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadCodeMem
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumBytes, pData)
    }
    pub unsafe fn JLINKARM_ReadConfigReg(
        &self,
        RegIndex: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_ReadConfigReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, pData)
    }
    pub unsafe fn JLINK_ReadConfigReg(
        &self,
        RegIndex: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadConfigReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, pData)
    }
    pub unsafe fn JLINKARM_ReadControlReg(
        &self,
        RegIndex: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_ReadControlReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, pData)
    }
    pub unsafe fn JLINK_ReadControlReg(
        &self,
        RegIndex: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadControlReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, pData)
    }
    pub unsafe fn JLINKARM_ReadDCC(
        &self,
        pData: *mut ::std::os::raw::c_uint,
        NumItems: ::std::os::raw::c_uint,
        TimeOut: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_ReadDCC
            .as_ref()
            .expect("Expected function, got error."))(pData, NumItems, TimeOut)
    }
    pub unsafe fn JLINK_ReadDCC(
        &self,
        pData: *mut ::std::os::raw::c_uint,
        NumItems: ::std::os::raw::c_uint,
        TimeOut: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadDCC
            .as_ref()
            .expect("Expected function, got error."))(pData, NumItems, TimeOut)
    }
    pub unsafe fn JLINKARM_ReadDCCFast(
        &self,
        pData: *mut ::std::os::raw::c_uint,
        NumItems: ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINKARM_ReadDCCFast
            .as_ref()
            .expect("Expected function, got error."))(pData, NumItems)
    }
    pub unsafe fn JLINK_ReadDCCFast(
        &self,
        pData: *mut ::std::os::raw::c_uint,
        NumItems: ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINK_ReadDCCFast
            .as_ref()
            .expect("Expected function, got error."))(pData, NumItems)
    }
    pub unsafe fn JLINKARM_ReadTerminal(
        &self,
        pBuffer: *mut ::std::os::raw::c_uchar,
        BufferSize: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_ReadTerminal
            .as_ref()
            .expect("Expected function, got error."))(pBuffer, BufferSize)
    }
    pub unsafe fn JLINK_ReadTerminal(
        &self,
        pBuffer: *mut ::std::os::raw::c_uchar,
        BufferSize: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadTerminal
            .as_ref()
            .expect("Expected function, got error."))(pBuffer, BufferSize)
    }
    pub unsafe fn JLINKARM_ReadDebugPort(
        &self,
        RegIndex: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_ReadDebugPort
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, pData)
    }
    pub unsafe fn JLINK_ReadDebugPort(
        &self,
        RegIndex: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadDebugPort
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, pData)
    }
    pub unsafe fn JLINKARM_ReadDebugReg(
        &self,
        RegIndex: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_ReadDebugReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, pData)
    }
    pub unsafe fn JLINK_ReadDebugReg(
        &self,
        RegIndex: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadDebugReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, pData)
    }
    pub unsafe fn JLINKARM_ReadEmu(
        &self,
        p: *mut ::std::os::raw::c_void,
        NumBytes: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_ReadEmu
            .as_ref()
            .expect("Expected function, got error."))(p, NumBytes)
    }
    pub unsafe fn JLINK_ReadEmu(
        &self,
        p: *mut ::std::os::raw::c_void,
        NumBytes: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadEmu
            .as_ref()
            .expect("Expected function, got error."))(p, NumBytes)
    }
    pub unsafe fn JLINKARM_ReadEmuConfigMem(
        &self,
        p: *mut ::std::os::raw::c_uchar,
        Off: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_ReadEmuConfigMem
            .as_ref()
            .expect("Expected function, got error."))(p, Off, NumBytes)
    }
    pub unsafe fn JLINK_ReadEmuConfigMem(
        &self,
        p: *mut ::std::os::raw::c_uchar,
        Off: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadEmuConfigMem
            .as_ref()
            .expect("Expected function, got error."))(p, Off, NumBytes)
    }
    pub unsafe fn JLINKARM_ReadICEReg(
        &self,
        RegIndex: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint {
        (self
            .JLINKARM_ReadICEReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex)
    }
    pub unsafe fn JLINK_ReadICEReg(
        &self,
        RegIndex: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint {
        (self
            .JLINK_ReadICEReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex)
    }
    pub unsafe fn JLINKARM_ReadMem(
        &self,
        Addr: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_ReadMem
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumBytes, pData)
    }
    pub unsafe fn JLINK_ReadMem(
        &self,
        Addr: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadMem
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumBytes, pData)
    }
    pub unsafe fn JLINKARM_ReadMemEx(
        &self,
        Addr: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_void,
        Flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_ReadMemEx
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumBytes, pData, Flags)
    }
    pub unsafe fn JLINK_ReadMemEx(
        &self,
        Addr: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_void,
        AccessWidth: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadMemEx
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumBytes, pData, AccessWidth)
    }
    pub unsafe fn JLINKARM_ReadMemHW(
        &self,
        Addr: ::std::os::raw::c_uint,
        Count: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_ReadMemHW
            .as_ref()
            .expect("Expected function, got error."))(Addr, Count, pData)
    }
    pub unsafe fn JLINK_ReadMemHW(
        &self,
        Addr: ::std::os::raw::c_uint,
        Count: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadMemHW
            .as_ref()
            .expect("Expected function, got error."))(Addr, Count, pData)
    }
    pub unsafe fn JLINKARM_ReadMemIndirect(
        &self,
        Addr: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_ReadMemIndirect
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumBytes, pData)
    }
    pub unsafe fn JLINK_ReadMemIndirect(
        &self,
        Addr: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadMemIndirect
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumBytes, pData)
    }
    pub unsafe fn JLINKARM_ReadMemU8(
        &self,
        Addr: ::std::os::raw::c_uint,
        NumItems: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_uchar,
        pStatus: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_ReadMemU8
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumItems, pData, pStatus)
    }
    pub unsafe fn JLINK_ReadMemU8(
        &self,
        Addr: ::std::os::raw::c_uint,
        NumItems: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_uchar,
        pStatus: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadMemU8
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumItems, pData, pStatus)
    }
    pub unsafe fn JLINKARM_ReadMemU16(
        &self,
        Addr: ::std::os::raw::c_uint,
        NumItems: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_ushort,
        pStatus: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_ReadMemU16
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumItems, pData, pStatus)
    }
    pub unsafe fn JLINK_ReadMemU16(
        &self,
        Addr: ::std::os::raw::c_uint,
        NumItems: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_ushort,
        pStatus: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadMemU16
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumItems, pData, pStatus)
    }
    pub unsafe fn JLINKARM_ReadMemU32(
        &self,
        Addr: ::std::os::raw::c_uint,
        NumItems: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_uint,
        pStatus: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_ReadMemU32
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumItems, pData, pStatus)
    }
    pub unsafe fn JLINK_ReadMemU32(
        &self,
        Addr: ::std::os::raw::c_uint,
        NumItems: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_uint,
        pStatus: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadMemU32
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumItems, pData, pStatus)
    }
    pub unsafe fn JLINKARM_ReadMemU64(
        &self,
        Addr: ::std::os::raw::c_uint,
        NumItems: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_ulonglong,
        pStatus: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_ReadMemU64
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumItems, pData, pStatus)
    }
    pub unsafe fn JLINK_ReadMemU64(
        &self,
        Addr: ::std::os::raw::c_uint,
        NumItems: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_ulonglong,
        pStatus: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadMemU64
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumItems, pData, pStatus)
    }
    pub unsafe fn JLINKARM_ReadReg(&self, RegIndex: ARM_REG) -> ::std::os::raw::c_uint {
        (self
            .JLINKARM_ReadReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex)
    }
    pub unsafe fn JLINK_ReadReg(&self, RegIndex: ARM_REG) -> ::std::os::raw::c_uint {
        (self
            .JLINK_ReadReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex)
    }
    pub unsafe fn JLINKARM_ReadRegs(
        &self,
        paRegIndex: *const ::std::os::raw::c_uint,
        paData: *mut ::std::os::raw::c_uint,
        paStatus: *mut ::std::os::raw::c_uchar,
        NumRegs: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_ReadRegs
            .as_ref()
            .expect("Expected function, got error."))(paRegIndex, paData, paStatus, NumRegs)
    }
    pub unsafe fn JLINK_ReadRegs(
        &self,
        paRegIndex: *const ::std::os::raw::c_uint,
        paData: *mut ::std::os::raw::c_uint,
        paStatus: *mut ::std::os::raw::c_uchar,
        NumRegs: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadRegs
            .as_ref()
            .expect("Expected function, got error."))(paRegIndex, paData, paStatus, NumRegs)
    }
    pub unsafe fn JLINKARM_Reset(&self) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_Reset
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_Reset(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_Reset
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_ResetNoHalt(&self) -> () {
        (self
            .JLINKARM_ResetNoHalt
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_ResetNoHalt(&self) -> () {
        (self
            .JLINK_ResetNoHalt
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_ResetPullsRESET(&self, OnOff: ::std::os::raw::c_uchar) -> () {
        (self
            .JLINKARM_ResetPullsRESET
            .as_ref()
            .expect("Expected function, got error."))(OnOff)
    }
    pub unsafe fn JLINK_ResetPullsRESET(&self, OnOff: ::std::os::raw::c_uchar) -> () {
        (self
            .JLINK_ResetPullsRESET
            .as_ref()
            .expect("Expected function, got error."))(OnOff)
    }
    pub unsafe fn JLINKARM_ResetPullsTRST(&self, OnOff: ::std::os::raw::c_uchar) -> () {
        (self
            .JLINKARM_ResetPullsTRST
            .as_ref()
            .expect("Expected function, got error."))(OnOff)
    }
    pub unsafe fn JLINK_ResetPullsTRST(&self, OnOff: ::std::os::raw::c_uchar) -> () {
        (self
            .JLINK_ResetPullsTRST
            .as_ref()
            .expect("Expected function, got error."))(OnOff)
    }
    pub unsafe fn JLINKARM_ResetTRST(&self) -> () {
        (self
            .JLINKARM_ResetTRST
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_ResetTRST(&self) -> () {
        (self
            .JLINK_ResetTRST
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_SelectDeviceFamily(&self, DeviceFamily: ::std::os::raw::c_int) -> () {
        (self
            .JLINKARM_SelectDeviceFamily
            .as_ref()
            .expect("Expected function, got error."))(DeviceFamily)
    }
    pub unsafe fn JLINK_SelectDeviceFamily(&self, DeviceFamily: ::std::os::raw::c_int) -> () {
        (self
            .JLINK_SelectDeviceFamily
            .as_ref()
            .expect("Expected function, got error."))(DeviceFamily)
    }
    pub unsafe fn JLINKARM_SelectIP(
        &self,
        sHost: *const ::std::os::raw::c_char,
        Port: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_char {
        (self
            .JLINKARM_SelectIP
            .as_ref()
            .expect("Expected function, got error."))(sHost, Port)
    }
    pub unsafe fn JLINK_SelectIP(
        &self,
        sHost: *const ::std::os::raw::c_char,
        Port: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_char {
        (self
            .JLINK_SelectIP
            .as_ref()
            .expect("Expected function, got error."))(sHost, Port)
    }
    pub unsafe fn JLINKARM_SelectTraceSource(&self, Source: ::std::os::raw::c_int) -> () {
        (self
            .JLINKARM_SelectTraceSource
            .as_ref()
            .expect("Expected function, got error."))(Source)
    }
    pub unsafe fn JLINK_SelectTraceSource(&self, Source: ::std::os::raw::c_int) -> () {
        (self
            .JLINK_SelectTraceSource
            .as_ref()
            .expect("Expected function, got error."))(Source)
    }
    pub unsafe fn JLINKARM_SelectUSB(&self, Port: ::std::os::raw::c_int) -> ::std::os::raw::c_char {
        (self
            .JLINKARM_SelectUSB
            .as_ref()
            .expect("Expected function, got error."))(Port)
    }
    pub unsafe fn JLINK_SelectUSB(&self, Port: ::std::os::raw::c_int) -> ::std::os::raw::c_char {
        (self
            .JLINK_SelectUSB
            .as_ref()
            .expect("Expected function, got error."))(Port)
    }
    pub unsafe fn JLINKARM_SetBP(
        &self,
        BPIndex: ::std::os::raw::c_uint,
        Addr: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_SetBP
            .as_ref()
            .expect("Expected function, got error."))(BPIndex, Addr)
    }
    pub unsafe fn JLINK_SetBP(
        &self,
        BPIndex: ::std::os::raw::c_uint,
        Addr: ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINK_SetBP
            .as_ref()
            .expect("Expected function, got error."))(BPIndex, Addr)
    }
    pub unsafe fn JLINKARM_SetBPEx(
        &self,
        Addr: ::std::os::raw::c_uint,
        TypeFlags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_SetBPEx
            .as_ref()
            .expect("Expected function, got error."))(Addr, TypeFlags)
    }
    pub unsafe fn JLINK_SetBPEx(
        &self,
        Addr: ::std::os::raw::c_uint,
        Type: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_SetBPEx
            .as_ref()
            .expect("Expected function, got error."))(Addr, Type)
    }
    pub unsafe fn JLINKARM_SetCoreIndex(
        &self,
        CoreIndex: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_SetCoreIndex
            .as_ref()
            .expect("Expected function, got error."))(CoreIndex)
    }
    pub unsafe fn JLINKARM_SetDataEvent(
        &self,
        pEvent: *mut JLINKARM_DATA_EVENT,
        pHandle: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_SetDataEvent
            .as_ref()
            .expect("Expected function, got error."))(pEvent, pHandle)
    }
    pub unsafe fn JLINK_SetDataEvent(
        &self,
        pEvent: *mut JLINKARM_DATA_EVENT,
        pHandle: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_SetDataEvent
            .as_ref()
            .expect("Expected function, got error."))(pEvent, pHandle)
    }
    pub unsafe fn JLINKARM_SetDebugUnitBlockMask(
        &self,
        Type: ::std::os::raw::c_int,
        Mask: ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINKARM_SetDebugUnitBlockMask
            .as_ref()
            .expect("Expected function, got error."))(Type, Mask)
    }
    pub unsafe fn JLINK_SetDebugUnitBlockMask(
        &self,
        Type: ::std::os::raw::c_int,
        Mask: ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINK_SetDebugUnitBlockMask
            .as_ref()
            .expect("Expected function, got error."))(Type, Mask)
    }
    pub unsafe fn JLINKARM_SetEndian(&self, v: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_SetEndian
            .as_ref()
            .expect("Expected function, got error."))(v)
    }
    pub unsafe fn JLINK_SetEndian(&self, v: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .JLINK_SetEndian
            .as_ref()
            .expect("Expected function, got error."))(v)
    }
    pub unsafe fn JLINKARM_SetErrorOutHandler(&self, pfErrorOut: JLINKARM_LOG) -> () {
        (self
            .JLINKARM_SetErrorOutHandler
            .as_ref()
            .expect("Expected function, got error."))(pfErrorOut)
    }
    pub unsafe fn JLINK_SetErrorOutHandler(&self, pfErrorOut: JLINK_LOG) -> () {
        (self
            .JLINK_SetErrorOutHandler
            .as_ref()
            .expect("Expected function, got error."))(pfErrorOut)
    }
    pub unsafe fn JLINKARM_SetInitRegsOnReset(
        &self,
        v: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_SetInitRegsOnReset
            .as_ref()
            .expect("Expected function, got error."))(v)
    }
    pub unsafe fn JLINK_SetInitRegsOnReset(
        &self,
        v: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_SetInitRegsOnReset
            .as_ref()
            .expect("Expected function, got error."))(v)
    }
    pub unsafe fn JLINKARM_SetLogFile(&self, sFilename: *const ::std::os::raw::c_char) -> () {
        (self
            .JLINKARM_SetLogFile
            .as_ref()
            .expect("Expected function, got error."))(sFilename)
    }
    pub unsafe fn JLINK_SetLogFile(&self, sFilename: *const ::std::os::raw::c_char) -> () {
        (self
            .JLINK_SetLogFile
            .as_ref()
            .expect("Expected function, got error."))(sFilename)
    }
    pub unsafe fn JLINKARM_SetMaxSpeed(&self) -> () {
        (self
            .JLINKARM_SetMaxSpeed
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_SetMaxSpeed(&self) -> () {
        (self
            .JLINK_SetMaxSpeed
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_SetRESET(&self) -> () {
        (self
            .JLINKARM_SetRESET
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_SetRESET(&self) -> () {
        (self
            .JLINK_SetRESET
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_SetResetDelay(&self, ms: ::std::os::raw::c_int) -> () {
        (self
            .JLINKARM_SetResetDelay
            .as_ref()
            .expect("Expected function, got error."))(ms)
    }
    pub unsafe fn JLINK_SetResetDelay(&self, ms: ::std::os::raw::c_int) -> () {
        (self
            .JLINK_SetResetDelay
            .as_ref()
            .expect("Expected function, got error."))(ms)
    }
    pub unsafe fn JLINKARM_SetResetPara(
        &self,
        Value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_SetResetPara
            .as_ref()
            .expect("Expected function, got error."))(Value)
    }
    pub unsafe fn JLINK_SetResetPara(&self, Value: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .JLINK_SetResetPara
            .as_ref()
            .expect("Expected function, got error."))(Value)
    }
    pub unsafe fn JLINKARM_SetResetType(
        &self,
        ResetType: JLINKARM_RESET_TYPE,
    ) -> JLINKARM_RESET_TYPE {
        (self
            .JLINKARM_SetResetType
            .as_ref()
            .expect("Expected function, got error."))(ResetType)
    }
    pub unsafe fn JLINK_SetResetType(&self, ResetType: JLINKARM_RESET_TYPE) -> JLINKARM_RESET_TYPE {
        (self
            .JLINK_SetResetType
            .as_ref()
            .expect("Expected function, got error."))(ResetType)
    }
    pub unsafe fn JLINKARM_SetSpeed(&self, Speed: ::std::os::raw::c_uint) -> () {
        (self
            .JLINKARM_SetSpeed
            .as_ref()
            .expect("Expected function, got error."))(Speed)
    }
    pub unsafe fn JLINK_SetSpeed(&self, Speed: ::std::os::raw::c_uint) -> () {
        (self
            .JLINK_SetSpeed
            .as_ref()
            .expect("Expected function, got error."))(Speed)
    }
    pub unsafe fn JLINKARM_SetTCK(&self) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_SetTCK
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_SetTCK(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_SetTCK
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_SetTDI(&self) -> () {
        (self
            .JLINKARM_SetTDI
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_SetTDI(&self) -> () {
        (self
            .JLINK_SetTDI
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_SetTMS(&self) -> () {
        (self
            .JLINKARM_SetTMS
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_SetTMS(&self) -> () {
        (self
            .JLINK_SetTMS
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_SetTRST(&self) -> () {
        (self
            .JLINKARM_SetTRST
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_SetTRST(&self) -> () {
        (self
            .JLINK_SetTRST
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_SetWaitFunction(
        &self,
        pfWait: JLINKARM_WAIT_FUNC,
        pContext: *mut ::std::os::raw::c_void,
    ) -> () {
        (self
            .JLINKARM_SetWaitFunction
            .as_ref()
            .expect("Expected function, got error."))(pfWait, pContext)
    }
    pub unsafe fn JLINK_SetWaitFunction(
        &self,
        pfWait: JLINKARM_WAIT_FUNC,
        pContext: *mut ::std::os::raw::c_void,
    ) -> () {
        (self
            .JLINK_SetWaitFunction
            .as_ref()
            .expect("Expected function, got error."))(pfWait, pContext)
    }
    pub unsafe fn JLINKARM_SetWarnOutHandler(&self, pfWarnOut: JLINKARM_LOG) -> () {
        (self
            .JLINKARM_SetWarnOutHandler
            .as_ref()
            .expect("Expected function, got error."))(pfWarnOut)
    }
    pub unsafe fn JLINK_SetWarnOutHandler(&self, pfWarnOut: JLINK_LOG) -> () {
        (self
            .JLINK_SetWarnOutHandler
            .as_ref()
            .expect("Expected function, got error."))(pfWarnOut)
    }
    pub unsafe fn JLINKARM_SetWP(
        &self,
        Addr: ::std::os::raw::c_uint,
        AddrMask: ::std::os::raw::c_uint,
        Data: ::std::os::raw::c_uint,
        DataMask: ::std::os::raw::c_uint,
        Ctrl: ::std::os::raw::c_uchar,
        CtrlMask: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_SetWP
            .as_ref()
            .expect("Expected function, got error."))(
            Addr, AddrMask, Data, DataMask, Ctrl, CtrlMask,
        )
    }
    pub unsafe fn JLINK_SetWP(
        &self,
        Addr: ::std::os::raw::c_uint,
        AddrMask: ::std::os::raw::c_uint,
        Data: ::std::os::raw::c_uint,
        DataMask: ::std::os::raw::c_uint,
        Ctrl: ::std::os::raw::c_uchar,
        CtrlMask: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_SetWP
            .as_ref()
            .expect("Expected function, got error."))(
            Addr, AddrMask, Data, DataMask, Ctrl, CtrlMask,
        )
    }
    pub unsafe fn JLINKARM_SimulateInstruction(
        &self,
        Inst: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_char {
        (self
            .JLINKARM_SimulateInstruction
            .as_ref()
            .expect("Expected function, got error."))(Inst)
    }
    pub unsafe fn JLINK_SimulateInstruction(
        &self,
        Inst: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_char {
        (self
            .JLINK_SimulateInstruction
            .as_ref()
            .expect("Expected function, got error."))(Inst)
    }
    pub unsafe fn JLINKARM_Step(&self) -> ::std::os::raw::c_char {
        (self
            .JLINKARM_Step
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_Step(&self) -> ::std::os::raw::c_char {
        (self
            .JLINK_Step
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_StoreBits(
        &self,
        TMS: ::std::os::raw::c_uint,
        TDI: ::std::os::raw::c_uint,
        NumBits: ::std::os::raw::c_int,
    ) -> () {
        (self
            .JLINKARM_StoreBits
            .as_ref()
            .expect("Expected function, got error."))(TMS, TDI, NumBits)
    }
    pub unsafe fn JLINK_StoreBits(
        &self,
        TMS: ::std::os::raw::c_uint,
        TDI: ::std::os::raw::c_uint,
        NumBits: ::std::os::raw::c_int,
    ) -> () {
        (self
            .JLINK_StoreBits
            .as_ref()
            .expect("Expected function, got error."))(TMS, TDI, NumBits)
    }
    pub unsafe fn JLINKARM_Test(&self) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_Test
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_Test(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_Test
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_Unlock(&self) -> () {
        (self
            .JLINKARM_Unlock
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_Unlock(&self) -> () {
        (self
            .JLINK_Unlock
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_UpdateFirmware(&self) -> ::std::os::raw::c_ushort {
        (self
            .JLINKARM_UpdateFirmware
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_UpdateFirmware(&self) -> ::std::os::raw::c_ushort {
        (self
            .JLINK_UpdateFirmware
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_UpdateFirmwareIfNewer(&self) -> ::std::os::raw::c_uint {
        (self
            .JLINKARM_UpdateFirmwareIfNewer
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_UpdateFirmwareIfNewer(&self) -> ::std::os::raw::c_uint {
        (self
            .JLINK_UpdateFirmwareIfNewer
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_UpdateReplaceFirmware(
        &self,
        Replace: ::std::os::raw::c_int,
        sInfo: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_UpdateReplaceFirmware
            .as_ref()
            .expect("Expected function, got error."))(Replace, sInfo)
    }
    pub unsafe fn JLINK_UpdateReplaceFirmware(
        &self,
        Replace: ::std::os::raw::c_int,
        sInfo: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_UpdateReplaceFirmware
            .as_ref()
            .expect("Expected function, got error."))(Replace, sInfo)
    }
    pub unsafe fn JLINKARM_WaitDCCRead(
        &self,
        TimeOut: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_WaitDCCRead
            .as_ref()
            .expect("Expected function, got error."))(TimeOut)
    }
    pub unsafe fn JLINK_WaitDCCRead(
        &self,
        TimeOut: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WaitDCCRead
            .as_ref()
            .expect("Expected function, got error."))(TimeOut)
    }
    pub unsafe fn JLINKARM_WaitForHalt(
        &self,
        TimeOut: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_WaitForHalt
            .as_ref()
            .expect("Expected function, got error."))(TimeOut)
    }
    pub unsafe fn JLINK_WaitForHalt(
        &self,
        Timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WaitForHalt
            .as_ref()
            .expect("Expected function, got error."))(Timeout)
    }
    pub unsafe fn JLINKARM_WriteConfigReg(
        &self,
        RegIndex: ::std::os::raw::c_uint,
        Data: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_WriteConfigReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, Data)
    }
    pub unsafe fn JLINK_WriteConfigReg(
        &self,
        RegIndex: ::std::os::raw::c_uint,
        Data: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteConfigReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, Data)
    }
    pub unsafe fn JLINKARM_WriteControlReg(
        &self,
        RegIndex: ::std::os::raw::c_uint,
        Data: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_WriteControlReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, Data)
    }
    pub unsafe fn JLINK_WriteControlReg(
        &self,
        RegIndex: ::std::os::raw::c_uint,
        Data: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteControlReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, Data)
    }
    pub unsafe fn JLINKARM_WriteDCC(
        &self,
        pData: *const ::std::os::raw::c_uint,
        NumItems: ::std::os::raw::c_uint,
        TimeOut: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_WriteDCC
            .as_ref()
            .expect("Expected function, got error."))(pData, NumItems, TimeOut)
    }
    pub unsafe fn JLINK_WriteDCC(
        &self,
        pData: *const ::std::os::raw::c_uint,
        NumItems: ::std::os::raw::c_uint,
        TimeOut: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteDCC
            .as_ref()
            .expect("Expected function, got error."))(pData, NumItems, TimeOut)
    }
    pub unsafe fn JLINKARM_WriteDCCFast(
        &self,
        pData: *const ::std::os::raw::c_uint,
        NumItems: ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINKARM_WriteDCCFast
            .as_ref()
            .expect("Expected function, got error."))(pData, NumItems)
    }
    pub unsafe fn JLINK_WriteDCCFast(
        &self,
        pData: *const ::std::os::raw::c_uint,
        NumItems: ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINK_WriteDCCFast
            .as_ref()
            .expect("Expected function, got error."))(pData, NumItems)
    }
    pub unsafe fn JLINKARM_WriteDebugPort(
        &self,
        RegIndex: ::std::os::raw::c_uint,
        Data: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_WriteDebugPort
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, Data)
    }
    pub unsafe fn JLINK_WriteDebugPort(
        &self,
        RegIndex: ::std::os::raw::c_uint,
        Data: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteDebugPort
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, Data)
    }
    pub unsafe fn JLINKARM_WriteDebugReg(
        &self,
        RegIndex: ::std::os::raw::c_uint,
        Data: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_WriteDebugReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, Data)
    }
    pub unsafe fn JLINK_WriteDebugReg(
        &self,
        RegIndex: ::std::os::raw::c_uint,
        Data: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteDebugReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, Data)
    }
    pub unsafe fn JLINKARM_WriteEmu(
        &self,
        p: *const ::std::os::raw::c_void,
        NumBytes: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_WriteEmu
            .as_ref()
            .expect("Expected function, got error."))(p, NumBytes)
    }
    pub unsafe fn JLINK_WriteEmu(
        &self,
        p: *const ::std::os::raw::c_void,
        NumBytes: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteEmu
            .as_ref()
            .expect("Expected function, got error."))(p, NumBytes)
    }
    pub unsafe fn JLINKARM_WriteEmuConfigMem(
        &self,
        p: *const ::std::os::raw::c_uchar,
        Off: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_WriteEmuConfigMem
            .as_ref()
            .expect("Expected function, got error."))(p, Off, NumBytes)
    }
    pub unsafe fn JLINK_WriteEmuConfigMem(
        &self,
        p: *const ::std::os::raw::c_uchar,
        Off: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteEmuConfigMem
            .as_ref()
            .expect("Expected function, got error."))(p, Off, NumBytes)
    }
    pub unsafe fn JLINKARM_WriteICEReg(
        &self,
        RegIndex: ::std::os::raw::c_uint,
        Value: ::std::os::raw::c_uint,
        AllowDelay: ::std::os::raw::c_int,
    ) -> () {
        (self
            .JLINKARM_WriteICEReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, Value, AllowDelay)
    }
    pub unsafe fn JLINK_WriteICEReg(
        &self,
        RegIndex: ::std::os::raw::c_uint,
        Value: ::std::os::raw::c_uint,
        AllowDelay: ::std::os::raw::c_int,
    ) -> () {
        (self
            .JLINK_WriteICEReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, Value, AllowDelay)
    }
    pub unsafe fn JLINKARM_WriteMem(
        &self,
        Addr: ::std::os::raw::c_uint,
        Count: ::std::os::raw::c_uint,
        pData: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_WriteMem
            .as_ref()
            .expect("Expected function, got error."))(Addr, Count, pData)
    }
    pub unsafe fn JLINK_WriteMem(
        &self,
        Addr: ::std::os::raw::c_uint,
        Count: ::std::os::raw::c_uint,
        pData: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteMem
            .as_ref()
            .expect("Expected function, got error."))(Addr, Count, pData)
    }
    pub unsafe fn JLINKARM_WriteMemDelayed(
        &self,
        Addr: ::std::os::raw::c_uint,
        Count: ::std::os::raw::c_uint,
        pData: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_WriteMemDelayed
            .as_ref()
            .expect("Expected function, got error."))(Addr, Count, pData)
    }
    pub unsafe fn JLINK_WriteMemDelayed(
        &self,
        Addr: ::std::os::raw::c_uint,
        Count: ::std::os::raw::c_uint,
        pData: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteMemDelayed
            .as_ref()
            .expect("Expected function, got error."))(Addr, Count, pData)
    }
    pub unsafe fn JLINKARM_WriteMemEx(
        &self,
        Addr: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
        p: *const ::std::os::raw::c_void,
        Flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_WriteMemEx
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumBytes, p, Flags)
    }
    pub unsafe fn JLINK_WriteMemEx(
        &self,
        Addr: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
        p: *const ::std::os::raw::c_void,
        AccessWidth: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteMemEx
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumBytes, p, AccessWidth)
    }
    pub unsafe fn JLINKARM_WriteMemHW(
        &self,
        Addr: ::std::os::raw::c_uint,
        Count: ::std::os::raw::c_uint,
        p: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_WriteMemHW
            .as_ref()
            .expect("Expected function, got error."))(Addr, Count, p)
    }
    pub unsafe fn JLINK_WriteMemHW(
        &self,
        Addr: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
        p: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteMemHW
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumBytes, p)
    }
    pub unsafe fn JLINKARM_WriteMemMultiple(
        &self,
        paDesc: *mut JLINK_WRITE_MEM_DESC,
        NumWrites: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_WriteMemMultiple
            .as_ref()
            .expect("Expected function, got error."))(paDesc, NumWrites)
    }
    pub unsafe fn JLINKARM_WriteReg(
        &self,
        RegIndex: ARM_REG,
        Data: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_char {
        (self
            .JLINKARM_WriteReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, Data)
    }
    pub unsafe fn JLINK_WriteReg(
        &self,
        RegIndex: ARM_REG,
        Data: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_char {
        (self
            .JLINK_WriteReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, Data)
    }
    pub unsafe fn JLINKARM_WriteRegs(
        &self,
        paRegIndex: *const ::std::os::raw::c_uint,
        paData: *const ::std::os::raw::c_uint,
        paStatus: *mut ::std::os::raw::c_uchar,
        NumRegs: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_WriteRegs
            .as_ref()
            .expect("Expected function, got error."))(paRegIndex, paData, paStatus, NumRegs)
    }
    pub unsafe fn JLINK_WriteRegs(
        &self,
        paRegIndex: *const ::std::os::raw::c_uint,
        paData: *const ::std::os::raw::c_uint,
        paStatus: *mut ::std::os::raw::c_uchar,
        NumRegs: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteRegs
            .as_ref()
            .expect("Expected function, got error."))(paRegIndex, paData, paStatus, NumRegs)
    }
    pub unsafe fn JLINKARM_WriteU8(
        &self,
        Addr: ::std::os::raw::c_uint,
        Data: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_WriteU8
            .as_ref()
            .expect("Expected function, got error."))(Addr, Data)
    }
    pub unsafe fn JLINK_WriteU8(
        &self,
        Addr: ::std::os::raw::c_uint,
        Data: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteU8
            .as_ref()
            .expect("Expected function, got error."))(Addr, Data)
    }
    pub unsafe fn JLINKARM_WriteU16(
        &self,
        Addr: ::std::os::raw::c_uint,
        Data: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_WriteU16
            .as_ref()
            .expect("Expected function, got error."))(Addr, Data)
    }
    pub unsafe fn JLINK_WriteU16(
        &self,
        Addr: ::std::os::raw::c_uint,
        Data: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteU16
            .as_ref()
            .expect("Expected function, got error."))(Addr, Data)
    }
    pub unsafe fn JLINKARM_WriteU32(
        &self,
        Addr: ::std::os::raw::c_uint,
        Data: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_WriteU32
            .as_ref()
            .expect("Expected function, got error."))(Addr, Data)
    }
    pub unsafe fn JLINK_WriteU32(
        &self,
        Addr: ::std::os::raw::c_uint,
        Data: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteU32
            .as_ref()
            .expect("Expected function, got error."))(Addr, Data)
    }
    pub unsafe fn JLINKARM_WriteU64(
        &self,
        Addr: ::std::os::raw::c_uint,
        Data: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_WriteU64
            .as_ref()
            .expect("Expected function, got error."))(Addr, Data)
    }
    pub unsafe fn JLINK_WriteU64(
        &self,
        Addr: ::std::os::raw::c_uint,
        Data: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteU64
            .as_ref()
            .expect("Expected function, got error."))(Addr, Data)
    }
    pub unsafe fn JLINKARM_WriteVectorCatch(
        &self,
        Value: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_WriteVectorCatch
            .as_ref()
            .expect("Expected function, got error."))(Value)
    }
    pub unsafe fn JLINK_WriteVectorCatch(
        &self,
        Value: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteVectorCatch
            .as_ref()
            .expect("Expected function, got error."))(Value)
    }
    pub unsafe fn JLINKARM_WriteVerifyMem(
        &self,
        Addr: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
        p: *const ::std::os::raw::c_void,
        Flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_WriteVerifyMem
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumBytes, p, Flags)
    }
    pub unsafe fn JLINK_WriteVerifyMem(
        &self,
        Addr: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
        p: *const ::std::os::raw::c_void,
        AccessWidth: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteVerifyMem
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumBytes, p, AccessWidth)
    }
    pub unsafe fn JLINKARM_BMI_Get(
        &self,
        pBMIMode: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_BMI_Get
            .as_ref()
            .expect("Expected function, got error."))(pBMIMode)
    }
    pub unsafe fn JLINKARM_BMI_Set(
        &self,
        BMIMode: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_BMI_Set
            .as_ref()
            .expect("Expected function, got error."))(BMIMode)
    }
    pub unsafe fn JLINKARM_CDC_Read(
        &self,
        pData: *mut ::std::os::raw::c_uchar,
        NumBytes: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_CDC_Read
            .as_ref()
            .expect("Expected function, got error."))(pData, NumBytes)
    }
    pub unsafe fn JLINKARM_CDC_SetBaudrate(
        &self,
        BaudrateHz: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_CDC_SetBaudrate
            .as_ref()
            .expect("Expected function, got error."))(BaudrateHz)
    }
    pub unsafe fn JLINKARM_CDC_SetHookFuncs(
        &self,
        pData: *const ::std::os::raw::c_uchar,
        NumBytes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_CDC_SetHookFuncs
            .as_ref()
            .expect("Expected function, got error."))(pData, NumBytes)
    }
    pub unsafe fn JLINKARM_CDC_SetRTSState(
        &self,
        State: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_CDC_SetRTSState
            .as_ref()
            .expect("Expected function, got error."))(State)
    }
    pub unsafe fn JLINKARM_CDC_SetTimeoutLastCDCRead(
        &self,
        Timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_CDC_SetTimeoutLastCDCRead
            .as_ref()
            .expect("Expected function, got error."))(Timeout)
    }
    pub unsafe fn JLINKARM_CDC_Write(
        &self,
        pData: *const ::std::os::raw::c_uchar,
        NumBytes: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_CDC_Write
            .as_ref()
            .expect("Expected function, got error."))(pData, NumBytes)
    }
    pub unsafe fn JLINKARM_CORE_GetFound(&self) -> ::std::os::raw::c_uint {
        (self
            .JLINKARM_CORE_GetFound
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_CORE_GetFound(&self) -> ::std::os::raw::c_uint {
        (self
            .JLINK_CORE_GetFound
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_CORE_Select(&self, Core: ::std::os::raw::c_uint) -> () {
        (self
            .JLINKARM_CORE_Select
            .as_ref()
            .expect("Expected function, got error."))(Core)
    }
    pub unsafe fn JLINK_CORE_Select(&self, Core: ::std::os::raw::c_uint) -> () {
        (self
            .JLINK_CORE_Select
            .as_ref()
            .expect("Expected function, got error."))(Core)
    }
    pub unsafe fn JLINKARM_CORESIGHT_Configure(
        &self,
        sConfig: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_CORESIGHT_Configure
            .as_ref()
            .expect("Expected function, got error."))(sConfig)
    }
    pub unsafe fn JLINK_CORESIGHT_Configure(
        &self,
        sConfig: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_CORESIGHT_Configure
            .as_ref()
            .expect("Expected function, got error."))(sConfig)
    }
    pub unsafe fn JLINKARM_CORESIGHT_ReadAPDPReg(
        &self,
        RegIndex: ::std::os::raw::c_uchar,
        APnDP: ::std::os::raw::c_uchar,
        pData: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_CORESIGHT_ReadAPDPReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, APnDP, pData)
    }
    pub unsafe fn JLINK_CORESIGHT_ReadAPDPReg(
        &self,
        RegIndex: ::std::os::raw::c_uchar,
        APnDP: ::std::os::raw::c_uchar,
        pData: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_CORESIGHT_ReadAPDPReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, APnDP, pData)
    }
    pub unsafe fn JLINKARM_CORESIGHT_WriteAPDPReg(
        &self,
        RegIndex: ::std::os::raw::c_uchar,
        APnDP: ::std::os::raw::c_uchar,
        Data: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_CORESIGHT_WriteAPDPReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, APnDP, Data)
    }
    pub unsafe fn JLINK_CORESIGHT_WriteAPDPReg(
        &self,
        RegIndex: ::std::os::raw::c_uchar,
        APnDP: ::std::os::raw::c_uchar,
        Data: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_CORESIGHT_WriteAPDPReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, APnDP, Data)
    }
    pub unsafe fn JLINKARM_CP15_IsPresent(&self) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_CP15_IsPresent
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_CP15_IsPresent(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_CP15_IsPresent
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_CP15_ReadEx(
        &self,
        CRn: ::std::os::raw::c_uchar,
        CRm: ::std::os::raw::c_uchar,
        op1: ::std::os::raw::c_uchar,
        op2: ::std::os::raw::c_uchar,
        pData: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_CP15_ReadEx
            .as_ref()
            .expect("Expected function, got error."))(CRn, CRm, op1, op2, pData)
    }
    pub unsafe fn JLINK_CP15_ReadEx(
        &self,
        CRn: ::std::os::raw::c_uchar,
        CRm: ::std::os::raw::c_uchar,
        op1: ::std::os::raw::c_uchar,
        op2: ::std::os::raw::c_uchar,
        pData: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_CP15_ReadEx
            .as_ref()
            .expect("Expected function, got error."))(CRn, CRm, op1, op2, pData)
    }
    pub unsafe fn JLINKARM_CP15_ReadReg(
        &self,
        RegIndex: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_CP15_ReadReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, pData)
    }
    pub unsafe fn JLINK_CP15_ReadReg(
        &self,
        RegIndex: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_CP15_ReadReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, pData)
    }
    pub unsafe fn JLINKARM_CP15_WriteEx(
        &self,
        CRn: ::std::os::raw::c_uchar,
        CRm: ::std::os::raw::c_uchar,
        op1: ::std::os::raw::c_uchar,
        op2: ::std::os::raw::c_uchar,
        Data: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_CP15_WriteEx
            .as_ref()
            .expect("Expected function, got error."))(CRn, CRm, op1, op2, Data)
    }
    pub unsafe fn JLINK_CP15_WriteEx(
        &self,
        CRn: ::std::os::raw::c_uchar,
        CRm: ::std::os::raw::c_uchar,
        op1: ::std::os::raw::c_uchar,
        op2: ::std::os::raw::c_uchar,
        Data: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_CP15_WriteEx
            .as_ref()
            .expect("Expected function, got error."))(CRn, CRm, op1, op2, Data)
    }
    pub unsafe fn JLINKARM_CP15_WriteReg(
        &self,
        RegIndex: ::std::os::raw::c_uint,
        Data: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_CP15_WriteReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, Data)
    }
    pub unsafe fn JLINK_CP15_WriteReg(
        &self,
        RegIndex: ::std::os::raw::c_uint,
        Data: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_CP15_WriteReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, Data)
    }
    pub unsafe fn JLINKARM_DEVICE_GetIndex(
        &self,
        sDeviceName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_DEVICE_GetIndex
            .as_ref()
            .expect("Expected function, got error."))(sDeviceName)
    }
    pub unsafe fn JLINK_DEVICE_GetIndex(
        &self,
        sDeviceName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_DEVICE_GetIndex
            .as_ref()
            .expect("Expected function, got error."))(sDeviceName)
    }
    pub unsafe fn JLINKARM_DEVICE_GetInfo(
        &self,
        DeviceIndex: ::std::os::raw::c_int,
        pDeviceInfo: *mut JLINKARM_DEVICE_INFO,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_DEVICE_GetInfo
            .as_ref()
            .expect("Expected function, got error."))(DeviceIndex, pDeviceInfo)
    }
    pub unsafe fn JLINK_DEVICE_GetInfo(
        &self,
        DeviceIndex: ::std::os::raw::c_int,
        pDeviceInfo: *mut JLINKARM_DEVICE_INFO,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_DEVICE_GetInfo
            .as_ref()
            .expect("Expected function, got error."))(DeviceIndex, pDeviceInfo)
    }
    pub unsafe fn JLINKARM_DEVICE_SelectDialog(
        &self,
        hParent: *mut ::std::os::raw::c_void,
        Flags: ::std::os::raw::c_uint,
        pInfo: *mut JLINKARM_DEVICE_SELECT_INFO,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_DEVICE_SelectDialog
            .as_ref()
            .expect("Expected function, got error."))(hParent, Flags, pInfo)
    }
    pub unsafe fn JLINK_DEVICE_SelectDialog(
        &self,
        hParent: *mut ::std::os::raw::c_void,
        Flags: ::std::os::raw::c_uint,
        pInfo: *mut JLINKARM_DEVICE_SELECT_INFO,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_DEVICE_SelectDialog
            .as_ref()
            .expect("Expected function, got error."))(hParent, Flags, pInfo)
    }
    pub unsafe fn JLINKARM_EMU_GetCounters(
        &self,
        BitMask: ::std::os::raw::c_uint,
        pCounters: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_EMU_GetCounters
            .as_ref()
            .expect("Expected function, got error."))(BitMask, pCounters)
    }
    pub unsafe fn JLINK_EMU_GetCounters(
        &self,
        BitMask: ::std::os::raw::c_uint,
        pCounters: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_EMU_GetCounters
            .as_ref()
            .expect("Expected function, got error."))(BitMask, pCounters)
    }
    pub unsafe fn JLINKARM_EMU_GetDeviceInfo(
        &self,
        iEmu: ::std::os::raw::c_uint,
        pInfo: *mut JLINKARM_EMU_INFO,
    ) -> () {
        (self
            .JLINKARM_EMU_GetDeviceInfo
            .as_ref()
            .expect("Expected function, got error."))(iEmu, pInfo)
    }
    pub unsafe fn JLINK_EMU_GetDeviceInfo(
        &self,
        iEmu: ::std::os::raw::c_uint,
        pInfo: *mut JLINKARM_EMU_INFO,
    ) -> () {
        (self
            .JLINK_EMU_GetDeviceInfo
            .as_ref()
            .expect("Expected function, got error."))(iEmu, pInfo)
    }
    pub unsafe fn JLINKARM_EMU_GetList(
        &self,
        HostIFs: ::std::os::raw::c_int,
        paConnectInfo: *mut JLINKARM_EMU_CONNECT_INFO,
        MaxInfos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_EMU_GetList
            .as_ref()
            .expect("Expected function, got error."))(HostIFs, paConnectInfo, MaxInfos)
    }
    pub unsafe fn JLINK_EMU_GetList(
        &self,
        HostIFs: ::std::os::raw::c_int,
        paConnectInfo: *mut JLINKARM_EMU_CONNECT_INFO,
        MaxInfos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_EMU_GetList
            .as_ref()
            .expect("Expected function, got error."))(HostIFs, paConnectInfo, MaxInfos)
    }
    pub unsafe fn JLINKARM_EMU_GetMaxMemBlock(&self) -> ::std::os::raw::c_uint {
        (self
            .JLINKARM_EMU_GetMaxMemBlock
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_EMU_GetMaxMemBlock(&self) -> ::std::os::raw::c_uint {
        (self
            .JLINK_EMU_GetMaxMemBlock
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_EMU_GetNumConnections(&self) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_EMU_GetNumConnections
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_EMU_GetNumConnections(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_EMU_GetNumConnections
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_EMU_GetNumDevices(&self) -> ::std::os::raw::c_uint {
        (self
            .JLINKARM_EMU_GetNumDevices
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_EMU_GetNumDevices(&self) -> ::std::os::raw::c_uint {
        (self
            .JLINK_EMU_GetNumDevices
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_EMU_GetProductId(&self) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_EMU_GetProductId
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_EMU_GetProductId(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_EMU_GetProductId
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_EMU_GetProductName(
        &self,
        pBuffer: *mut ::std::os::raw::c_char,
        BufferSize: ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINKARM_EMU_GetProductName
            .as_ref()
            .expect("Expected function, got error."))(pBuffer, BufferSize)
    }
    pub unsafe fn JLINK_EMU_GetProductName(
        &self,
        pBuffer: *mut ::std::os::raw::c_char,
        BufferSize: ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINK_EMU_GetProductName
            .as_ref()
            .expect("Expected function, got error."))(pBuffer, BufferSize)
    }
    pub unsafe fn JLINKARM_EMU_HasCapEx(
        &self,
        CapEx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_EMU_HasCapEx
            .as_ref()
            .expect("Expected function, got error."))(CapEx)
    }
    pub unsafe fn JLINK_EMU_HasCapEx(&self, CapEx: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .JLINK_EMU_HasCapEx
            .as_ref()
            .expect("Expected function, got error."))(CapEx)
    }
    pub unsafe fn JLINKARM_EMU_HasCPUCap(
        &self,
        CPUCap: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_EMU_HasCPUCap
            .as_ref()
            .expect("Expected function, got error."))(CPUCap)
    }
    pub unsafe fn JLINK_EMU_HasCPUCap(
        &self,
        CPUCap: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_EMU_HasCPUCap
            .as_ref()
            .expect("Expected function, got error."))(CPUCap)
    }
    pub unsafe fn JLINKARM_EMU_IsConnected(&self) -> ::std::os::raw::c_char {
        (self
            .JLINKARM_EMU_IsConnected
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_EMU_IsConnected(&self) -> ::std::os::raw::c_char {
        (self
            .JLINK_EMU_IsConnected
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_EMU_SelectByIndex(
        &self,
        iEmu: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint {
        (self
            .JLINKARM_EMU_SelectByIndex
            .as_ref()
            .expect("Expected function, got error."))(iEmu)
    }
    pub unsafe fn JLINK_EMU_SelectByIndex(
        &self,
        iEmu: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint {
        (self
            .JLINK_EMU_SelectByIndex
            .as_ref()
            .expect("Expected function, got error."))(iEmu)
    }
    pub unsafe fn JLINKARM_EMU_SelectByUSBSN(
        &self,
        SerialNo: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_EMU_SelectByUSBSN
            .as_ref()
            .expect("Expected function, got error."))(SerialNo)
    }
    pub unsafe fn JLINK_EMU_SelectByUSBSN(
        &self,
        SerialNo: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_EMU_SelectByUSBSN
            .as_ref()
            .expect("Expected function, got error."))(SerialNo)
    }
    pub unsafe fn JLINKARM_EMU_SelectIP(
        &self,
        pIPAddr: *mut ::std::os::raw::c_char,
        BufferSize: ::std::os::raw::c_int,
        pPort: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_EMU_SelectIP
            .as_ref()
            .expect("Expected function, got error."))(pIPAddr, BufferSize, pPort)
    }
    pub unsafe fn JLINK_EMU_SelectIP(
        &self,
        pIPAddr: *mut ::std::os::raw::c_char,
        BufferSize: ::std::os::raw::c_int,
        pPort: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_EMU_SelectIP
            .as_ref()
            .expect("Expected function, got error."))(pIPAddr, BufferSize, pPort)
    }
    pub unsafe fn JLINKARM_EMU_SelectIPBySN(&self, SerialNo: ::std::os::raw::c_uint) -> () {
        (self
            .JLINKARM_EMU_SelectIPBySN
            .as_ref()
            .expect("Expected function, got error."))(SerialNo)
    }
    pub unsafe fn JLINK_EMU_SelectIPBySN(&self, SerialNo: ::std::os::raw::c_uint) -> () {
        (self
            .JLINK_EMU_SelectIPBySN
            .as_ref()
            .expect("Expected function, got error."))(SerialNo)
    }
    pub unsafe fn JLINKARM_EMU_TestNRSpeed(
        &self,
        NumReps: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_EMU_TestNRSpeed
            .as_ref()
            .expect("Expected function, got error."))(NumReps, NumBytes)
    }
    pub unsafe fn JLINK_EMU_TestNRSpeed(
        &self,
        NumReps: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_EMU_TestNRSpeed
            .as_ref()
            .expect("Expected function, got error."))(NumReps, NumBytes)
    }
    pub unsafe fn JLINKARM_EMU_TestNWSpeed(
        &self,
        NumReps: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_EMU_TestNWSpeed
            .as_ref()
            .expect("Expected function, got error."))(NumReps, NumBytes)
    }
    pub unsafe fn JLINK_EMU_TestNWSpeed(
        &self,
        NumReps: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_EMU_TestNWSpeed
            .as_ref()
            .expect("Expected function, got error."))(NumReps, NumBytes)
    }
    pub unsafe fn JLINKARM_EMU_COM_IsSupported(&self) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_EMU_COM_IsSupported
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_EMU_COM_IsSupported(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_EMU_COM_IsSupported
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_EMU_COM_Read(
        &self,
        Channel: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_EMU_COM_Read
            .as_ref()
            .expect("Expected function, got error."))(Channel, NumBytes, pData)
    }
    pub unsafe fn JLINK_EMU_COM_Read(
        &self,
        Channel: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_EMU_COM_Read
            .as_ref()
            .expect("Expected function, got error."))(Channel, NumBytes, pData)
    }
    pub unsafe fn JLINKARM_EMU_COM_Write(
        &self,
        Channel: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
        pData: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_EMU_COM_Write
            .as_ref()
            .expect("Expected function, got error."))(Channel, NumBytes, pData)
    }
    pub unsafe fn JLINK_EMU_COM_Write(
        &self,
        Channel: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
        pData: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_EMU_COM_Write
            .as_ref()
            .expect("Expected function, got error."))(Channel, NumBytes, pData)
    }
    pub unsafe fn JLINKARM_EMU_FILE_Delete(
        &self,
        sFile: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_EMU_FILE_Delete
            .as_ref()
            .expect("Expected function, got error."))(sFile)
    }
    pub unsafe fn JLINK_EMU_FILE_Delete(
        &self,
        sFile: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_EMU_FILE_Delete
            .as_ref()
            .expect("Expected function, got error."))(sFile)
    }
    pub unsafe fn JLINKARM_EMU_FILE_GetList(
        &self,
        sFile: *const ::std::os::raw::c_char,
        pBuffer: *mut ::std::os::raw::c_char,
        BufferSize: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_EMU_FILE_GetList
            .as_ref()
            .expect("Expected function, got error."))(sFile, pBuffer, BufferSize)
    }
    pub unsafe fn JLINK_EMU_FILE_GetList(
        &self,
        sFile: *const ::std::os::raw::c_char,
        pBuffer: *mut ::std::os::raw::c_char,
        BufferSize: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_EMU_FILE_GetList
            .as_ref()
            .expect("Expected function, got error."))(sFile, pBuffer, BufferSize)
    }
    pub unsafe fn JLINKARM_EMU_FILE_GetSize(
        &self,
        sFile: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_EMU_FILE_GetSize
            .as_ref()
            .expect("Expected function, got error."))(sFile)
    }
    pub unsafe fn JLINK_EMU_FILE_GetSize(
        &self,
        sFile: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_EMU_FILE_GetSize
            .as_ref()
            .expect("Expected function, got error."))(sFile)
    }
    pub unsafe fn JLINKARM_EMU_FILE_Read(
        &self,
        sFile: *const ::std::os::raw::c_char,
        pData: *mut ::std::os::raw::c_uchar,
        Offset: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_EMU_FILE_Read
            .as_ref()
            .expect("Expected function, got error."))(sFile, pData, Offset, NumBytes)
    }
    pub unsafe fn JLINK_EMU_FILE_Read(
        &self,
        sFile: *const ::std::os::raw::c_char,
        pData: *mut ::std::os::raw::c_uchar,
        Offset: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_EMU_FILE_Read
            .as_ref()
            .expect("Expected function, got error."))(sFile, pData, Offset, NumBytes)
    }
    pub unsafe fn JLINKARM_EMU_FILE_Write(
        &self,
        sFile: *const ::std::os::raw::c_char,
        pData: *const ::std::os::raw::c_uchar,
        Offset: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_EMU_FILE_Write
            .as_ref()
            .expect("Expected function, got error."))(sFile, pData, Offset, NumBytes)
    }
    pub unsafe fn JLINK_EMU_FILE_Write(
        &self,
        sFile: *const ::std::os::raw::c_char,
        pData: *const ::std::os::raw::c_uchar,
        Offset: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_EMU_FILE_Write
            .as_ref()
            .expect("Expected function, got error."))(sFile, pData, Offset, NumBytes)
    }
    pub unsafe fn JLINKARM_ETB_IsPresent(&self) -> ::std::os::raw::c_char {
        (self
            .JLINKARM_ETB_IsPresent
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_ETB_IsPresent(&self) -> ::std::os::raw::c_char {
        (self
            .JLINK_ETB_IsPresent
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_ETB_ReadReg(
        &self,
        RegIndex: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint {
        (self
            .JLINKARM_ETB_ReadReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex)
    }
    pub unsafe fn JLINK_ETB_ReadReg(
        &self,
        RegIndex: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint {
        (self
            .JLINK_ETB_ReadReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex)
    }
    pub unsafe fn JLINKARM_ETB_WriteReg(
        &self,
        RegIndex: ::std::os::raw::c_uint,
        Data: ::std::os::raw::c_uint,
        AllowDelay: ::std::os::raw::c_int,
    ) -> () {
        (self
            .JLINKARM_ETB_WriteReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, Data, AllowDelay)
    }
    pub unsafe fn JLINK_ETB_WriteReg(
        &self,
        RegIndex: ::std::os::raw::c_uint,
        Data: ::std::os::raw::c_uint,
        AllowDelay: ::std::os::raw::c_int,
    ) -> () {
        (self
            .JLINK_ETB_WriteReg
            .as_ref()
            .expect("Expected function, got error."))(RegIndex, Data, AllowDelay)
    }
    pub unsafe fn JLINKARM_ETM_IsPresent(&self) -> ::std::os::raw::c_char {
        (self
            .JLINKARM_ETM_IsPresent
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_ETM_IsPresent(&self) -> ::std::os::raw::c_char {
        (self
            .JLINK_ETM_IsPresent
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_ETM_ReadReg(
        &self,
        Reg: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint {
        (self
            .JLINKARM_ETM_ReadReg
            .as_ref()
            .expect("Expected function, got error."))(Reg)
    }
    pub unsafe fn JLINK_ETM_ReadReg(&self, Reg: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint {
        (self
            .JLINK_ETM_ReadReg
            .as_ref()
            .expect("Expected function, got error."))(Reg)
    }
    pub unsafe fn JLINKARM_ETM_StartTrace(&self) -> () {
        (self
            .JLINKARM_ETM_StartTrace
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_ETM_StartTrace(&self) -> () {
        (self
            .JLINK_ETM_StartTrace
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_ETM_WriteReg(
        &self,
        Reg: ::std::os::raw::c_uint,
        Data: ::std::os::raw::c_uint,
        AllowDelay: ::std::os::raw::c_int,
    ) -> () {
        (self
            .JLINKARM_ETM_WriteReg
            .as_ref()
            .expect("Expected function, got error."))(Reg, Data, AllowDelay)
    }
    pub unsafe fn JLINK_ETM_WriteReg(
        &self,
        Reg: ::std::os::raw::c_uint,
        Data: ::std::os::raw::c_uint,
        AllowDelay: ::std::os::raw::c_int,
    ) -> () {
        (self
            .JLINK_ETM_WriteReg
            .as_ref()
            .expect("Expected function, got error."))(Reg, Data, AllowDelay)
    }
    pub unsafe fn JLINKARM_INDICATORS_SetState(
        &self,
        NumStates: ::std::os::raw::c_int,
        pState: *mut JLINKARM_INDICATOR_CTRL,
    ) -> () {
        (self
            .JLINKARM_INDICATORS_SetState
            .as_ref()
            .expect("Expected function, got error."))(NumStates, pState)
    }
    pub unsafe fn JLINK_INDICATORS_SetState(
        &self,
        NumStates: ::std::os::raw::c_int,
        pState: *mut JLINKARM_INDICATOR_CTRL,
    ) -> () {
        (self
            .JLINK_INDICATORS_SetState
            .as_ref()
            .expect("Expected function, got error."))(NumStates, pState)
    }
    pub unsafe fn JLINKARM_JTAG_ConfigDevices(
        &self,
        NumDevices: ::std::os::raw::c_uint,
        paConf: *const JLINKARM_JTAG_DEVICE_CONF,
    ) -> () {
        (self
            .JLINKARM_JTAG_ConfigDevices
            .as_ref()
            .expect("Expected function, got error."))(NumDevices, paConf)
    }
    pub unsafe fn JLINK_JTAG_ConfigDevices(
        &self,
        NumDevices: ::std::os::raw::c_uint,
        paConf: *const JLINKARM_JTAG_DEVICE_CONF,
    ) -> () {
        (self
            .JLINK_JTAG_ConfigDevices
            .as_ref()
            .expect("Expected function, got error."))(NumDevices, paConf)
    }
    pub unsafe fn JLINKARM_JTAG_DisableIF(&self) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_JTAG_DisableIF
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_JTAG_DisableIF(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_JTAG_DisableIF
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_JTAG_EnableIF(&self) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_JTAG_EnableIF
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_JTAG_EnableIF(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_JTAG_EnableIF
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_JTAG_GetData(
        &self,
        pTDO: *mut ::std::os::raw::c_uchar,
        BitPos: ::std::os::raw::c_int,
        NumBits: ::std::os::raw::c_int,
    ) -> () {
        (self
            .JLINKARM_JTAG_GetData
            .as_ref()
            .expect("Expected function, got error."))(pTDO, BitPos, NumBits)
    }
    pub unsafe fn JLINK_JTAG_GetData(
        &self,
        pTDO: *mut ::std::os::raw::c_uchar,
        BitPos: ::std::os::raw::c_int,
        NumBits: ::std::os::raw::c_int,
    ) -> () {
        (self
            .JLINK_JTAG_GetData
            .as_ref()
            .expect("Expected function, got error."))(pTDO, BitPos, NumBits)
    }
    pub unsafe fn JLINKARM_JTAG_GetDeviceId(
        &self,
        DeviceIndex: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint {
        (self
            .JLINKARM_JTAG_GetDeviceId
            .as_ref()
            .expect("Expected function, got error."))(DeviceIndex)
    }
    pub unsafe fn JLINK_JTAG_GetDeviceId(
        &self,
        DeviceIndex: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint {
        (self
            .JLINK_JTAG_GetDeviceId
            .as_ref()
            .expect("Expected function, got error."))(DeviceIndex)
    }
    pub unsafe fn JLINKARM_JTAG_GetDeviceInfo(
        &self,
        DeviceIndex: ::std::os::raw::c_uint,
        pDeviceInfo: *mut JLINKARM_JTAG_DEVICE_INFO,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_JTAG_GetDeviceInfo
            .as_ref()
            .expect("Expected function, got error."))(DeviceIndex, pDeviceInfo)
    }
    pub unsafe fn JLINK_JTAG_GetDeviceInfo(
        &self,
        DeviceIndex: ::std::os::raw::c_uint,
        pDeviceInfo: *mut JLINKARM_JTAG_DEVICE_INFO,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_JTAG_GetDeviceInfo
            .as_ref()
            .expect("Expected function, got error."))(DeviceIndex, pDeviceInfo)
    }
    pub unsafe fn JLINKARM_JTAG_GetU8(
        &self,
        BitPos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint {
        (self
            .JLINKARM_JTAG_GetU8
            .as_ref()
            .expect("Expected function, got error."))(BitPos)
    }
    pub unsafe fn JLINK_JTAG_GetU8(&self, BitPos: ::std::os::raw::c_int) -> ::std::os::raw::c_uint {
        (self
            .JLINK_JTAG_GetU8
            .as_ref()
            .expect("Expected function, got error."))(BitPos)
    }
    pub unsafe fn JLINKARM_JTAG_GetU16(
        &self,
        BitPos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint {
        (self
            .JLINKARM_JTAG_GetU16
            .as_ref()
            .expect("Expected function, got error."))(BitPos)
    }
    pub unsafe fn JLINK_JTAG_GetU16(
        &self,
        BitPos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint {
        (self
            .JLINK_JTAG_GetU16
            .as_ref()
            .expect("Expected function, got error."))(BitPos)
    }
    pub unsafe fn JLINKARM_JTAG_GetU32(
        &self,
        BitPos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint {
        (self
            .JLINKARM_JTAG_GetU32
            .as_ref()
            .expect("Expected function, got error."))(BitPos)
    }
    pub unsafe fn JLINK_JTAG_GetU32(
        &self,
        BitPos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint {
        (self
            .JLINK_JTAG_GetU32
            .as_ref()
            .expect("Expected function, got error."))(BitPos)
    }
    pub unsafe fn JLINKARM_JTAG_StoreData(
        &self,
        pTDI: *const ::std::os::raw::c_uchar,
        NumBits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_JTAG_StoreData
            .as_ref()
            .expect("Expected function, got error."))(pTDI, NumBits)
    }
    pub unsafe fn JLINK_JTAG_StoreData(
        &self,
        pTDI: *const ::std::os::raw::c_uchar,
        NumBits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_JTAG_StoreData
            .as_ref()
            .expect("Expected function, got error."))(pTDI, NumBits)
    }
    pub unsafe fn JLINKARM_JTAG_StoreGetData(
        &self,
        pTDI: *const ::std::os::raw::c_uchar,
        pTDO: *mut ::std::os::raw::c_uchar,
        NumBits: ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINKARM_JTAG_StoreGetData
            .as_ref()
            .expect("Expected function, got error."))(pTDI, pTDO, NumBits)
    }
    pub unsafe fn JLINK_JTAG_StoreGetData(
        &self,
        pTDI: *const ::std::os::raw::c_uchar,
        pTDO: *mut ::std::os::raw::c_uchar,
        NumBits: ::std::os::raw::c_int,
    ) -> () {
        (self
            .JLINK_JTAG_StoreGetData
            .as_ref()
            .expect("Expected function, got error."))(pTDI, pTDO, NumBits)
    }
    pub unsafe fn JLINKARM_JTAG_StoreGetRaw(
        &self,
        pTDI: *const ::std::os::raw::c_uchar,
        pTDO: *mut ::std::os::raw::c_uchar,
        pTMS: *const ::std::os::raw::c_uchar,
        NumBits: ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINKARM_JTAG_StoreGetRaw
            .as_ref()
            .expect("Expected function, got error."))(pTDI, pTDO, pTMS, NumBits)
    }
    pub unsafe fn JLINK_JTAG_StoreGetRaw(
        &self,
        pTDI: *const ::std::os::raw::c_uchar,
        pTDO: *mut ::std::os::raw::c_uchar,
        pTMS: *const ::std::os::raw::c_uchar,
        NumBits: ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINK_JTAG_StoreGetRaw
            .as_ref()
            .expect("Expected function, got error."))(pTDI, pTDO, pTMS, NumBits)
    }
    pub unsafe fn JLINKARM_JTAG_StoreInst(
        &self,
        pTDI: *const ::std::os::raw::c_uchar,
        NumBits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_JTAG_StoreInst
            .as_ref()
            .expect("Expected function, got error."))(pTDI, NumBits)
    }
    pub unsafe fn JLINK_JTAG_StoreInst(
        &self,
        pTDI: *const ::std::os::raw::c_uchar,
        NumBits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_JTAG_StoreInst
            .as_ref()
            .expect("Expected function, got error."))(pTDI, NumBits)
    }
    pub unsafe fn JLINKARM_JTAG_StoreRaw(
        &self,
        pTDI: *const ::std::os::raw::c_uchar,
        pTMS: *const ::std::os::raw::c_uchar,
        NumBits: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_JTAG_StoreRaw
            .as_ref()
            .expect("Expected function, got error."))(pTDI, pTMS, NumBits)
    }
    pub unsafe fn JLINK_JTAG_StoreRaw(
        &self,
        pTDI: *const ::std::os::raw::c_uchar,
        pTMS: *const ::std::os::raw::c_uchar,
        NumBits: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_JTAG_StoreRaw
            .as_ref()
            .expect("Expected function, got error."))(pTDI, pTMS, NumBits)
    }
    pub unsafe fn JLINKARM_JTAG_SyncBits(&self) -> () {
        (self
            .JLINKARM_JTAG_SyncBits
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_JTAG_SyncBits(&self) -> () {
        (self
            .JLINK_JTAG_SyncBits
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_JTAG_SyncBytes(&self) -> () {
        (self
            .JLINKARM_JTAG_SyncBytes
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_JTAG_SyncBytes(&self) -> () {
        (self
            .JLINK_JTAG_SyncBytes
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_JTAG_WriteData(
        &self,
        pTDI: *const ::std::os::raw::c_uchar,
        pTDO: *mut ::std::os::raw::c_uchar,
        NumBits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_JTAG_WriteData
            .as_ref()
            .expect("Expected function, got error."))(pTDI, pTDO, NumBits)
    }
    pub unsafe fn JLINK_JTAG_WriteData(
        &self,
        pTDI: *const ::std::os::raw::c_uchar,
        pTDO: *mut ::std::os::raw::c_uchar,
        NumBits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_JTAG_WriteData
            .as_ref()
            .expect("Expected function, got error."))(pTDI, pTDO, NumBits)
    }
    pub unsafe fn JLINKARM_NET_Close(&self) -> () {
        (self
            .JLINKARM_NET_Close
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_NET_Close(&self) -> () {
        (self
            .JLINK_NET_Close
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_NET_Open(&self) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_NET_Open
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_NET_Open(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_NET_Open
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_PCODE_Assemble(
        &self,
        ppDest: *mut *mut ::std::os::raw::c_uchar,
        pDestSize: *mut ::std::os::raw::c_uint,
        pSrc: *const ::std::os::raw::c_uchar,
        pfOnError: JLINKARM_LOG,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_PCODE_Assemble
            .as_ref()
            .expect("Expected function, got error."))(ppDest, pDestSize, pSrc, pfOnError)
    }
    pub unsafe fn JLINKARM_PCODE_Exec(
        &self,
        pPCode: *mut ::std::os::raw::c_uchar,
        NumBytes: ::std::os::raw::c_uint,
        pPCodeStat: *mut JLINKARM_EMU_PCODE_STATUS_INFO,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_PCODE_Exec
            .as_ref()
            .expect("Expected function, got error."))(pPCode, NumBytes, pPCodeStat)
    }
    pub unsafe fn JLINK_PCODE_Exec(
        &self,
        pPCode: *mut ::std::os::raw::c_uchar,
        NumBytes: ::std::os::raw::c_uint,
        pPCodeStat: *mut JLINKARM_EMU_PCODE_STATUS_INFO,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_PCODE_Exec
            .as_ref()
            .expect("Expected function, got error."))(pPCode, NumBytes, pPCodeStat)
    }
    pub unsafe fn JLINKARM_PCODE_GetCaps(
        &self,
        pCaps: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_PCODE_GetCaps
            .as_ref()
            .expect("Expected function, got error."))(pCaps)
    }
    pub unsafe fn JLINK_PCODE_GetCaps(
        &self,
        pCaps: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_PCODE_GetCaps
            .as_ref()
            .expect("Expected function, got error."))(pCaps)
    }
    pub unsafe fn JLINKARM_PCODE_GetS32Version(
        &self,
        pVersion: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_PCODE_GetS32Version
            .as_ref()
            .expect("Expected function, got error."))(pVersion)
    }
    pub unsafe fn JLINK_PCODE_GetS32Version(
        &self,
        pVersion: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_PCODE_GetS32Version
            .as_ref()
            .expect("Expected function, got error."))(pVersion)
    }
    pub unsafe fn JLINKARM_PCODE_GetDebugAPI(
        &self,
        pAPI: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_PCODE_GetDebugAPI
            .as_ref()
            .expect("Expected function, got error."))(pAPI)
    }
    pub unsafe fn JLINKARM_RAWTRACE_Control(
        &self,
        Cmd: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_RAWTRACE_Control
            .as_ref()
            .expect("Expected function, got error."))(Cmd, pData)
    }
    pub unsafe fn JLINK_RAWTRACE_Control(
        &self,
        Cmd: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_RAWTRACE_Control
            .as_ref()
            .expect("Expected function, got error."))(Cmd, pData)
    }
    pub unsafe fn JLINKARM_RAWTRACE_Read(
        &self,
        pData: *mut ::std::os::raw::c_uchar,
        NumBytes: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_RAWTRACE_Read
            .as_ref()
            .expect("Expected function, got error."))(pData, NumBytes)
    }
    pub unsafe fn JLINK_RAWTRACE_Read(
        &self,
        pData: *mut ::std::os::raw::c_uchar,
        NumBytes: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_RAWTRACE_Read
            .as_ref()
            .expect("Expected function, got error."))(pData, NumBytes)
    }
    pub unsafe fn JLINKARM_SWD_DisableSWCLK(&self) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_SWD_DisableSWCLK
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_SWD_DisableSWCLK(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_SWD_DisableSWCLK
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_SWD_EnableSWCLK(&self) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_SWD_EnableSWCLK
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_SWD_EnableSWCLK(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_SWD_EnableSWCLK
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_SWD_SetDirIn(&self) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_SWD_SetDirIn
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_SWD_SetDirIn(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_SWD_SetDirIn
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_SWD_SetDirOut(&self) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_SWD_SetDirOut
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_SWD_SetDirOut(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_SWD_SetDirOut
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_SWO_Control(
        &self,
        Cmd: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_SWO_Control
            .as_ref()
            .expect("Expected function, got error."))(Cmd, pData)
    }
    pub unsafe fn JLINK_SWO_Control(
        &self,
        Cmd: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_SWO_Control
            .as_ref()
            .expect("Expected function, got error."))(Cmd, pData)
    }
    pub unsafe fn JLINKARM_SWO_DisableTarget(
        &self,
        PortMask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_SWO_DisableTarget
            .as_ref()
            .expect("Expected function, got error."))(PortMask)
    }
    pub unsafe fn JLINKARM_SWO_EnableTarget(
        &self,
        CPUSpeed: ::std::os::raw::c_uint,
        SWOSpeed: ::std::os::raw::c_uint,
        Mode: ::std::os::raw::c_int,
        PortMask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_SWO_EnableTarget
            .as_ref()
            .expect("Expected function, got error."))(CPUSpeed, SWOSpeed, Mode, PortMask)
    }
    pub unsafe fn JLINKARM_SWO_GetCompatibleSpeeds(
        &self,
        CPUSpeed: ::std::os::raw::c_uint,
        MaxSWOSpeed: ::std::os::raw::c_uint,
        paSWOSpeed: *mut ::std::os::raw::c_uint,
        NumEntries: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_SWO_GetCompatibleSpeeds
            .as_ref()
            .expect("Expected function, got error."))(
            CPUSpeed, MaxSWOSpeed, paSWOSpeed, NumEntries
        )
    }
    pub unsafe fn JLINKARM_SWO_Read(
        &self,
        pData: *mut ::std::os::raw::c_uchar,
        Offset: ::std::os::raw::c_uint,
        pNumBytes: *mut ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINKARM_SWO_Read
            .as_ref()
            .expect("Expected function, got error."))(pData, Offset, pNumBytes)
    }
    pub unsafe fn JLINK_SWO_Read(
        &self,
        pData: *mut ::std::os::raw::c_uchar,
        Offset: ::std::os::raw::c_uint,
        pNumBytes: *mut ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINK_SWO_Read
            .as_ref()
            .expect("Expected function, got error."))(pData, Offset, pNumBytes)
    }
    pub unsafe fn JLINKARM_SWO_ReadStimulus(
        &self,
        Port: ::std::os::raw::c_int,
        pData: *mut ::std::os::raw::c_uchar,
        NumBytes: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_SWO_ReadStimulus
            .as_ref()
            .expect("Expected function, got error."))(Port, pData, NumBytes)
    }
    pub unsafe fn JLINKARM_TIF_GetAvailable(&self, pMask: *mut ::std::os::raw::c_uint) -> () {
        (self
            .JLINKARM_TIF_GetAvailable
            .as_ref()
            .expect("Expected function, got error."))(pMask)
    }
    pub unsafe fn JLINK_TIF_GetAvailable(&self, pMask: *mut ::std::os::raw::c_uint) -> () {
        (self
            .JLINK_TIF_GetAvailable
            .as_ref()
            .expect("Expected function, got error."))(pMask)
    }
    pub unsafe fn JLINKARM_TIF_Select(
        &self,
        Interface: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_TIF_Select
            .as_ref()
            .expect("Expected function, got error."))(Interface)
    }
    pub unsafe fn JLINK_TIF_Select(
        &self,
        Interface: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_TIF_Select
            .as_ref()
            .expect("Expected function, got error."))(Interface)
    }
    pub unsafe fn JLINKARM_TRACE_Control(
        &self,
        Cmd: ::std::os::raw::c_uint,
        p: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint {
        (self
            .JLINKARM_TRACE_Control
            .as_ref()
            .expect("Expected function, got error."))(Cmd, p)
    }
    pub unsafe fn JLINK_TRACE_Control(
        &self,
        Cmd: ::std::os::raw::c_uint,
        p: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint {
        (self
            .JLINK_TRACE_Control
            .as_ref()
            .expect("Expected function, got error."))(Cmd, p)
    }
    pub unsafe fn JLINKARM_TRACE_Read(
        &self,
        pData: *mut JLINKARM_TRACE_DATA,
        Off: ::std::os::raw::c_uint,
        pNumItems: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint {
        (self
            .JLINKARM_TRACE_Read
            .as_ref()
            .expect("Expected function, got error."))(pData, Off, pNumItems)
    }
    pub unsafe fn JLINK_TRACE_Read(
        &self,
        pData: *mut JLINKARM_TRACE_DATA,
        Off: ::std::os::raw::c_uint,
        pNumItems: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint {
        (self
            .JLINK_TRACE_Read
            .as_ref()
            .expect("Expected function, got error."))(pData, Off, pNumItems)
    }
    pub unsafe fn JLINKARM_WA_AddRange(
        &self,
        Addr: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_char {
        (self
            .JLINKARM_WA_AddRange
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumBytes)
    }
    pub unsafe fn JLINK_WA_AddRange(
        &self,
        Addr: ::std::os::raw::c_uint,
        NumBytes: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_char {
        (self
            .JLINK_WA_AddRange
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumBytes)
    }
    pub unsafe fn JLINKARM_WA_Restore(&self) -> ::std::os::raw::c_char {
        (self
            .JLINKARM_WA_Restore
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_WA_Restore(&self) -> ::std::os::raw::c_char {
        (self
            .JLINK_WA_Restore
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_ReadMemEx_64(
        &self,
        Addr: ::std::os::raw::c_ulonglong,
        NumBytes: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_void,
        Flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadMemEx_64
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumBytes, pData, Flags)
    }
    pub unsafe fn JLINK_ReadMemU8_64(
        &self,
        Addr: ::std::os::raw::c_ulonglong,
        NumItems: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_uchar,
        pStatus: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadMemU8_64
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumItems, pData, pStatus)
    }
    pub unsafe fn JLINK_ReadMemU16_64(
        &self,
        Addr: ::std::os::raw::c_ulonglong,
        NumItems: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_ushort,
        pStatus: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadMemU16_64
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumItems, pData, pStatus)
    }
    pub unsafe fn JLINK_ReadMemU32_64(
        &self,
        Addr: ::std::os::raw::c_ulonglong,
        NumItems: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_uint,
        pStatus: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadMemU32_64
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumItems, pData, pStatus)
    }
    pub unsafe fn JLINK_ReadMemU64_64(
        &self,
        Addr: ::std::os::raw::c_ulonglong,
        NumItems: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_ulonglong,
        pStatus: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadMemU64_64
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumItems, pData, pStatus)
    }
    pub unsafe fn JLINK_ReadMemZonedEx_64(
        &self,
        Addr: ::std::os::raw::c_ulonglong,
        NumBytes: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_void,
        Flags: ::std::os::raw::c_uint,
        sZone: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadMemZonedEx_64
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumBytes, pData, Flags, sZone)
    }
    pub unsafe fn JLINK_ReadMemZonedU32_64(
        &self,
        Addr: ::std::os::raw::c_ulonglong,
        NumItems: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_uint,
        pStatus: *mut ::std::os::raw::c_uchar,
        sZone: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadMemZonedU32_64
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumItems, pData, pStatus, sZone)
    }
    pub unsafe fn JLINK_ReadMemZonedU16_64(
        &self,
        Addr: ::std::os::raw::c_ulonglong,
        NumItems: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_ushort,
        pStatus: *mut ::std::os::raw::c_uchar,
        sZone: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadMemZonedU16_64
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumItems, pData, pStatus, sZone)
    }
    pub unsafe fn JLINK_ReadRegs_64(
        &self,
        paRegIndex: *const ::std::os::raw::c_uint,
        paData: *mut ::std::os::raw::c_ulonglong,
        paStatus: *mut ::std::os::raw::c_uchar,
        NumRegs: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_ReadRegs_64
            .as_ref()
            .expect("Expected function, got error."))(paRegIndex, paData, paStatus, NumRegs)
    }
    pub unsafe fn JLINK_SetBPEx_64(
        &self,
        Addr: ::std::os::raw::c_ulonglong,
        TypeFlags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_SetBPEx_64
            .as_ref()
            .expect("Expected function, got error."))(Addr, TypeFlags)
    }
    pub unsafe fn JLINK_WriteMemEx_64(
        &self,
        Addr: ::std::os::raw::c_ulonglong,
        NumBytes: ::std::os::raw::c_uint,
        p: *const ::std::os::raw::c_void,
        Flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteMemEx_64
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumBytes, p, Flags)
    }
    pub unsafe fn JLINK_WriteRegs_64(
        &self,
        paRegIndex: *const ::std::os::raw::c_uint,
        paData: *const ::std::os::raw::c_ulonglong,
        paStatus: *mut ::std::os::raw::c_uchar,
        NumRegs: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteRegs_64
            .as_ref()
            .expect("Expected function, got error."))(paRegIndex, paData, paStatus, NumRegs)
    }
    pub unsafe fn JLINK_WriteU8_64(
        &self,
        Addr: ::std::os::raw::c_ulonglong,
        Data: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteU8_64
            .as_ref()
            .expect("Expected function, got error."))(Addr, Data)
    }
    pub unsafe fn JLINK_WriteU16_64(
        &self,
        Addr: ::std::os::raw::c_ulonglong,
        Data: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteU16_64
            .as_ref()
            .expect("Expected function, got error."))(Addr, Data)
    }
    pub unsafe fn JLINK_WriteU32_64(
        &self,
        Addr: ::std::os::raw::c_ulonglong,
        Data: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteU32_64
            .as_ref()
            .expect("Expected function, got error."))(Addr, Data)
    }
    pub unsafe fn JLINK_WriteU64_64(
        &self,
        Addr: ::std::os::raw::c_ulonglong,
        Data: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteU64_64
            .as_ref()
            .expect("Expected function, got error."))(Addr, Data)
    }
    pub unsafe fn JLINK_WriteMemZonedEx_64(
        &self,
        Addr: ::std::os::raw::c_ulonglong,
        NumBytes: ::std::os::raw::c_uint,
        p: *const ::std::os::raw::c_void,
        Flags: ::std::os::raw::c_uint,
        sZone: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteMemZonedEx_64
            .as_ref()
            .expect("Expected function, got error."))(Addr, NumBytes, p, Flags, sZone)
    }
    pub unsafe fn JLINK_WriteZonedU32_64(
        &self,
        Addr: ::std::os::raw::c_ulonglong,
        Data: ::std::os::raw::c_uint,
        sZone: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteZonedU32_64
            .as_ref()
            .expect("Expected function, got error."))(Addr, Data, sZone)
    }
    pub unsafe fn JLINK_WriteZonedU16_64(
        &self,
        Addr: ::std::os::raw::c_ulonglong,
        Data: ::std::os::raw::c_ushort,
        sZone: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINK_WriteZonedU16_64
            .as_ref()
            .expect("Expected function, got error."))(Addr, Data, sZone)
    }
    pub unsafe fn JLINKARM_TRACE_AddInst(
        &self,
        Inst: ::std::os::raw::c_uint,
        BAddr: ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINKARM_TRACE_AddInst
            .as_ref()
            .expect("Expected function, got error."))(Inst, BAddr)
    }
    pub unsafe fn JLINK_TRACE_AddInst(
        &self,
        Inst: ::std::os::raw::c_uint,
        BAddr: ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINK_TRACE_AddInst
            .as_ref()
            .expect("Expected function, got error."))(Inst, BAddr)
    }
    pub unsafe fn JLINKARM_TRACE_AddItems(
        &self,
        pData: *const JLINKARM_TRACE_DATA,
        NumItems: ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINKARM_TRACE_AddItems
            .as_ref()
            .expect("Expected function, got error."))(pData, NumItems)
    }
    pub unsafe fn JLINK_TRACE_AddItems(
        &self,
        pData: *const JLINKARM_TRACE_DATA,
        NumItems: ::std::os::raw::c_uint,
    ) -> () {
        (self
            .JLINK_TRACE_AddItems
            .as_ref()
            .expect("Expected function, got error."))(pData, NumItems)
    }
    pub unsafe fn JLINKARM_GetDeviceId(
        &self,
        DeviceIndex: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint {
        (self
            .JLINKARM_GetDeviceId
            .as_ref()
            .expect("Expected function, got error."))(DeviceIndex)
    }
    pub unsafe fn JLINKARM_GetEmbeddedFWVersion(&self) -> ::std::os::raw::c_ushort {
        (self
            .JLINKARM_GetEmbeddedFWVersion
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_GetEmbeddedFWVersion(&self) -> ::std::os::raw::c_ushort {
        (self
            .JLINK_GetEmbeddedFWVersion
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_GetU32(&self, BitOff: ::std::os::raw::c_int) -> ::std::os::raw::c_uint {
        (self
            .JLINKARM_GetU32
            .as_ref()
            .expect("Expected function, got error."))(BitOff)
    }
    pub unsafe fn JLINK_GetU32(&self, BitOff: ::std::os::raw::c_int) -> ::std::os::raw::c_uint {
        (self
            .JLINK_GetU32
            .as_ref()
            .expect("Expected function, got error."))(BitOff)
    }
    pub unsafe fn JLINKARM_SelDevice(&self, DeviceIndex: ::std::os::raw::c_ushort) -> () {
        (self
            .JLINKARM_SelDevice
            .as_ref()
            .expect("Expected function, got error."))(DeviceIndex)
    }
    pub unsafe fn JLINK_SelDevice(&self, DeviceIndex: ::std::os::raw::c_ushort) -> () {
        (self
            .JLINK_SelDevice
            .as_ref()
            .expect("Expected function, got error."))(DeviceIndex)
    }
    pub unsafe fn JLINKARM_StepComposite(&self) -> ::std::os::raw::c_char {
        (self
            .JLINKARM_StepComposite
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_StepComposite(&self) -> ::std::os::raw::c_char {
        (self
            .JLINK_StepComposite
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_StoreCmd(&self, Cmd: ::std::os::raw::c_uchar) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_StoreCmd
            .as_ref()
            .expect("Expected function, got error."))(Cmd)
    }
    pub unsafe fn JLINK_StoreCmd(&self, Cmd: ::std::os::raw::c_uchar) -> ::std::os::raw::c_int {
        (self
            .JLINK_StoreCmd
            .as_ref()
            .expect("Expected function, got error."))(Cmd)
    }
    pub unsafe fn JLINKARM_StoreData(
        &self,
        pTDI: *const ::std::os::raw::c_uchar,
        NumBits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_StoreData
            .as_ref()
            .expect("Expected function, got error."))(pTDI, NumBits)
    }
    pub unsafe fn JLINKARM_WriteBits(&self) -> () {
        (self
            .JLINKARM_WriteBits
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_WriteBits(&self) -> () {
        (self
            .JLINK_WriteBits
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINKARM_EnableLogCom(&self, pfLog: JLINKARM_LOG) -> () {
        (self
            .JLINKARM_EnableLogCom
            .as_ref()
            .expect("Expected function, got error."))(pfLog)
    }
    pub unsafe fn JLINK_EnableLogCom(&self, pfLog: JLINK_LOG) -> () {
        (self
            .JLINK_EnableLogCom
            .as_ref()
            .expect("Expected function, got error."))(pfLog)
    }
    pub unsafe fn JLINKARM_SetFlashArea(
        &self,
        Addr: ::std::os::raw::c_uint,
        Size: ::std::os::raw::c_uint,
        pFlashAPI: *const ::std::os::raw::c_void,
    ) -> () {
        (self
            .JLINKARM_SetFlashArea
            .as_ref()
            .expect("Expected function, got error."))(Addr, Size, pFlashAPI)
    }
    pub unsafe fn JLINK_SetFlashArea(
        &self,
        Addr: ::std::os::raw::c_uint,
        Size: ::std::os::raw::c_uint,
        pFlashAPI: *const ::std::os::raw::c_void,
    ) -> () {
        (self
            .JLINK_SetFlashArea
            .as_ref()
            .expect("Expected function, got error."))(Addr, Size, pFlashAPI)
    }
    pub unsafe fn JLINKARM_PERIODIC_ConfReadMem(
        &self,
        Period_us: ::std::os::raw::c_uint,
        paReadDesc: *mut JLINKARM_READ_DESC,
        NumReadDescs: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_PERIODIC_ConfReadMem
            .as_ref()
            .expect("Expected function, got error."))(Period_us, paReadDesc, NumReadDescs)
    }
    pub unsafe fn JLINKARM_PERIODIC_Control(
        &self,
        Cmd: ::std::os::raw::c_uint,
        pData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_PERIODIC_Control
            .as_ref()
            .expect("Expected function, got error."))(Cmd, pData)
    }
    pub unsafe fn JLINKARM_PERIODIC_Read(
        &self,
        pData: *mut ::std::os::raw::c_uchar,
        BufferSize: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .JLINKARM_PERIODIC_Read
            .as_ref()
            .expect("Expected function, got error."))(pData, BufferSize)
    }
    pub unsafe fn JLINK_FLASH_EraseChip(&self) -> ::std::os::raw::c_int {
        (self
            .JLINK_FLASH_EraseChip
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn JLINK_FLASH_SetNotifyHandler(&self, pfNotify: JLINKARM_FLASH_NOTIFY_FUNC) -> () {
        (self
            .JLINK_FLASH_SetNotifyHandler
            .as_ref()
            .expect("Expected function, got error."))(pfNotify)
    }
}
